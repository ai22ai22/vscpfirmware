###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.12.0.50667/W32         18/Apr/2008  14:00:40 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\development\gediminas\CAN4USB\project\app\sysTime75x. #
#                    c                                                        #
#    Command line =  D:\development\gediminas\CAN4USB\project\app\sysTime75x. #
#                    c -lC D:\development\gediminas\CAN4USB\project\RELEASE\L #
#                    ist\ -lA D:\development\gediminas\CAN4USB\project\RELEAS #
#                    E\List\ -o D:\development\gediminas\CAN4USB\project\RELE #
#                    ASE\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian little --cpu            #
#                    ARM7TDMI-S -e --fpu None --dlib_config "D:\Program\IAR   #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I D:\development\gediminas\CAN4USB\project\ -I     #
#                    D:\development\gediminas\CAN4USB\project\app\ -I         #
#                    D:\development\gediminas\CAN4USB\project\board\ -I       #
#                    D:\development\gediminas\CAN4USB\project\module\ -I      #
#                    D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\inc\ -I j:\common\ -I "D:\Program\IAR             #
#                    Systems\Embedded Workbench 5.0\ARM\INC\" --interwork     #
#                    --cpu_mode thumb -On                                     #
#    List file    =  D:\development\gediminas\CAN4USB\project\RELEASE\List\sy #
#                    sTime75x.lst                                             #
#    Object file  =  D:\development\gediminas\CAN4USB\project\RELEASE\Obj\sys #
#                    Time75x.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\development\gediminas\CAN4USB\project\app\sysTime75x.c
      1          /******************************************************************************
      2           *
      3           * $RCSfile: sysTime.c,v $
      4           * $Revision: 1.4 $
      5           *
      6           * This module provides the interface routines for initializing and
      7           * accessing the system timing functions.
      8           * Copyright 2004, R O SoftWare
      9           * No guarantees, warrantees, or promises, implied or otherwise.
     10           * May be used for hobby or commercial purposes provided copyright
     11           * notice remains intact.
     12           *
     13           *****************************************************************************/
     14          
     15          //
     16          // The TB2_IRQHandler handler in vectors.c  must be implemented fot this to work
     17          // This rotine should update the sysTICs value once each millisecond.
     18          // Something like this is needed
     19          //
     20          // 	sysTICs++;
     21          //	TB_FlagClear( TB2 );
     22          //
     23          
     24          #include "includes.h"
     25          #include "75x_conf.h"
     26          #include "75x_lib.h"
     27          #include "sysTime.h"
     28          

   \                                 In section .bss, align 4
     29          volatile Int32U sysTICs;
   \                     sysTICs:
   \   00000000                      DS8 4
     30          
     31          /******************************************************************************
     32           *
     33           * Function Name: initTimebase()
     34           *
     35           * Description:
     36           *    This function initializes the TB2 for use as the system timer.
     37           *
     38           * Calling Sequence:
     39           *    void
     40           *
     41           * Returns:
     42           *    void
     43           *
     44           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     45          void initTimebase( void )
     46          {
   \                     initTimebase:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     47            TB_InitTypeDef    TB_InitStructure;
     48            EIC_IRQInitTypeDef EIC_IRQInitStructure;
     49          
     50            sysTICs = 0;
   \   00000004   ....               LDR      R0,??DataTable1  ;; sysTICs
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0160               STR      R1,[R0, #+0]
     51          
     52            MRCC_PeripheralClockConfig( MRCC_Peripheral_TB, ENABLE );
   \   0000000A   0121               MOVS     R1,#+1
   \   0000000C   0220               MOVS     R0,#+2
   \   0000000E   ........           BL       MRCC_PeripheralClockConfig
     53          
     54          	// TB2 Configuration to get timbase IRQ each 1ms
     55            TB_InitStructure.TB_ClockSource = TB_ClockSource_CKTIM;
   \   00000012   01A8               ADD      R0,SP,#+4
   \   00000014   0121               MOVS     R1,#+1
   \   00000016   4180               STRH     R1,[R0, #+2]
     56            TB_InitStructure.TB_Prescaler = 100;             // The internal TB Frequency = 160KHz
   \   00000018   01A8               ADD      R0,SP,#+4
   \   0000001A   6421               MOVS     R1,#+100
   \   0000001C   0181               STRH     R1,[R0, #+8]
     57            TB_InitStructure.TB_AutoReload = 160;           // 160000Hz * 0.001 s  = 160
   \   0000001E   01A8               ADD      R0,SP,#+4
   \   00000020   A021               MOVS     R1,#+160
   \   00000022   4181               STRH     R1,[R0, #+10]
     58          
     59            TB_Init( &TB_InitStructure );
   \   00000024   01A8               ADD      R0,SP,#+4
   \   00000026   ........           BL       TB_Init
     60            TB_ITConfig( TB_IT_Update, ENABLE );
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   ........           BL       TB_ITConfig
     61          	
     62            //EIC_IRQChannelConfig( TB_IRQChannel, ENABLE );  // Enable IRQ
     63            
     64            // Enable and configure the priority of the TIM0 Output compare IRQ Channel
     65            EIC_IRQInitStructure.EIC_IRQChannel = TB_IRQChannel;
   \   00000032   6846               MOV      R0,SP
   \   00000034   1F21               MOVS     R1,#+31
   \   00000036   0170               STRB     R1,[R0, #+0]
     66            EIC_IRQInitStructure.EIC_IRQChannelPriority = 1;
   \   00000038   6846               MOV      R0,SP
   \   0000003A   0121               MOVS     R1,#+1
   \   0000003C   4170               STRB     R1,[R0, #+1]
     67            EIC_IRQInitStructure.EIC_IRQChannelCmd = ENABLE;
   \   0000003E   6846               MOV      R0,SP
   \   00000040   0121               MOVS     R1,#+1
   \   00000042   8170               STRB     R1,[R0, #+2]
     68            EIC_IRQInit( &EIC_IRQInitStructure );
   \   00000044   6846               MOV      R0,SP
   \   00000046   ........           BL       EIC_IRQInit
     69          	
     70            TB_Cmd( ENABLE );													// Enable the timer
   \   0000004A   0120               MOVS     R0,#+1
   \   0000004C   ........           BL       TB_Cmd
     71          }
   \   00000050   05B0               ADD      SP,SP,#+20
   \   00000052   01BC               POP      {R0}
   \   00000054   0047               BX       R0               ;; return
     72          
     73          /******************************************************************************
     74           *
     75           * Function Name: getSysTICs()
     76           *
     77           * Description:
     78           *    This function returns the current syetem time in TICs.
     79           *
     80           * Calling Sequence:
     81           *    void
     82           *
     83           * Returns:
     84           *    The current time in TICs as represented by sysTICs
     85           *
     86           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     87          u32 getSysTICs( void )
     88          {
     89            return sysTICs;
   \                     getSysTICs:
   \   00000000   ....               LDR      R0,??DataTable1  ;; sysTICs
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
     90          }
     91          
     92          
     93          /******************************************************************************
     94           *
     95           * Function Name: getElapsedSysTICs()
     96           *
     97           * Description:
     98           *    This function then returns the difference in TICs between the
     99           *    given starting time and the current system time.
    100           *
    101           * Calling Sequence:
    102           *    The starting time.
    103           *
    104           * Returns:
    105           *    The time difference.
    106           *
    107           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    108          u32 getElapsedSysTICs( u32 startTime )
    109          {
   \                     getElapsedSysTICs:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    110            return ( getSysTICs() - startTime );
   \   00000004   ........           BL       getSysTICs
   \   00000008   001B               SUBS     R0,R0,R4
   \   0000000A   10BC               POP      {R4}
   \   0000000C   02BC               POP      {R1}
   \   0000000E   0847               BX       R1               ;; return
    111          }
    112          
    113          
    114          /******************************************************************************
    115           *
    116           * Function Name: pause()
    117           *
    118           * Description:
    119           *    This function does not return until the specified 'duration' in
    120           *    TICs has elapsed.
    121           *
    122           * Calling Sequence:
    123           *    duration - length of time in TICs to wait before returning
    124           *
    125           * Returns:
    126           *    void
    127           *
    128           *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    129          void pause( u32 duration )
    130          {
   \                     pause:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    131            u32 startTime = getSysTICs();
   \   00000004   ........           BL       getSysTICs
   \   00000008   0500               MOVS     R5,R0
    132          
    133            while ( getElapsedSysTICs( startTime ) < duration ) ;
   \                     ??pause_0:
   \   0000000A   2800               MOVS     R0,R5
   \   0000000C   ........           BL       getElapsedSysTICs
   \   00000010   A042               CMP      R0,R4
   \   00000012   FAD3               BCC      ??pause_0
    134          	
    135          }
   \   00000014   38BC               POP      {R3-R5}
   \   00000016   01BC               POP      {R0}
   \   00000018   0047               BX       R0               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     sysTICs
    136          
    137          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     getElapsedSysTICs      8
     getSysTICs             0
     initTimebase          24
     pause                 16


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     sysTICs              4
     initTimebase        86
     getSysTICs           6
     getElapsedSysTICs   16
     pause               26
     ??DataTable1         4

 
   4 bytes in section .bss
 138 bytes in section .text
 
 138 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
