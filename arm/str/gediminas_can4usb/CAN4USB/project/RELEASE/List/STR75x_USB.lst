###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.12.0.50667/W32         18/Apr/2008  14:00:34 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\development\gediminas\CAN4USB\project\module\STR75x_U #
#                    SB.c                                                     #
#    Command line =  D:\development\gediminas\CAN4USB\project\module\STR75x_U #
#                    SB.c -lC D:\development\gediminas\CAN4USB\project\RELEAS #
#                    E\List\ -lA D:\development\gediminas\CAN4USB\project\REL #
#                    EASE\List\ -o D:\development\gediminas\CAN4USB\project\R #
#                    ELEASE\Obj\ --no_cse --no_unroll --no_inline             #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian little --cpu            #
#                    ARM7TDMI-S -e --fpu None --dlib_config "D:\Program\IAR   #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I D:\development\gediminas\CAN4USB\project\ -I     #
#                    D:\development\gediminas\CAN4USB\project\app\ -I         #
#                    D:\development\gediminas\CAN4USB\project\board\ -I       #
#                    D:\development\gediminas\CAN4USB\project\module\ -I      #
#                    D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\inc\ -I j:\common\ -I "D:\Program\IAR             #
#                    Systems\Embedded Workbench 5.0\ARM\INC\" --interwork     #
#                    --cpu_mode thumb -On                                     #
#    List file    =  D:\development\gediminas\CAN4USB\project\RELEASE\List\ST #
#                    R75x_USB.lst                                             #
#    Object file  =  D:\development\gediminas\CAN4USB\project\RELEASE\Obj\STR #
#                    75x_USB.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\development\gediminas\CAN4USB\project\module\STR75x_USB.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2006
      6           *
      7           *    File name   : STR75x_usb.c
      8           *    Description : usb module (HAL)
      9           *
     10           *    History :
     11           *    1. Date        : July 28, 2006
     12           *       Author      : Stanimir Bonev
     13           *       Description : Create
     14           *    2. Date        : November 20, 2006
     15           *       Author      : Stanimir Bonev
     16           *       Description : Modify
     17           *    Fix problems with double buffered EPs
     18           *
     19           *    $Revision: 16170 $
     20           **************************************************************************/
     21          
     22          #define HAL_USB_GLOBAL
     23          #include "STR75x_usb.h"

   \                                 In section .text, align 4
   \   __??Code16?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   3200               MOVS     R2,R6
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       __aeabi_memcpy
   \   00000012   2000               MOVS     R0,R4
   \   00000014   70BC               POP      {R4-R6}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return
     24          
     25          #pragma section="USB_PACKET_MEMORY"
     26          
     27          #pragma location="USB_PACKET_MEMORY"

   \                                 In section USB_PACKET_MEMORY, align 4, root
     28          __root __no_init Int32U USB_PacketMemory[256];
   \                     USB_PacketMemory:
   \   00000000                      DS8 1024
     29          

   \                                 In section .bss, align 4
     30          pPacketMemUse_t pPacketMemUse;
   \                     pPacketMemUse:
   \   00000000                      DS8 4
     31          

   \                                 In section .bss, align 4
     32          PacketMemUse_t PacketMemBuff[EP_MAX_SLOTS*2];
   \                     PacketMemBuff:
   \   00000000                      DS8 192
     33          

   \                                 In section .bss, align 4
     34          EpInfo_t EpInfo[ENP_MAX_NUMB];
   \                     EpInfo:
   \   00000000                      DS8 640
     35          

   \                                 In section .bss, align 4
     36          Int32U DlyCnt;
   \                     DlyCnt:
   \   00000000                      DS8 4
     37          

   \                                 In section .bss, align 4
     38          UserFunc_t UsbUserFun [UsbLastEvent] =
   \                     UsbUserFun:
   \   00000000                      DS8 176
     39          {
     40            // Ep 0 Out
     41            NULL,
     42            // Ep 0 In
     43            NULL,
     44            // Ep 1 Out
     45            NULL,
     46            // Ep 1 In
     47            NULL,
     48            // Ep 2 Out
     49            NULL,
     50            // Ep 2 Int
     51            NULL,
     52            // Ep 3 Out
     53            NULL,
     54            // Ep 3 In
     55            NULL,
     56            // Ep 4 Out
     57            NULL,
     58            // Ep 4 In
     59            NULL,
     60            // Ep 5 Out
     61            NULL,
     62            // Ep 5 In
     63            NULL,
     64            // Ep 6 Out
     65            NULL,
     66            // Ep 6 In
     67            NULL,
     68            // Ep 7 Out
     69            NULL,
     70            // Ep 7 In
     71            NULL,
     72            // Ep 8 Out
     73            NULL,
     74            // Ep 8 In
     75            NULL,
     76            // Ep 9 Out
     77            NULL,
     78            // Ep 9 In
     79            NULL,
     80            // Ep 10 Out
     81            NULL,
     82            // Ep 10 In
     83            NULL,
     84            // Ep 11 Out
     85            NULL,
     86            // Ep 11 In
     87            NULL,
     88            // Ep 12 Out
     89            NULL,
     90            // Ep 12 In
     91            NULL,
     92            // Ep 13 Out
     93            NULL,
     94            // Ep 13 In
     95            NULL,
     96            // Ep 14 Out
     97            NULL,
     98            // Ep 14 In
     99            NULL,
    100            // Ep 15 Out
    101            NULL,
    102            // Ep 15 In
    103            NULL,
    104            // UsbClassEp0OutPacket
    105            NULL,
    106            // UsbVendorEp0OutPacket
    107            NULL,
    108            // UsbUserSofEvent
    109            NULL,
    110            // UsbUserClass
    111            NULL,
    112            // UsbUserVendor
    113            NULL,
    114            // UsbUserGetDescriptor
    115            NULL,
    116            // UsbUserConfigure
    117            NULL,
    118            // UsbUserReset
    119            NULL,
    120            // UsbUserConnect
    121            NULL,
    122            // UsbUserSuspend
    123            NULL,
    124            // UsbUserEpStall
    125            NULL,
    126            // UsbUserEpUnStall
    127            NULL,
    128          };
    129          

   \                                 In section .bss, align 4
    130          UsbEpCtrl_t UsbEp0Ctrl;
   \                     UsbEp0Ctrl:
   \   00000000                      DS8 12
    131          

   \                                 In section .bss, align 4
    132          UsbSetupPacket_t UsbEp0SetupPacket;
   \                     UsbEp0SetupPacket:
   \   00000000                      DS8 8
    133          
    134          #pragma data_alignment=4

   \                                 In section .bss, align 4
    135          Int8U EpCtrlDataBuf[Ep0MaxSize];
   \                     EpCtrlDataBuf:
   \   00000000                      DS8 8
    136          

   \                                 In section .bss, align 4
    137          UsbDevCtrl_t UsbDevCtrl = {{UsbDevStatusUnknow,UsbDevStatusNoSuspend},0,0,0,0};
   \                     UsbDevCtrl:
   \   00000000                      DS8 24
    138          

   \                                 In section .bss, align 4
    139          CommUserFpnt_t UsbCoreT9Fun;
   \                     UsbCoreT9Fun:
   \   00000000                      DS8 4
    140          
    141          #include "usb_common.c"

   \                                 In section .text, align 4, keep-with-next
   \   __??Code16?? __code __interwork UserFunc_t USB_UserFuncRegistering(UserFunc_t, UsbUserEvent_t)
   \                     USB_UserFuncRegistering:
   \   00000000   11B4               PUSH     {R0,R4}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0423               MOVS     R3,#+4
   \   0000000A   4B43               MULS     R3,R1,R3
   \   0000000C   ....               LDR      R4,??DataTable1  ;; UsbUserFun
   \   0000000E   E358               LDR      R3,[R4, R3]
   \   00000010   1800               MOVS     R0,R3
   \   00000012   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000014   090E               LSRS     R1,R1,#+24
   \   00000016   0423               MOVS     R3,#+4
   \   00000018   4B43               MULS     R3,R1,R3
   \   0000001A   ....               LDR      R4,??DataTable1  ;; UsbUserFun
   \   0000001C   E250               STR      R2,[R4, R3]
   \   0000001E   18BC               POP      {R3,R4}
   \   00000020   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __??Code16?? __code __interwork Int32U UsbCoreReq(UsbCoreReqType_t)
   \                     UsbCoreReq:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0800               MOVS     R0,R1
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   0ED0               BEQ      ??UsbCoreReq_0
   \   0000000E   401E               SUBS     R0,R0,#+1
   \   00000010   11D0               BEQ      ??UsbCoreReq_1
   \   00000012   401E               SUBS     R0,R0,#+1
   \   00000014   17D0               BEQ      ??UsbCoreReq_2
   \   00000016   401E               SUBS     R0,R0,#+1
   \   00000018   18D0               BEQ      ??UsbCoreReq_3
   \   0000001A   401E               SUBS     R0,R0,#+1
   \   0000001C   19D0               BEQ      ??UsbCoreReq_4
   \   0000001E   401E               SUBS     R0,R0,#+1
   \   00000020   1AD0               BEQ      ??UsbCoreReq_5
   \   00000022   401E               SUBS     R0,R0,#+1
   \   00000024   1BD0               BEQ      ??UsbCoreReq_6
   \   00000026   401E               SUBS     R0,R0,#+1
   \   00000028   24D0               BEQ      ??UsbCoreReq_7
   \   0000002A   28E0               B        ??UsbCoreReq_8
   \                     ??UsbCoreReq_0:
   \   0000002C   ....               LDR      R0,??DataTable30  ;; UsbDevCtrl
   \   0000002E   0078               LDRB     R0,[R0, #+0]
   \   00000030   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000032   400F               LSRS     R0,R0,#+29
   \   00000034   25E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_1:
   \   00000036   ....               LDR      R0,??DataTable30  ;; UsbDevCtrl
   \   00000038   0078               LDRB     R0,[R0, #+0]
   \   0000003A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003C   000E               LSRS     R0,R0,#+24
   \   0000003E   C009               LSRS     R0,R0,#+7
   \   00000040   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000042   000E               LSRS     R0,R0,#+24
   \   00000044   1DE0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_2:
   \   00000046   ....               LDR      R0,??DataTable23  ;; UsbDevCtrl + 4
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   1AE0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_3:
   \   0000004C   ....               LDR      R0,??DataTable21  ;; UsbDevCtrl + 8
   \   0000004E   0068               LDR      R0,[R0, #+0]
   \   00000050   17E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_4:
   \   00000052   ....               LDR      R0,??DataTable22  ;; UsbDevCtrl + 12
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   14E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_5:
   \   00000058   ....               LDR      R0,??DataTable24  ;; UsbDevCtrl + 16
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   11E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_6:
   \   0000005E   ....               LDR      R0,??DataTable34  ;; UsbDevCtrl + 20
   \   00000060   0078               LDRB     R0,[R0, #+0]
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   0240               ANDS     R2,R2,R0
   \   00000066   1000               MOVS     R0,R2
   \   00000068   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   4008               LSRS     R0,R0,#+1
   \   0000006E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000070   000E               LSRS     R0,R0,#+24
   \   00000072   06E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_7:
   \   00000074   ....               LDR      R0,??DataTable34  ;; UsbDevCtrl + 20
   \   00000076   0278               LDRB     R2,[R0, #+0]
   \   00000078   0120               MOVS     R0,#+1
   \   0000007A   1040               ANDS     R0,R0,R2
   \   0000007C   01E0               B        ??UsbCoreReq_9
   \                     ??UsbCoreReq_8:
   \   0000007E   0020               MOVS     R0,#+0
   \   00000080   C043               MVNS     R0,R0            ;; #-1
   \                     ??UsbCoreReq_9:
   \   00000082   08BC               POP      {R3}
   \   00000084   02BC               POP      {R1}
   \   00000086   0847               BX       R1               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetDevState(UsbT9DevState_t)
   \                     UsbSetDevState:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   ....               LDR      R0,??DataTable30  ;; UsbDevCtrl
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   F821               MOVS     R1,#+248
   \   0000000A   0140               ANDS     R1,R1,R0
   \   0000000C   6007               LSLS     R0,R4,#+29       ;; ZeroExtS R0,R4,#+29,#+29
   \   0000000E   400F               LSRS     R0,R0,#+29
   \   00000010   0843               ORRS     R0,R0,R1
   \   00000012   ....               LDR      R1,??DataTable30  ;; UsbDevCtrl
   \   00000014   0870               STRB     R0,[R1, #+0]
   \   00000016   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000018   240E               LSRS     R4,R4,#+24
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   401E               SUBS     R0,R0,#+1
   \   0000001E   0228               CMP      R0,#+2
   \   00000020   04D9               BLS      ??UsbSetDevState_0
   \   00000022   C01E               SUBS     R0,R0,#+3
   \   00000024   17D0               BEQ      ??UsbSetDevState_1
   \   00000026   401E               SUBS     R0,R0,#+1
   \   00000028   20D0               BEQ      ??UsbSetDevState_2
   \   0000002A   23E0               B        ??UsbSetDevState_3
   \                     ??UsbSetDevState_0:
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   ........           BL       USB_Configure
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   ........           BL       USB_SetAdd
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   ....               LDR      R1,??DataTable31  ;; UsbUserFun + 152
   \   0000003C   0968               LDR      R1,[R1, #+0]
   \   0000003E   ........           BL       __iar_via_R1
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   ....               LDR      R1,??DataTable21  ;; UsbDevCtrl + 8
   \   00000046   0860               STR      R0,[R1, #+0]
   \   00000048   ....               LDR      R1,??DataTable22  ;; UsbDevCtrl + 12
   \   0000004A   0860               STR      R0,[R1, #+0]
   \   0000004C   ....               LDR      R1,??DataTable23  ;; UsbDevCtrl + 4
   \   0000004E   0860               STR      R0,[R1, #+0]
   \   00000050   ....               LDR      R1,??DataTable24  ;; UsbDevCtrl + 16
   \   00000052   0860               STR      R0,[R1, #+0]
   \   00000054   1FE0               B        ??UsbSetDevState_4
   \                     ??UsbSetDevState_1:
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   ........           BL       USB_Configure
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   ....               LDR      R1,??DataTable21  ;; UsbDevCtrl + 8
   \   00000060   0860               STR      R0,[R1, #+0]
   \   00000062   ....               LDR      R1,??DataTable22  ;; UsbDevCtrl + 12
   \   00000064   0860               STR      R0,[R1, #+0]
   \   00000066   ....               LDR      R1,??DataTable23  ;; UsbDevCtrl + 4
   \   00000068   0860               STR      R0,[R1, #+0]
   \   0000006A   14E0               B        ??UsbSetDevState_4
   \                     ??UsbSetDevState_2:
   \   0000006C   0120               MOVS     R0,#+1
   \   0000006E   ........           BL       USB_Configure
   \   00000072   10E0               B        ??UsbSetDevState_4
   \                     ??UsbSetDevState_3:
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   ........           BL       USB_Configure
   \   0000007A   0020               MOVS     R0,#+0
   \   0000007C   ....               LDR      R1,??DataTable31  ;; UsbUserFun + 152
   \   0000007E   0968               LDR      R1,[R1, #+0]
   \   00000080   ........           BL       __iar_via_R1
   \   00000084   0020               MOVS     R0,#+0
   \   00000086   ....               LDR      R1,??DataTable21  ;; UsbDevCtrl + 8
   \   00000088   0860               STR      R0,[R1, #+0]
   \   0000008A   ....               LDR      R1,??DataTable22  ;; UsbDevCtrl + 12
   \   0000008C   0860               STR      R0,[R1, #+0]
   \   0000008E   ....               LDR      R1,??DataTable23  ;; UsbDevCtrl + 4
   \   00000090   0860               STR      R0,[R1, #+0]
   \   00000092   ....               LDR      R1,??DataTable24  ;; UsbDevCtrl + 16
   \   00000094   0860               STR      R0,[R1, #+0]
   \                     ??UsbSetDevState_4:
   \   00000096   10BC               POP      {R4}
   \   00000098   01BC               POP      {R0}
   \   0000009A   0047               BX       R0               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetDevSuspend(Boolean)
   \                     UsbSetDevSuspend:
   \   00000000   0100               MOVS     R1,R0
   \   00000002   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000004   090E               LSRS     R1,R1,#+24
   \   00000006   491E               SUBS     R1,R1,#+1
   \   00000008   8941               SBCS     R1,R1,R1
   \   0000000A   C943               MVNS     R1,R1
   \   0000000C   C90F               LSRS     R1,R1,#+31
   \   0000000E   ....               LDR      R2,??DataTable30  ;; UsbDevCtrl
   \   00000010   1278               LDRB     R2,[R2, #+0]
   \   00000012   5206               LSLS     R2,R2,#+25       ;; ZeroExtS R2,R2,#+25,#+25
   \   00000014   520E               LSRS     R2,R2,#+25
   \   00000016   C901               LSLS     R1,R1,#+7
   \   00000018   1143               ORRS     R1,R1,R2
   \   0000001A   ....               LDR      R2,??DataTable30  ;; UsbDevCtrl
   \   0000001C   1170               STRB     R1,[R2, #+0]
   \   0000001E   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbFindInterface(struct _UsbStandardConfigurationDescriptor_t *, UsbDevCtrl_t *)
   \                     UsbFindInterface:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   1300               MOVS     R3,R2
   \                     ??UsbFindInterface_0:
   \   00000006   9478               LDRB     R4,[R2, #+2]
   \   00000008   D078               LDRB     R0,[R2, #+3]
   \   0000000A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+16
   \   0000000C   000C               LSRS     R0,R0,#+16
   \   0000000E   0443               ORRS     R4,R4,R0
   \   00000010   1019               ADDS     R0,R2,R4
   \   00000012   8342               CMP      R3,R0
   \   00000014   0FD2               BCS      ??UsbFindInterface_1
   \   00000016   5878               LDRB     R0,[R3, #+1]
   \   00000018   0428               CMP      R0,#+4
   \   0000001A   09D1               BNE      ??UsbFindInterface_2
   \   0000001C   9878               LDRB     R0,[R3, #+2]
   \   0000001E   8C68               LDR      R4,[R1, #+8]
   \   00000020   A042               CMP      R0,R4
   \   00000022   05D1               BNE      ??UsbFindInterface_2
   \   00000024   D878               LDRB     R0,[R3, #+3]
   \   00000026   CC68               LDR      R4,[R1, #+12]
   \   00000028   A042               CMP      R0,R4
   \   0000002A   01D1               BNE      ??UsbFindInterface_2
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   03E0               B        ??UsbFindInterface_3
   \                     ??UsbFindInterface_2:
   \   00000030   1878               LDRB     R0,[R3, #+0]
   \   00000032   1B18               ADDS     R3,R3,R0
   \   00000034   E7E7               B        ??UsbFindInterface_0
   \                     ??UsbFindInterface_1:
   \   00000036   0120               MOVS     R0,#+1
   \                     ??UsbFindInterface_3:
   \   00000038   10BC               POP      {R4}
   \   0000003A   02BC               POP      {R1}
   \   0000003C   0847               BX       R1               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork struct _UsbStandardConfigurationDescriptor_t *UsbFindConfiguration(Int32U)
   \                     UsbFindConfiguration:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   ....               LDR      R0,??DataTable27  ;; UsbStandardConfigurationDescriptor
   \   00000006   0200               MOVS     R2,R0
   \                     ??UsbFindConfiguration_0:
   \   00000008   1078               LDRB     R0,[R2, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   0AD0               BEQ      ??UsbFindConfiguration_1
   \   0000000E   5078               LDRB     R0,[R2, #+1]
   \   00000010   0228               CMP      R0,#+2
   \   00000012   04D1               BNE      ??UsbFindConfiguration_2
   \   00000014   5079               LDRB     R0,[R2, #+5]
   \   00000016   8842               CMP      R0,R1
   \   00000018   01D1               BNE      ??UsbFindConfiguration_2
   \   0000001A   1000               MOVS     R0,R2
   \   0000001C   03E0               B        ??UsbFindConfiguration_3
   \                     ??UsbFindConfiguration_2:
   \   0000001E   1078               LDRB     R0,[R2, #+0]
   \   00000020   1218               ADDS     R2,R2,R0
   \   00000022   F1E7               B        ??UsbFindConfiguration_0
   \                     ??UsbFindConfiguration_1:
   \   00000024   0020               MOVS     R0,#+0
   \                     ??UsbFindConfiguration_3:
   \   00000026   08BC               POP      {R3}
   \   00000028   02BC               POP      {R1}
   \   0000002A   0847               BX       R1               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbSetConfigurtonState(Int32U)
   \                     UsbSetConfigurtonState:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   87B0               SUB      SP,SP,#+28
   \   00000004   0400               MOVS     R4,R0
   \   00000006   002C               CMP      R4,#+0
   \   00000008   3CD0               BEQ      ??UsbSetConfigurtonState_0
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       UsbFindConfiguration
   \   00000010   0500               MOVS     R5,R0
   \   00000012   6846               MOV      R0,SP
   \   00000014   ....               LDR      R1,??DataTable30  ;; UsbDevCtrl
   \   00000016   1822               MOVS     R2,#+24
   \   00000018   ........           BL       __aeabi_memcpy4
   \   0000001C   002D               CMP      R5,#+0
   \   0000001E   01D1               BNE      ??UsbSetConfigurtonState_1
   \   00000020   0120               MOVS     R0,#+1
   \   00000022   38E0               B        ??UsbSetConfigurtonState_2
   \                     ??UsbSetConfigurtonState_1:
   \   00000024   0194               STR      R4,[SP, #+4]
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   0390               STR      R0,[SP, #+12]
   \   0000002A   0290               STR      R0,[SP, #+8]
   \   0000002C   6846               MOV      R0,SP
   \   0000002E   007D               LDRB     R0,[R0, #+20]
   \   00000030   FD21               MOVS     R1,#+253
   \   00000032   0140               ANDS     R1,R1,R0
   \   00000034   6846               MOV      R0,SP
   \   00000036   0175               STRB     R1,[R0, #+20]
   \   00000038   E879               LDRB     R0,[R5, #+7]
   \   0000003A   4021               MOVS     R1,#+64
   \   0000003C   0140               ANDS     R1,R1,R0
   \   0000003E   481E               SUBS     R0,R1,#+1
   \   00000040   8041               SBCS     R0,R0,R0
   \   00000042   C043               MVNS     R0,R0
   \   00000044   C00F               LSRS     R0,R0,#+31
   \   00000046   6946               MOV      R1,SP
   \   00000048   097D               LDRB     R1,[R1, #+20]
   \   0000004A   FE22               MOVS     R2,#+254
   \   0000004C   0A40               ANDS     R2,R2,R1
   \   0000004E   0121               MOVS     R1,#+1
   \   00000050   0140               ANDS     R1,R1,R0
   \   00000052   1143               ORRS     R1,R1,R2
   \   00000054   6846               MOV      R0,SP
   \   00000056   0175               STRB     R1,[R0, #+20]
   \   00000058   6946               MOV      R1,SP
   \   0000005A   2800               MOVS     R0,R5
   \   0000005C   ........           BL       UsbFindInterface
   \   00000060   0028               CMP      R0,#+0
   \   00000062   01D0               BEQ      ??UsbSetConfigurtonState_3
   \   00000064   0120               MOVS     R0,#+1
   \   00000066   16E0               B        ??UsbSetConfigurtonState_2
   \                     ??UsbSetConfigurtonState_3:
   \   00000068   6846               MOV      R0,SP
   \   0000006A   ....               LDR      R1,??DataTable31  ;; UsbUserFun + 152
   \   0000006C   0968               LDR      R1,[R1, #+0]
   \   0000006E   ........           BL       __iar_via_R1
   \   00000072   ....               LDR      R0,??DataTable30  ;; UsbDevCtrl
   \   00000074   6946               MOV      R1,SP
   \   00000076   1822               MOVS     R2,#+24
   \   00000078   ........           BL       __aeabi_memcpy4
   \   0000007C   0520               MOVS     R0,#+5
   \   0000007E   ........           BL       UsbSetDevState
   \   00000082   07E0               B        ??UsbSetConfigurtonState_4
   \                     ??UsbSetConfigurtonState_0:
   \   00000084   0020               MOVS     R0,#+0
   \   00000086   ....               LDR      R1,??DataTable31  ;; UsbUserFun + 152
   \   00000088   0968               LDR      R1,[R1, #+0]
   \   0000008A   ........           BL       __iar_via_R1
   \   0000008E   0420               MOVS     R0,#+4
   \   00000090   ........           BL       UsbSetDevState
   \                     ??UsbSetConfigurtonState_4:
   \   00000094   0020               MOVS     R0,#+0
   \                     ??UsbSetConfigurtonState_2:
   \   00000096   07B0               ADD      SP,SP,#+28
   \   00000098   30BC               POP      {R4,R5}
   \   0000009A   02BC               POP      {R1}
   \   0000009C   0847               BX       R1               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbDevStatus(Int8U *, Int16U)
   \                     UsbDevStatus:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000006   090C               LSRS     R1,R1,#+16
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   0CD1               BNE      ??UsbDevStatus_0
   \   0000000C   ....               LDR      R0,??DataTable35  ;; UsbEp0Ctrl
   \   0000000E   0260               STR      R2,[R0, #+0]
   \   00000010   ....               LDR      R0,??DataTable36  ;; UsbEp0Ctrl + 4
   \   00000012   0223               MOVS     R3,#+2
   \   00000014   0360               STR      R3,[R0, #+0]
   \   00000016   ....               LDR      R0,??DataTable34  ;; UsbDevCtrl + 20
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   1070               STRB     R0,[R2, #+0]
   \   0000001C   521C               ADDS     R2,R2,#+1
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   1070               STRB     R0,[R2, #+0]
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   00E0               B        ??UsbDevStatus_1
   \                     ??UsbDevStatus_0:
   \   00000026   0120               MOVS     R0,#+1
   \                     ??UsbDevStatus_1:
   \   00000028   08BC               POP      {R3}
   \   0000002A   02BC               POP      {R1}
   \   0000002C   0847               BX       R1               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbInterfaceStatus(Int8U *, Int16U)
   \                     UsbInterfaceStatus:
   \   00000000   0200               MOVS     R2,R0
   \   00000002   ....               LDR      R0,??DataTable35  ;; UsbEp0Ctrl
   \   00000004   0260               STR      R2,[R0, #+0]
   \   00000006   ....               LDR      R0,??DataTable36  ;; UsbEp0Ctrl + 4
   \   00000008   0223               MOVS     R3,#+2
   \   0000000A   0360               STR      R3,[R0, #+0]
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   1070               STRB     R0,[R2, #+0]
   \   00000010   521C               ADDS     R2,R2,#+1
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   1070               STRB     R0,[R2, #+0]
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbEpStatus(Int8U *, Int16U)
   \                     UsbEpStatus:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   2D04               LSLS     R5,R5,#+16       ;; ZeroExtS R5,R5,#+16,#+16
   \   00000008   2D0C               LSRS     R5,R5,#+16
   \   0000000A   6806               LSLS     R0,R5,#+25       ;; ZeroExtS R0,R5,#+25,#+25
   \   0000000C   400E               LSRS     R0,R0,#+25
   \   0000000E   1128               CMP      R0,#+17
   \   00000010   01DB               BLT      ??UsbEpStatus_0
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   12E0               B        ??UsbEpStatus_1
   \                     ??UsbEpStatus_0:
   \   00000016   0B48               LDR      R0,??UsbEpStatus_2  ;; UsbEp0Ctrl
   \   00000018   0460               STR      R4,[R0, #+0]
   \   0000001A   0B48               LDR      R0,??UsbEpStatus_2+0x4  ;; UsbEp0Ctrl + 4
   \   0000001C   0221               MOVS     R1,#+2
   \   0000001E   0160               STR      R1,[R0, #+0]
   \   00000020   2800               MOVS     R0,R5
   \   00000022   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000024   000E               LSRS     R0,R0,#+24
   \   00000026   ........           BL       USB_EpLogToPhysAdd
   \   0000002A   2100               MOVS     R1,R4
   \   0000002C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000002E   000E               LSRS     R0,R0,#+24
   \   00000030   ........           BL       USB_GetStallEP
   \   00000034   641C               ADDS     R4,R4,#+1
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   2070               STRB     R0,[R4, #+0]
   \   0000003A   0020               MOVS     R0,#+0
   \                     ??UsbEpStatus_1:
   \   0000003C   38BC               POP      {R3-R5}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??UsbEpStatus_2:
   \   00000044   ........           DC32     UsbEp0Ctrl
   \   00000048   ........           DC32     UsbEp0Ctrl + 4

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbGetStatus(void)
   \                     UsbGetStatus:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   2B48               LDR      R0,??UsbGetStatus_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   49D3               BCC      ??UsbGetStatus_1
   \   0000000E   2948               LDR      R0,??UsbGetStatus_0+0x4  ;; UsbEp0SetupPacket + 6
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0228               CMP      R0,#+2
   \   00000014   45D1               BNE      ??UsbGetStatus_1
   \   00000016   2848               LDR      R0,??UsbGetStatus_0+0x8  ;; UsbEp0SetupPacket
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   0006               LSLS     R0,R0,#+24
   \   0000001C   41D5               BPL      ??UsbGetStatus_1
   \   0000001E   2748               LDR      R0,??UsbGetStatus_0+0xC  ;; UsbEp0SetupPacket + 2
   \   00000020   0088               LDRH     R0,[R0, #+0]
   \   00000022   0028               CMP      R0,#+0
   \   00000024   3DD1               BNE      ??UsbGetStatus_1
   \   00000026   2448               LDR      R0,??UsbGetStatus_0+0x8  ;; UsbEp0SetupPacket
   \   00000028   0078               LDRB     R0,[R0, #+0]
   \   0000002A   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   0000002C   C00E               LSRS     R0,R0,#+27
   \   0000002E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000030   000E               LSRS     R0,R0,#+24
   \   00000032   0028               CMP      R0,#+0
   \   00000034   04D0               BEQ      ??UsbGetStatus_2
   \   00000036   401E               SUBS     R0,R0,#+1
   \   00000038   11D0               BEQ      ??UsbGetStatus_3
   \   0000003A   401E               SUBS     R0,R0,#+1
   \   0000003C   1ED0               BEQ      ??UsbGetStatus_4
   \   0000003E   2CE0               B        ??UsbGetStatus_5
   \                     ??UsbGetStatus_2:
   \   00000040   1F48               LDR      R0,??UsbGetStatus_0+0x10  ;; UsbEp0SetupPacket + 4
   \   00000042   0188               LDRH     R1,[R0, #+0]
   \   00000044   1F48               LDR      R0,??UsbGetStatus_0+0x14  ;; EpCtrlDataBuf
   \   00000046   ........           BL       UsbDevStatus
   \   0000004A   0028               CMP      R0,#+0
   \   0000004C   03D1               BNE      ??UsbGetStatus_6
   \   0000004E   1E48               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000050   0321               MOVS     R1,#+3
   \   00000052   0170               STRB     R1,[R0, #+0]
   \   00000054   28E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_6:
   \   00000056   1C48               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000058   0021               MOVS     R1,#+0
   \   0000005A   0170               STRB     R1,[R0, #+0]
   \   0000005C   24E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_3:
   \   0000005E   1848               LDR      R0,??UsbGetStatus_0+0x10  ;; UsbEp0SetupPacket + 4
   \   00000060   0188               LDRH     R1,[R0, #+0]
   \   00000062   1848               LDR      R0,??UsbGetStatus_0+0x14  ;; EpCtrlDataBuf
   \   00000064   ........           BL       UsbInterfaceStatus
   \   00000068   0028               CMP      R0,#+0
   \   0000006A   03D1               BNE      ??UsbGetStatus_8
   \   0000006C   1648               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000006E   0321               MOVS     R1,#+3
   \   00000070   0170               STRB     R1,[R0, #+0]
   \   00000072   19E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_8:
   \   00000074   1448               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000076   0021               MOVS     R1,#+0
   \   00000078   0170               STRB     R1,[R0, #+0]
   \   0000007A   15E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_4:
   \   0000007C   1048               LDR      R0,??UsbGetStatus_0+0x10  ;; UsbEp0SetupPacket + 4
   \   0000007E   0188               LDRH     R1,[R0, #+0]
   \   00000080   1048               LDR      R0,??UsbGetStatus_0+0x14  ;; EpCtrlDataBuf
   \   00000082   ........           BL       UsbEpStatus
   \   00000086   0028               CMP      R0,#+0
   \   00000088   03D1               BNE      ??UsbGetStatus_9
   \   0000008A   0F48               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000008C   0321               MOVS     R1,#+3
   \   0000008E   0170               STRB     R1,[R0, #+0]
   \   00000090   0AE0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_9:
   \   00000092   0D48               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000094   0021               MOVS     R1,#+0
   \   00000096   0170               STRB     R1,[R0, #+0]
   \   00000098   06E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_5:
   \   0000009A   0B48               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000009C   0021               MOVS     R1,#+0
   \   0000009E   0170               STRB     R1,[R0, #+0]
   \   000000A0   02E0               B        ??UsbGetStatus_7
   \                     ??UsbGetStatus_1:
   \   000000A2   0948               LDR      R0,??UsbGetStatus_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000A4   0021               MOVS     R1,#+0
   \   000000A6   0170               STRB     R1,[R0, #+0]
   \                     ??UsbGetStatus_7:
   \   000000A8   08BC               POP      {R3}
   \   000000AA   01BC               POP      {R0}
   \   000000AC   0047               BX       R0               ;; return
   \   000000AE   C046               Nop      
   \                     ??UsbGetStatus_0:
   \   000000B0   ........           DC32     UsbDevCtrl
   \   000000B4   ........           DC32     UsbEp0SetupPacket + 6
   \   000000B8   ........           DC32     UsbEp0SetupPacket
   \   000000BC   ........           DC32     UsbEp0SetupPacket + 2
   \   000000C0   ........           DC32     UsbEp0SetupPacket + 4
   \   000000C4   ........           DC32     EpCtrlDataBuf
   \   000000C8   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbClearDevFeature(Int16U, Int16U)
   \                     UsbClearDevFeature:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000006   090C               LSRS     R1,R1,#+16
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   03D1               BNE      ??UsbClearDevFeature_0
   \   0000000C   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   0000000E   120C               LSRS     R2,R2,#+16
   \   00000010   012A               CMP      R2,#+1
   \   00000012   01D0               BEQ      ??UsbClearDevFeature_1
   \                     ??UsbClearDevFeature_0:
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   06E0               B        ??UsbClearDevFeature_2
   \                     ??UsbClearDevFeature_1:
   \   00000018   0448               LDR      R0,??UsbClearDevFeature_3  ;; UsbDevCtrl + 20
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   FD23               MOVS     R3,#+253
   \   0000001E   0340               ANDS     R3,R3,R0
   \   00000020   0248               LDR      R0,??UsbClearDevFeature_3  ;; UsbDevCtrl + 20
   \   00000022   0370               STRB     R3,[R0, #+0]
   \   00000024   0020               MOVS     R0,#+0
   \                     ??UsbClearDevFeature_2:
   \   00000026   08BC               POP      {R3}
   \   00000028   02BC               POP      {R1}
   \   0000002A   0847               BX       R1               ;; return
   \                     ??UsbClearDevFeature_3:
   \   0000002C   ........           DC32     UsbDevCtrl + 20

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbClearInterfaceFeature(Int16U, Int16U)
   \                     UsbClearInterfaceFeature:
   \   00000000   0200               MOVS     R2,R0
   \   00000002   0120               MOVS     R0,#+1
   \   00000004   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbClearEpFeature(Int16U, Int16U)
   \                     UsbClearEpFeature:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   2D04               LSLS     R5,R5,#+16       ;; ZeroExtS R5,R5,#+16,#+16
   \   00000008   2D0C               LSRS     R5,R5,#+16
   \   0000000A   6806               LSLS     R0,R5,#+25       ;; ZeroExtS R0,R5,#+25,#+25
   \   0000000C   400E               LSRS     R0,R0,#+25
   \   0000000E   1128               CMP      R0,#+17
   \   00000010   03DA               BGE      ??UsbClearEpFeature_0
   \   00000012   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   00000014   240C               LSRS     R4,R4,#+16
   \   00000016   002C               CMP      R4,#+0
   \   00000018   01D0               BEQ      ??UsbClearEpFeature_1
   \                     ??UsbClearEpFeature_0:
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   17E0               B        ??UsbClearEpFeature_2
   \                     ??UsbClearEpFeature_1:
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   ........           BL       USB_EpLogToPhysAdd
   \   00000028   0600               MOVS     R6,R0
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   3000               MOVS     R0,R6
   \   0000002E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000030   000E               LSRS     R0,R0,#+24
   \   00000032   ........           BL       USB_SetStallEP
   \   00000036   0748               LDR      R0,??UsbClearEpFeature_3  ;; UsbUserFun + 172
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   06D0               BEQ      ??UsbClearEpFeature_4
   \   0000003E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000040   360E               LSRS     R6,R6,#+24
   \   00000042   3000               MOVS     R0,R6
   \   00000044   0349               LDR      R1,??UsbClearEpFeature_3  ;; UsbUserFun + 172
   \   00000046   0968               LDR      R1,[R1, #+0]
   \   00000048   ........           BL       __iar_via_R1
   \                     ??UsbClearEpFeature_4:
   \   0000004C   0020               MOVS     R0,#+0
   \                     ??UsbClearEpFeature_2:
   \   0000004E   70BC               POP      {R4-R6}
   \   00000050   02BC               POP      {R1}
   \   00000052   0847               BX       R1               ;; return
   \                     ??UsbClearEpFeature_3:
   \   00000054   ........           DC32     UsbUserFun + 172

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbClearFeature(void)
   \                     UsbClearFeature:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   3548               LDR      R0,??UsbClearFeature_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   5DD3               BCC      ??UsbClearFeature_1
   \   0000000E   3348               LDR      R0,??UsbClearFeature_0+0x4  ;; UsbEp0SetupPacket + 6
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   59D1               BNE      ??UsbClearFeature_1
   \   00000016   3248               LDR      R0,??UsbClearFeature_0+0x8  ;; UsbEp0SetupPacket
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   0000001C   C00E               LSRS     R0,R0,#+27
   \   0000001E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000020   000E               LSRS     R0,R0,#+24
   \   00000022   0028               CMP      R0,#+0
   \   00000024   04D0               BEQ      ??UsbClearFeature_2
   \   00000026   401E               SUBS     R0,R0,#+1
   \   00000028   15D0               BEQ      ??UsbClearFeature_3
   \   0000002A   401E               SUBS     R0,R0,#+1
   \   0000002C   2CD0               BEQ      ??UsbClearFeature_4
   \   0000002E   48E0               B        ??UsbClearFeature_5
   \                     ??UsbClearFeature_2:
   \   00000030   2C48               LDR      R0,??UsbClearFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000032   0188               LDRH     R1,[R0, #+0]
   \   00000034   2C48               LDR      R0,??UsbClearFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   ........           BL       UsbClearDevFeature
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   06D1               BNE      ??UsbClearFeature_6
   \   00000040   2A48               LDR      R0,??UsbClearFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   00000042   0021               MOVS     R1,#+0
   \   00000044   0160               STR      R1,[R0, #+0]
   \   00000046   2A48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000048   0321               MOVS     R1,#+3
   \   0000004A   0170               STRB     R1,[R0, #+0]
   \   0000004C   40E0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_6:
   \   0000004E   2848               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   0170               STRB     R1,[R0, #+0]
   \   00000054   3CE0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_3:
   \   00000056   2048               LDR      R0,??UsbClearFeature_0  ;; UsbDevCtrl
   \   00000058   0078               LDRB     R0,[R0, #+0]
   \   0000005A   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000005C   400F               LSRS     R0,R0,#+29
   \   0000005E   0528               CMP      R0,#+5
   \   00000060   0ED3               BCC      ??UsbClearFeature_8
   \   00000062   2048               LDR      R0,??UsbClearFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000064   0188               LDRH     R1,[R0, #+0]
   \   00000066   2048               LDR      R0,??UsbClearFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000068   0088               LDRH     R0,[R0, #+0]
   \   0000006A   ........           BL       UsbClearInterfaceFeature
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   06D1               BNE      ??UsbClearFeature_8
   \   00000072   1E48               LDR      R0,??UsbClearFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   0160               STR      R1,[R0, #+0]
   \   00000078   1D48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000007A   0321               MOVS     R1,#+3
   \   0000007C   0170               STRB     R1,[R0, #+0]
   \   0000007E   27E0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_8:
   \   00000080   1B48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000082   0021               MOVS     R1,#+0
   \   00000084   0170               STRB     R1,[R0, #+0]
   \   00000086   23E0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_4:
   \   00000088   1348               LDR      R0,??UsbClearFeature_0  ;; UsbDevCtrl
   \   0000008A   0078               LDRB     R0,[R0, #+0]
   \   0000008C   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000008E   400F               LSRS     R0,R0,#+29
   \   00000090   0528               CMP      R0,#+5
   \   00000092   03D2               BCS      ??UsbClearFeature_9
   \   00000094   1348               LDR      R0,??UsbClearFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000096   0088               LDRH     R0,[R0, #+0]
   \   00000098   4006               LSLS     R0,R0,#+25
   \   0000009A   0ED1               BNE      ??UsbClearFeature_10
   \                     ??UsbClearFeature_9:
   \   0000009C   1148               LDR      R0,??UsbClearFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   0000009E   0188               LDRH     R1,[R0, #+0]
   \   000000A0   1148               LDR      R0,??UsbClearFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   000000A2   0088               LDRH     R0,[R0, #+0]
   \   000000A4   ........           BL       UsbClearEpFeature
   \   000000A8   0028               CMP      R0,#+0
   \   000000AA   06D1               BNE      ??UsbClearFeature_10
   \   000000AC   0F48               LDR      R0,??UsbClearFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   000000AE   0021               MOVS     R1,#+0
   \   000000B0   0160               STR      R1,[R0, #+0]
   \   000000B2   0F48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000B4   0321               MOVS     R1,#+3
   \   000000B6   0170               STRB     R1,[R0, #+0]
   \   000000B8   0AE0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_10:
   \   000000BA   0D48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000BC   0021               MOVS     R1,#+0
   \   000000BE   0170               STRB     R1,[R0, #+0]
   \   000000C0   06E0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_5:
   \   000000C2   0B48               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   0170               STRB     R1,[R0, #+0]
   \   000000C8   02E0               B        ??UsbClearFeature_7
   \                     ??UsbClearFeature_1:
   \   000000CA   0948               LDR      R0,??UsbClearFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000CC   0021               MOVS     R1,#+0
   \   000000CE   0170               STRB     R1,[R0, #+0]
   \                     ??UsbClearFeature_7:
   \   000000D0   08BC               POP      {R3}
   \   000000D2   01BC               POP      {R0}
   \   000000D4   0047               BX       R0               ;; return
   \   000000D6   C046               Nop      
   \                     ??UsbClearFeature_0:
   \   000000D8   ........           DC32     UsbDevCtrl
   \   000000DC   ........           DC32     UsbEp0SetupPacket + 6
   \   000000E0   ........           DC32     UsbEp0SetupPacket
   \   000000E4   ........           DC32     UsbEp0SetupPacket + 4
   \   000000E8   ........           DC32     UsbEp0SetupPacket + 2
   \   000000EC   ........           DC32     UsbEp0Ctrl + 4
   \   000000F0   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbSetDevFeature(Int16U, Int16U)
   \                     UsbSetDevFeature:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000006   090C               LSRS     R1,R1,#+16
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   03D1               BNE      ??UsbSetDevFeature_0
   \   0000000C   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   0000000E   120C               LSRS     R2,R2,#+16
   \   00000010   012A               CMP      R2,#+1
   \   00000012   01D0               BEQ      ??UsbSetDevFeature_1
   \                     ??UsbSetDevFeature_0:
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   06E0               B        ??UsbSetDevFeature_2
   \                     ??UsbSetDevFeature_1:
   \   00000018   0448               LDR      R0,??UsbSetDevFeature_3  ;; UsbDevCtrl + 20
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0223               MOVS     R3,#+2
   \   0000001E   0343               ORRS     R3,R3,R0
   \   00000020   0248               LDR      R0,??UsbSetDevFeature_3  ;; UsbDevCtrl + 20
   \   00000022   0370               STRB     R3,[R0, #+0]
   \   00000024   0020               MOVS     R0,#+0
   \                     ??UsbSetDevFeature_2:
   \   00000026   08BC               POP      {R3}
   \   00000028   02BC               POP      {R1}
   \   0000002A   0847               BX       R1               ;; return
   \                     ??UsbSetDevFeature_3:
   \   0000002C   ........           DC32     UsbDevCtrl + 20

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbSetInterfaceFeature(Int16U, Int16U)
   \                     UsbSetInterfaceFeature:
   \   00000000   0200               MOVS     R2,R0
   \   00000002   0120               MOVS     R0,#+1
   \   00000004   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbSetEpFeature(Int16U, Int16U)
   \                     UsbSetEpFeature:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   2D04               LSLS     R5,R5,#+16       ;; ZeroExtS R5,R5,#+16,#+16
   \   00000008   2D0C               LSRS     R5,R5,#+16
   \   0000000A   6806               LSLS     R0,R5,#+25       ;; ZeroExtS R0,R5,#+25,#+25
   \   0000000C   400E               LSRS     R0,R0,#+25
   \   0000000E   1128               CMP      R0,#+17
   \   00000010   03DA               BGE      ??UsbSetEpFeature_0
   \   00000012   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   00000014   240C               LSRS     R4,R4,#+16
   \   00000016   002C               CMP      R4,#+0
   \   00000018   01D0               BEQ      ??UsbSetEpFeature_1
   \                     ??UsbSetEpFeature_0:
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   17E0               B        ??UsbSetEpFeature_2
   \                     ??UsbSetEpFeature_1:
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   ........           BL       USB_EpLogToPhysAdd
   \   00000028   0600               MOVS     R6,R0
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   3000               MOVS     R0,R6
   \   0000002E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000030   000E               LSRS     R0,R0,#+24
   \   00000032   ........           BL       USB_SetStallEP
   \   00000036   0748               LDR      R0,??UsbSetEpFeature_3  ;; UsbUserFun + 168
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   06D0               BEQ      ??UsbSetEpFeature_4
   \   0000003E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000040   360E               LSRS     R6,R6,#+24
   \   00000042   3000               MOVS     R0,R6
   \   00000044   0349               LDR      R1,??UsbSetEpFeature_3  ;; UsbUserFun + 168
   \   00000046   0968               LDR      R1,[R1, #+0]
   \   00000048   ........           BL       __iar_via_R1
   \                     ??UsbSetEpFeature_4:
   \   0000004C   0020               MOVS     R0,#+0
   \                     ??UsbSetEpFeature_2:
   \   0000004E   70BC               POP      {R4-R6}
   \   00000050   02BC               POP      {R1}
   \   00000052   0847               BX       R1               ;; return
   \                     ??UsbSetEpFeature_3:
   \   00000054   ........           DC32     UsbUserFun + 168

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetFeature(void)
   \                     UsbSetFeature:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   3548               LDR      R0,??UsbSetFeature_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   5DD3               BCC      ??UsbSetFeature_1
   \   0000000E   3348               LDR      R0,??UsbSetFeature_0+0x4  ;; UsbEp0SetupPacket + 6
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   59D1               BNE      ??UsbSetFeature_1
   \   00000016   3248               LDR      R0,??UsbSetFeature_0+0x8  ;; UsbEp0SetupPacket
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   0000001C   C00E               LSRS     R0,R0,#+27
   \   0000001E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000020   000E               LSRS     R0,R0,#+24
   \   00000022   0028               CMP      R0,#+0
   \   00000024   04D0               BEQ      ??UsbSetFeature_2
   \   00000026   401E               SUBS     R0,R0,#+1
   \   00000028   15D0               BEQ      ??UsbSetFeature_3
   \   0000002A   401E               SUBS     R0,R0,#+1
   \   0000002C   2CD0               BEQ      ??UsbSetFeature_4
   \   0000002E   48E0               B        ??UsbSetFeature_5
   \                     ??UsbSetFeature_2:
   \   00000030   2C48               LDR      R0,??UsbSetFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000032   0188               LDRH     R1,[R0, #+0]
   \   00000034   2C48               LDR      R0,??UsbSetFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   ........           BL       UsbSetDevFeature
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   06D1               BNE      ??UsbSetFeature_6
   \   00000040   2A48               LDR      R0,??UsbSetFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   00000042   0021               MOVS     R1,#+0
   \   00000044   0160               STR      R1,[R0, #+0]
   \   00000046   2A48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000048   0321               MOVS     R1,#+3
   \   0000004A   0170               STRB     R1,[R0, #+0]
   \   0000004C   40E0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_6:
   \   0000004E   2848               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   0170               STRB     R1,[R0, #+0]
   \   00000054   3CE0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_3:
   \   00000056   2048               LDR      R0,??UsbSetFeature_0  ;; UsbDevCtrl
   \   00000058   0078               LDRB     R0,[R0, #+0]
   \   0000005A   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000005C   400F               LSRS     R0,R0,#+29
   \   0000005E   0528               CMP      R0,#+5
   \   00000060   0ED3               BCC      ??UsbSetFeature_8
   \   00000062   2048               LDR      R0,??UsbSetFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000064   0188               LDRH     R1,[R0, #+0]
   \   00000066   2048               LDR      R0,??UsbSetFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000068   0088               LDRH     R0,[R0, #+0]
   \   0000006A   ........           BL       UsbSetInterfaceFeature
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   06D1               BNE      ??UsbSetFeature_8
   \   00000072   1E48               LDR      R0,??UsbSetFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   0160               STR      R1,[R0, #+0]
   \   00000078   1D48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000007A   0321               MOVS     R1,#+3
   \   0000007C   0170               STRB     R1,[R0, #+0]
   \   0000007E   27E0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_8:
   \   00000080   1B48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000082   0021               MOVS     R1,#+0
   \   00000084   0170               STRB     R1,[R0, #+0]
   \   00000086   23E0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_4:
   \   00000088   1348               LDR      R0,??UsbSetFeature_0  ;; UsbDevCtrl
   \   0000008A   0078               LDRB     R0,[R0, #+0]
   \   0000008C   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000008E   400F               LSRS     R0,R0,#+29
   \   00000090   0528               CMP      R0,#+5
   \   00000092   03D2               BCS      ??UsbSetFeature_9
   \   00000094   1348               LDR      R0,??UsbSetFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   00000096   0078               LDRB     R0,[R0, #+0]
   \   00000098   4006               LSLS     R0,R0,#+25
   \   0000009A   0ED1               BNE      ??UsbSetFeature_10
   \                     ??UsbSetFeature_9:
   \   0000009C   1148               LDR      R0,??UsbSetFeature_0+0xC  ;; UsbEp0SetupPacket + 4
   \   0000009E   0188               LDRH     R1,[R0, #+0]
   \   000000A0   1148               LDR      R0,??UsbSetFeature_0+0x10  ;; UsbEp0SetupPacket + 2
   \   000000A2   0088               LDRH     R0,[R0, #+0]
   \   000000A4   ........           BL       UsbSetEpFeature
   \   000000A8   0028               CMP      R0,#+0
   \   000000AA   06D1               BNE      ??UsbSetFeature_10
   \   000000AC   0F48               LDR      R0,??UsbSetFeature_0+0x14  ;; UsbEp0Ctrl + 4
   \   000000AE   0021               MOVS     R1,#+0
   \   000000B0   0160               STR      R1,[R0, #+0]
   \   000000B2   0F48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000B4   0321               MOVS     R1,#+3
   \   000000B6   0170               STRB     R1,[R0, #+0]
   \   000000B8   0AE0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_10:
   \   000000BA   0D48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000BC   0021               MOVS     R1,#+0
   \   000000BE   0170               STRB     R1,[R0, #+0]
   \   000000C0   06E0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_5:
   \   000000C2   0B48               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   0170               STRB     R1,[R0, #+0]
   \   000000C8   02E0               B        ??UsbSetFeature_7
   \                     ??UsbSetFeature_1:
   \   000000CA   0948               LDR      R0,??UsbSetFeature_0+0x18  ;; UsbEp0Ctrl + 8
   \   000000CC   0021               MOVS     R1,#+0
   \   000000CE   0170               STRB     R1,[R0, #+0]
   \                     ??UsbSetFeature_7:
   \   000000D0   08BC               POP      {R3}
   \   000000D2   01BC               POP      {R0}
   \   000000D4   0047               BX       R0               ;; return
   \   000000D6   C046               Nop      
   \                     ??UsbSetFeature_0:
   \   000000D8   ........           DC32     UsbDevCtrl
   \   000000DC   ........           DC32     UsbEp0SetupPacket + 6
   \   000000E0   ........           DC32     UsbEp0SetupPacket
   \   000000E4   ........           DC32     UsbEp0SetupPacket + 4
   \   000000E8   ........           DC32     UsbEp0SetupPacket + 2
   \   000000EC   ........           DC32     UsbEp0Ctrl + 4
   \   000000F0   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetAddress(void)
   \                     UsbSetAddress:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   1148               LDR      R0,??UsbSetAddress_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0328               CMP      R0,#+3
   \   0000000C   16D3               BCC      ??UsbSetAddress_1
   \   0000000E   0F48               LDR      R0,??UsbSetAddress_0+0x4  ;; UsbEp0SetupPacket
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   C006               LSLS     R0,R0,#+27
   \   00000014   12D1               BNE      ??UsbSetAddress_1
   \   00000016   0E48               LDR      R0,??UsbSetAddress_0+0x8  ;; UsbEp0SetupPacket + 4
   \   00000018   0088               LDRH     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   0ED1               BNE      ??UsbSetAddress_1
   \   0000001E   0D48               LDR      R0,??UsbSetAddress_0+0xC  ;; UsbEp0SetupPacket + 6
   \   00000020   0088               LDRH     R0,[R0, #+0]
   \   00000022   0028               CMP      R0,#+0
   \   00000024   0AD1               BNE      ??UsbSetAddress_1
   \   00000026   0C48               LDR      R0,??UsbSetAddress_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000028   0088               LDRH     R0,[R0, #+0]
   \   0000002A   8028               CMP      R0,#+128
   \   0000002C   06D2               BCS      ??UsbSetAddress_1
   \   0000002E   0B48               LDR      R0,??UsbSetAddress_0+0x14  ;; UsbEp0Ctrl + 4
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   0160               STR      R1,[R0, #+0]
   \   00000034   0A48               LDR      R0,??UsbSetAddress_0+0x18  ;; UsbEp0Ctrl + 8
   \   00000036   0321               MOVS     R1,#+3
   \   00000038   0170               STRB     R1,[R0, #+0]
   \   0000003A   02E0               B        ??UsbSetAddress_2
   \                     ??UsbSetAddress_1:
   \   0000003C   0848               LDR      R0,??UsbSetAddress_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   0170               STRB     R1,[R0, #+0]
   \                     ??UsbSetAddress_2:
   \   00000042   08BC               POP      {R3}
   \   00000044   01BC               POP      {R0}
   \   00000046   0047               BX       R0               ;; return
   \                     ??UsbSetAddress_0:
   \   00000048   ........           DC32     UsbDevCtrl
   \   0000004C   ........           DC32     UsbEp0SetupPacket
   \   00000050   ........           DC32     UsbEp0SetupPacket + 4
   \   00000054   ........           DC32     UsbEp0SetupPacket + 6
   \   00000058   ........           DC32     UsbEp0SetupPacket + 2
   \   0000005C   ........           DC32     UsbEp0Ctrl + 4
   \   00000060   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbGetDescriptorDevice(Int8U)
   \                     UsbGetDescriptorDevice:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   1BD1               BNE      ??UsbGetDescriptorDevice_0
   \   0000000C   0F48               LDR      R0,??UsbGetDescriptorDevice_1  ;; UsbEp0Ctrl + 4
   \   0000000E   104A               LDR      R2,??UsbGetDescriptorDevice_1+0x4  ;; UsbStandardDeviceDescriptorStr
   \   00000010   1278               LDRB     R2,[R2, #+0]
   \   00000012   0260               STR      R2,[R0, #+0]
   \   00000014   0F48               LDR      R0,??UsbGetDescriptorDevice_1+0x8  ;; UsbEp0Ctrl + 9
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0270               STRB     R2,[R0, #+0]
   \   0000001A   0C48               LDR      R0,??UsbGetDescriptorDevice_1  ;; UsbEp0Ctrl + 4
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   0E4A               LDR      R2,??UsbGetDescriptorDevice_1+0xC  ;; UsbEp0SetupPacket + 6
   \   00000020   1288               LDRH     R2,[R2, #+0]
   \   00000022   9042               CMP      R0,R2
   \   00000024   06D3               BCC      ??UsbGetDescriptorDevice_2
   \   00000026   0948               LDR      R0,??UsbGetDescriptorDevice_1  ;; UsbEp0Ctrl + 4
   \   00000028   0B4A               LDR      R2,??UsbGetDescriptorDevice_1+0xC  ;; UsbEp0SetupPacket + 6
   \   0000002A   1288               LDRH     R2,[R2, #+0]
   \   0000002C   0260               STR      R2,[R0, #+0]
   \   0000002E   0948               LDR      R0,??UsbGetDescriptorDevice_1+0x8  ;; UsbEp0Ctrl + 9
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   0270               STRB     R2,[R0, #+0]
   \                     ??UsbGetDescriptorDevice_2:
   \   00000034   0948               LDR      R0,??UsbGetDescriptorDevice_1+0x10  ;; UsbEp0Ctrl
   \   00000036   064A               LDR      R2,??UsbGetDescriptorDevice_1+0x4  ;; UsbStandardDeviceDescriptorStr
   \   00000038   0260               STR      R2,[R0, #+0]
   \   0000003A   0948               LDR      R0,??UsbGetDescriptorDevice_1+0x14  ;; UsbEp0Ctrl + 8
   \   0000003C   0322               MOVS     R2,#+3
   \   0000003E   0270               STRB     R2,[R0, #+0]
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   00E0               B        ??UsbGetDescriptorDevice_3
   \                     ??UsbGetDescriptorDevice_0:
   \   00000044   0120               MOVS     R0,#+1
   \                     ??UsbGetDescriptorDevice_3:
   \   00000046   08BC               POP      {R3}
   \   00000048   02BC               POP      {R1}
   \   0000004A   0847               BX       R1               ;; return
   \                     ??UsbGetDescriptorDevice_1:
   \   0000004C   ........           DC32     UsbEp0Ctrl + 4
   \   00000050   ........           DC32     UsbStandardDeviceDescriptorStr
   \   00000054   ........           DC32     UsbEp0Ctrl + 9
   \   00000058   ........           DC32     UsbEp0SetupPacket + 6
   \   0000005C   ........           DC32     UsbEp0Ctrl
   \   00000060   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbGetDescriptorConfiguration(Int8U)
   \                     UsbGetDescriptorConfiguration:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1C48               LDR      R0,??UsbGetDescriptorConfiguration_0  ;; UsbStandardConfigurationDescriptor
   \   00000006   0200               MOVS     R2,R0
   \                     ??UsbGetDescriptorConfiguration_1:
   \   00000008   1078               LDRB     R0,[R2, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   0ED0               BEQ      ??UsbGetDescriptorConfiguration_2
   \   0000000E   5078               LDRB     R0,[R2, #+1]
   \   00000010   0228               CMP      R0,#+2
   \   00000012   08D1               BNE      ??UsbGetDescriptorConfiguration_3
   \   00000014   1948               LDR      R0,??UsbGetDescriptorConfiguration_0+0x4  ;; UsbStandardDeviceDescriptorStr + 17
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0128               CMP      R0,#+1
   \   0000001A   07D0               BEQ      ??UsbGetDescriptorConfiguration_2
   \   0000001C   5079               LDRB     R0,[R2, #+5]
   \   0000001E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000020   090E               LSRS     R1,R1,#+24
   \   00000022   8842               CMP      R0,R1
   \   00000024   02D0               BEQ      ??UsbGetDescriptorConfiguration_2
   \                     ??UsbGetDescriptorConfiguration_3:
   \   00000026   1078               LDRB     R0,[R2, #+0]
   \   00000028   1218               ADDS     R2,R2,R0
   \   0000002A   EDE7               B        ??UsbGetDescriptorConfiguration_1
   \                     ??UsbGetDescriptorConfiguration_2:
   \   0000002C   1078               LDRB     R0,[R2, #+0]
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   01D1               BNE      ??UsbGetDescriptorConfiguration_4
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   1CE0               B        ??UsbGetDescriptorConfiguration_5
   \                     ??UsbGetDescriptorConfiguration_4:
   \   00000036   9378               LDRB     R3,[R2, #+2]
   \   00000038   D078               LDRB     R0,[R2, #+3]
   \   0000003A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+16
   \   0000003C   000C               LSRS     R0,R0,#+16
   \   0000003E   0343               ORRS     R3,R3,R0
   \   00000040   0F48               LDR      R0,??UsbGetDescriptorConfiguration_0+0x8  ;; UsbEp0Ctrl + 4
   \   00000042   0360               STR      R3,[R0, #+0]
   \   00000044   0F48               LDR      R0,??UsbGetDescriptorConfiguration_0+0xC  ;; UsbEp0Ctrl + 9
   \   00000046   0023               MOVS     R3,#+0
   \   00000048   0370               STRB     R3,[R0, #+0]
   \   0000004A   0F48               LDR      R0,??UsbGetDescriptorConfiguration_0+0x10  ;; UsbEp0SetupPacket + 6
   \   0000004C   0088               LDRH     R0,[R0, #+0]
   \   0000004E   0C4B               LDR      R3,??UsbGetDescriptorConfiguration_0+0x8  ;; UsbEp0Ctrl + 4
   \   00000050   1B68               LDR      R3,[R3, #+0]
   \   00000052   9842               CMP      R0,R3
   \   00000054   06D2               BCS      ??UsbGetDescriptorConfiguration_6
   \   00000056   0A48               LDR      R0,??UsbGetDescriptorConfiguration_0+0x8  ;; UsbEp0Ctrl + 4
   \   00000058   0B4B               LDR      R3,??UsbGetDescriptorConfiguration_0+0x10  ;; UsbEp0SetupPacket + 6
   \   0000005A   1B88               LDRH     R3,[R3, #+0]
   \   0000005C   0360               STR      R3,[R0, #+0]
   \   0000005E   0948               LDR      R0,??UsbGetDescriptorConfiguration_0+0xC  ;; UsbEp0Ctrl + 9
   \   00000060   0123               MOVS     R3,#+1
   \   00000062   0370               STRB     R3,[R0, #+0]
   \                     ??UsbGetDescriptorConfiguration_6:
   \   00000064   0948               LDR      R0,??UsbGetDescriptorConfiguration_0+0x14  ;; UsbEp0Ctrl
   \   00000066   0260               STR      R2,[R0, #+0]
   \   00000068   0948               LDR      R0,??UsbGetDescriptorConfiguration_0+0x18  ;; UsbEp0Ctrl + 8
   \   0000006A   0323               MOVS     R3,#+3
   \   0000006C   0370               STRB     R3,[R0, #+0]
   \   0000006E   0020               MOVS     R0,#+0
   \                     ??UsbGetDescriptorConfiguration_5:
   \   00000070   08BC               POP      {R3}
   \   00000072   02BC               POP      {R1}
   \   00000074   0847               BX       R1               ;; return
   \   00000076   C046               Nop      
   \                     ??UsbGetDescriptorConfiguration_0:
   \   00000078   ........           DC32     UsbStandardConfigurationDescriptor
   \   0000007C   ........           DC32     UsbStandardDeviceDescriptorStr + 17
   \   00000080   ........           DC32     UsbEp0Ctrl + 4
   \   00000084   ........           DC32     UsbEp0Ctrl + 9
   \   00000088   ........           DC32     UsbEp0SetupPacket + 6
   \   0000008C   ........           DC32     UsbEp0Ctrl
   \   00000090   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork UsbCommStatus_t UsbGetDescriptorString(Int8U)
   \                     UsbGetDescriptorString:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   1BD1               BNE      ??UsbGetDescriptorString_0
   \   0000000C   3548               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   0000000E   364C               LDR      R4,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   00000010   2478               LDRB     R4,[R4, #+0]
   \   00000012   0460               STR      R4,[R0, #+0]
   \   00000014   3548               LDR      R0,??UsbGetDescriptorString_1+0x8  ;; UsbEp0Ctrl + 9
   \   00000016   0024               MOVS     R4,#+0
   \   00000018   0470               STRB     R4,[R0, #+0]
   \   0000001A   3248               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   344C               LDR      R4,??UsbGetDescriptorString_1+0xC  ;; UsbEp0SetupPacket + 6
   \   00000020   2488               LDRH     R4,[R4, #+0]
   \   00000022   A042               CMP      R0,R4
   \   00000024   06D3               BCC      ??UsbGetDescriptorString_2
   \   00000026   2F48               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   00000028   314C               LDR      R4,??UsbGetDescriptorString_1+0xC  ;; UsbEp0SetupPacket + 6
   \   0000002A   2488               LDRH     R4,[R4, #+0]
   \   0000002C   0460               STR      R4,[R0, #+0]
   \   0000002E   2F48               LDR      R0,??UsbGetDescriptorString_1+0x8  ;; UsbEp0Ctrl + 9
   \   00000030   0124               MOVS     R4,#+1
   \   00000032   0470               STRB     R4,[R0, #+0]
   \                     ??UsbGetDescriptorString_2:
   \   00000034   2F48               LDR      R0,??UsbGetDescriptorString_1+0x10  ;; UsbEp0Ctrl
   \   00000036   2C4C               LDR      R4,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   00000038   0460               STR      R4,[R0, #+0]
   \   0000003A   2F48               LDR      R0,??UsbGetDescriptorString_1+0x14  ;; UsbEp0Ctrl + 8
   \   0000003C   0324               MOVS     R4,#+3
   \   0000003E   0470               STRB     R4,[R0, #+0]
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   4BE0               B        ??UsbGetDescriptorString_3
   \                     ??UsbGetDescriptorString_0:
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   0400               MOVS     R4,R0
   \   00000048   0220               MOVS     R0,#+2
   \   0000004A   0300               MOVS     R3,R0
   \                     ??UsbGetDescriptorString_4:
   \   0000004C   2648               LDR      R0,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   8342               CMP      R3,R0
   \   00000052   0FD2               BCS      ??UsbGetDescriptorString_5
   \   00000054   2448               LDR      R0,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   00000056   C05C               LDRB     R0,[R0, R3]
   \   00000058   284D               LDR      R5,??UsbGetDescriptorString_1+0x18  ;; UsbEp0SetupPacket + 4
   \   0000005A   2D78               LDRB     R5,[R5, #+0]
   \   0000005C   A842               CMP      R0,R5
   \   0000005E   06D1               BNE      ??UsbGetDescriptorString_6
   \   00000060   2148               LDR      R0,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   00000062   C018               ADDS     R0,R0,R3
   \   00000064   4078               LDRB     R0,[R0, #+1]
   \   00000066   264D               LDR      R5,??UsbGetDescriptorString_1+0x1C  ;; UsbEp0SetupPacket + 5
   \   00000068   2D78               LDRB     R5,[R5, #+0]
   \   0000006A   A842               CMP      R0,R5
   \   0000006C   02D0               BEQ      ??UsbGetDescriptorString_5
   \                     ??UsbGetDescriptorString_6:
   \   0000006E   641C               ADDS     R4,R4,#+1
   \   00000070   9B1C               ADDS     R3,R3,#+2
   \   00000072   EBE7               B        ??UsbGetDescriptorString_4
   \                     ??UsbGetDescriptorString_5:
   \   00000074   1C48               LDR      R0,??UsbGetDescriptorString_1+0x4  ;; UsbLanguagesStr
   \   00000076   0078               LDRB     R0,[R0, #+0]
   \   00000078   8342               CMP      R3,R0
   \   0000007A   01D3               BCC      ??UsbGetDescriptorString_7
   \   0000007C   0120               MOVS     R0,#+1
   \   0000007E   2DE0               B        ??UsbGetDescriptorString_3
   \                     ??UsbGetDescriptorString_7:
   \   00000080   0420               MOVS     R0,#+4
   \   00000082   6043               MULS     R0,R4,R0
   \   00000084   1F4D               LDR      R5,??UsbGetDescriptorString_1+0x20  ;; UsbString
   \   00000086   2858               LDR      R0,[R5, R0]
   \   00000088   0200               MOVS     R2,R0
   \                     ??UsbGetDescriptorString_8:
   \   0000008A   002A               CMP      R2,#+0
   \   0000008C   07D0               BEQ      ??UsbGetDescriptorString_9
   \   0000008E   491E               SUBS     R1,R1,#+1
   \   00000090   0800               MOVS     R0,R1
   \   00000092   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000094   000E               LSRS     R0,R0,#+24
   \   00000096   0028               CMP      R0,#+0
   \   00000098   01D0               BEQ      ??UsbGetDescriptorString_9
   \   0000009A   121D               ADDS     R2,R2,#+4
   \   0000009C   F5E7               B        ??UsbGetDescriptorString_8
   \                     ??UsbGetDescriptorString_9:
   \   0000009E   002A               CMP      R2,#+0
   \   000000A0   01D1               BNE      ??UsbGetDescriptorString_10
   \   000000A2   0120               MOVS     R0,#+1
   \   000000A4   1AE0               B        ??UsbGetDescriptorString_3
   \                     ??UsbGetDescriptorString_10:
   \   000000A6   0F48               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   000000A8   1568               LDR      R5,[R2, #+0]
   \   000000AA   2D78               LDRB     R5,[R5, #+0]
   \   000000AC   0560               STR      R5,[R0, #+0]
   \   000000AE   0F48               LDR      R0,??UsbGetDescriptorString_1+0x8  ;; UsbEp0Ctrl + 9
   \   000000B0   0025               MOVS     R5,#+0
   \   000000B2   0570               STRB     R5,[R0, #+0]
   \   000000B4   0B48               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   000000B6   0068               LDR      R0,[R0, #+0]
   \   000000B8   0D4D               LDR      R5,??UsbGetDescriptorString_1+0xC  ;; UsbEp0SetupPacket + 6
   \   000000BA   2D88               LDRH     R5,[R5, #+0]
   \   000000BC   A842               CMP      R0,R5
   \   000000BE   06D3               BCC      ??UsbGetDescriptorString_11
   \   000000C0   0848               LDR      R0,??UsbGetDescriptorString_1  ;; UsbEp0Ctrl + 4
   \   000000C2   0B4D               LDR      R5,??UsbGetDescriptorString_1+0xC  ;; UsbEp0SetupPacket + 6
   \   000000C4   2D88               LDRH     R5,[R5, #+0]
   \   000000C6   0560               STR      R5,[R0, #+0]
   \   000000C8   0848               LDR      R0,??UsbGetDescriptorString_1+0x8  ;; UsbEp0Ctrl + 9
   \   000000CA   0125               MOVS     R5,#+1
   \   000000CC   0570               STRB     R5,[R0, #+0]
   \                     ??UsbGetDescriptorString_11:
   \   000000CE   0948               LDR      R0,??UsbGetDescriptorString_1+0x10  ;; UsbEp0Ctrl
   \   000000D0   1568               LDR      R5,[R2, #+0]
   \   000000D2   0560               STR      R5,[R0, #+0]
   \   000000D4   0848               LDR      R0,??UsbGetDescriptorString_1+0x14  ;; UsbEp0Ctrl + 8
   \   000000D6   0325               MOVS     R5,#+3
   \   000000D8   0570               STRB     R5,[R0, #+0]
   \   000000DA   0020               MOVS     R0,#+0
   \                     ??UsbGetDescriptorString_3:
   \   000000DC   38BC               POP      {R3-R5}
   \   000000DE   02BC               POP      {R1}
   \   000000E0   0847               BX       R1               ;; return
   \   000000E2   C046               Nop      
   \                     ??UsbGetDescriptorString_1:
   \   000000E4   ........           DC32     UsbEp0Ctrl + 4
   \   000000E8   ........           DC32     UsbLanguagesStr
   \   000000EC   ........           DC32     UsbEp0Ctrl + 9
   \   000000F0   ........           DC32     UsbEp0SetupPacket + 6
   \   000000F4   ........           DC32     UsbEp0Ctrl
   \   000000F8   ........           DC32     UsbEp0Ctrl + 8
   \   000000FC   ........           DC32     UsbEp0SetupPacket + 4
   \   00000100   ........           DC32     UsbEp0SetupPacket + 5
   \   00000104   ........           DC32     UsbString

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbGetDescriptor(void)
   \                     UsbGetDescriptor:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   2148               LDR      R0,??UsbGetDescriptor_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0328               CMP      R0,#+3
   \   0000000C   35D3               BCC      ??UsbGetDescriptor_1
   \   0000000E   1F48               LDR      R0,??UsbGetDescriptor_0+0x4  ;; UsbEp0SetupPacket + 3
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   401E               SUBS     R0,R0,#+1
   \   00000014   04D0               BEQ      ??UsbGetDescriptor_2
   \   00000016   401E               SUBS     R0,R0,#+1
   \   00000018   0CD0               BEQ      ??UsbGetDescriptor_3
   \   0000001A   401E               SUBS     R0,R0,#+1
   \   0000001C   14D0               BEQ      ??UsbGetDescriptor_4
   \   0000001E   1DE0               B        ??UsbGetDescriptor_5
   \                     ??UsbGetDescriptor_2:
   \   00000020   1B48               LDR      R0,??UsbGetDescriptor_0+0x8  ;; UsbEp0SetupPacket + 2
   \   00000022   0078               LDRB     R0,[R0, #+0]
   \   00000024   ........           BL       UsbGetDescriptorDevice
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   29D0               BEQ      ??UsbGetDescriptor_6
   \   0000002C   1948               LDR      R0,??UsbGetDescriptor_0+0xC  ;; UsbEp0Ctrl + 8
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   0170               STRB     R1,[R0, #+0]
   \   00000032   25E0               B        ??UsbGetDescriptor_6
   \                     ??UsbGetDescriptor_3:
   \   00000034   1648               LDR      R0,??UsbGetDescriptor_0+0x8  ;; UsbEp0SetupPacket + 2
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   ........           BL       UsbGetDescriptorConfiguration
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   1FD0               BEQ      ??UsbGetDescriptor_6
   \   00000040   1448               LDR      R0,??UsbGetDescriptor_0+0xC  ;; UsbEp0Ctrl + 8
   \   00000042   0021               MOVS     R1,#+0
   \   00000044   0170               STRB     R1,[R0, #+0]
   \   00000046   1BE0               B        ??UsbGetDescriptor_6
   \                     ??UsbGetDescriptor_4:
   \   00000048   1148               LDR      R0,??UsbGetDescriptor_0+0x8  ;; UsbEp0SetupPacket + 2
   \   0000004A   0078               LDRB     R0,[R0, #+0]
   \   0000004C   ........           BL       UsbGetDescriptorString
   \   00000050   0028               CMP      R0,#+0
   \   00000052   15D0               BEQ      ??UsbGetDescriptor_6
   \   00000054   0F48               LDR      R0,??UsbGetDescriptor_0+0xC  ;; UsbEp0Ctrl + 8
   \   00000056   0021               MOVS     R1,#+0
   \   00000058   0170               STRB     R1,[R0, #+0]
   \   0000005A   11E0               B        ??UsbGetDescriptor_6
   \                     ??UsbGetDescriptor_5:
   \   0000005C   0E48               LDR      R0,??UsbGetDescriptor_0+0x10  ;; UsbUserFun + 148
   \   0000005E   0068               LDR      R0,[R0, #+0]
   \   00000060   0028               CMP      R0,#+0
   \   00000062   06D0               BEQ      ??UsbGetDescriptor_7
   \   00000064   0D48               LDR      R0,??UsbGetDescriptor_0+0x14  ;; UsbEp0Ctrl
   \   00000066   0C49               LDR      R1,??UsbGetDescriptor_0+0x10  ;; UsbUserFun + 148
   \   00000068   0968               LDR      R1,[R1, #+0]
   \   0000006A   ........           BL       __iar_via_R1
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   06D0               BEQ      ??UsbGetDescriptor_6
   \                     ??UsbGetDescriptor_7:
   \   00000072   0848               LDR      R0,??UsbGetDescriptor_0+0xC  ;; UsbEp0Ctrl + 8
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   0170               STRB     R1,[R0, #+0]
   \   00000078   02E0               B        ??UsbGetDescriptor_6
   \                     ??UsbGetDescriptor_1:
   \   0000007A   0648               LDR      R0,??UsbGetDescriptor_0+0xC  ;; UsbEp0Ctrl + 8
   \   0000007C   0021               MOVS     R1,#+0
   \   0000007E   0170               STRB     R1,[R0, #+0]
   \                     ??UsbGetDescriptor_6:
   \   00000080   08BC               POP      {R3}
   \   00000082   01BC               POP      {R0}
   \   00000084   0047               BX       R0               ;; return
   \   00000086   C046               Nop      
   \                     ??UsbGetDescriptor_0:
   \   00000088   ........           DC32     UsbDevCtrl
   \   0000008C   ........           DC32     UsbEp0SetupPacket + 3
   \   00000090   ........           DC32     UsbEp0SetupPacket + 2
   \   00000094   ........           DC32     UsbEp0Ctrl + 8
   \   00000098   ........           DC32     UsbUserFun + 148
   \   0000009C   ........           DC32     UsbEp0Ctrl

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetDescriptor(void)
   \                     UsbSetDescriptor:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0848               LDR      R0,??UsbSetDescriptor_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   03D3               BCC      ??UsbSetDescriptor_1
   \   0000000E   0648               LDR      R0,??UsbSetDescriptor_0+0x4  ;; UsbEp0Ctrl + 8
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0170               STRB     R1,[R0, #+0]
   \   00000014   02E0               B        ??UsbSetDescriptor_2
   \                     ??UsbSetDescriptor_1:
   \   00000016   0448               LDR      R0,??UsbSetDescriptor_0+0x4  ;; UsbEp0Ctrl + 8
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   0170               STRB     R1,[R0, #+0]
   \                     ??UsbSetDescriptor_2:
   \   0000001C   08BC               POP      {R3}
   \   0000001E   01BC               POP      {R0}
   \   00000020   0047               BX       R0               ;; return
   \   00000022   C046               Nop      
   \                     ??UsbSetDescriptor_0:
   \   00000024   ........           DC32     UsbDevCtrl
   \   00000028   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbGetConfiguration(void)
   \                     UsbGetConfiguration:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   1348               LDR      R0,??UsbGetConfiguration_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   1AD3               BCC      ??UsbGetConfiguration_1
   \   0000000E   1148               LDR      R0,??UsbGetConfiguration_0+0x4  ;; UsbEp0SetupPacket + 2
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   16D1               BNE      ??UsbGetConfiguration_1
   \   00000016   1048               LDR      R0,??UsbGetConfiguration_0+0x8  ;; UsbEp0SetupPacket + 4
   \   00000018   0088               LDRH     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   12D1               BNE      ??UsbGetConfiguration_1
   \   0000001E   0F48               LDR      R0,??UsbGetConfiguration_0+0xC  ;; UsbEp0SetupPacket + 6
   \   00000020   0088               LDRH     R0,[R0, #+0]
   \   00000022   0128               CMP      R0,#+1
   \   00000024   0ED1               BNE      ??UsbGetConfiguration_1
   \   00000026   0E48               LDR      R0,??UsbGetConfiguration_0+0x10  ;; UsbEp0Ctrl + 4
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0160               STR      R1,[R0, #+0]
   \   0000002C   0220               MOVS     R0,#+2
   \   0000002E   ........           BL       UsbCoreReq
   \   00000032   0C49               LDR      R1,??UsbGetConfiguration_0+0x14  ;; EpCtrlDataBuf
   \   00000034   0870               STRB     R0,[R1, #+0]
   \   00000036   0C48               LDR      R0,??UsbGetConfiguration_0+0x18  ;; UsbEp0Ctrl
   \   00000038   0A49               LDR      R1,??UsbGetConfiguration_0+0x14  ;; EpCtrlDataBuf
   \   0000003A   0160               STR      R1,[R0, #+0]
   \   0000003C   0B48               LDR      R0,??UsbGetConfiguration_0+0x1C  ;; UsbEp0Ctrl + 8
   \   0000003E   0321               MOVS     R1,#+3
   \   00000040   0170               STRB     R1,[R0, #+0]
   \   00000042   02E0               B        ??UsbGetConfiguration_2
   \                     ??UsbGetConfiguration_1:
   \   00000044   0948               LDR      R0,??UsbGetConfiguration_0+0x1C  ;; UsbEp0Ctrl + 8
   \   00000046   0021               MOVS     R1,#+0
   \   00000048   0170               STRB     R1,[R0, #+0]
   \                     ??UsbGetConfiguration_2:
   \   0000004A   08BC               POP      {R3}
   \   0000004C   01BC               POP      {R0}
   \   0000004E   0047               BX       R0               ;; return
   \                     ??UsbGetConfiguration_0:
   \   00000050   ........           DC32     UsbDevCtrl
   \   00000054   ........           DC32     UsbEp0SetupPacket + 2
   \   00000058   ........           DC32     UsbEp0SetupPacket + 4
   \   0000005C   ........           DC32     UsbEp0SetupPacket + 6
   \   00000060   ........           DC32     UsbEp0Ctrl + 4
   \   00000064   ........           DC32     EpCtrlDataBuf
   \   00000068   ........           DC32     UsbEp0Ctrl
   \   0000006C   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetConfiguration(void)
   \                     UsbSetConfiguration:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   1048               LDR      R0,??UsbSetConfiguration_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   14D3               BCC      ??UsbSetConfiguration_1
   \   0000000E   0E48               LDR      R0,??UsbSetConfiguration_0+0x4  ;; UsbEp0SetupPacket + 4
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   10D1               BNE      ??UsbSetConfiguration_1
   \   00000016   0D48               LDR      R0,??UsbSetConfiguration_0+0x8  ;; UsbEp0SetupPacket + 6
   \   00000018   0088               LDRH     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   0CD1               BNE      ??UsbSetConfiguration_1
   \   0000001E   0C48               LDR      R0,??UsbSetConfiguration_0+0xC  ;; UsbEp0SetupPacket + 2
   \   00000020   0078               LDRB     R0,[R0, #+0]
   \   00000022   ........           BL       UsbSetConfigurtonState
   \   00000026   0028               CMP      R0,#+0
   \   00000028   06D1               BNE      ??UsbSetConfiguration_1
   \   0000002A   0A48               LDR      R0,??UsbSetConfiguration_0+0x10  ;; UsbEp0Ctrl + 4
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   0160               STR      R1,[R0, #+0]
   \   00000030   0948               LDR      R0,??UsbSetConfiguration_0+0x14  ;; UsbEp0Ctrl + 8
   \   00000032   0321               MOVS     R1,#+3
   \   00000034   0170               STRB     R1,[R0, #+0]
   \   00000036   02E0               B        ??UsbSetConfiguration_2
   \                     ??UsbSetConfiguration_1:
   \   00000038   0748               LDR      R0,??UsbSetConfiguration_0+0x14  ;; UsbEp0Ctrl + 8
   \   0000003A   0021               MOVS     R1,#+0
   \   0000003C   0170               STRB     R1,[R0, #+0]
   \                     ??UsbSetConfiguration_2:
   \   0000003E   08BC               POP      {R3}
   \   00000040   01BC               POP      {R0}
   \   00000042   0047               BX       R0               ;; return
   \                     ??UsbSetConfiguration_0:
   \   00000044   ........           DC32     UsbDevCtrl
   \   00000048   ........           DC32     UsbEp0SetupPacket + 4
   \   0000004C   ........           DC32     UsbEp0SetupPacket + 6
   \   00000050   ........           DC32     UsbEp0SetupPacket + 2
   \   00000054   ........           DC32     UsbEp0Ctrl + 4
   \   00000058   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbGetInterface(void)
   \                     UsbGetInterface:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   1548               LDR      R0,??UsbGetInterface_0  ;; UsbDevCtrl
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000008   400F               LSRS     R0,R0,#+29
   \   0000000A   0528               CMP      R0,#+5
   \   0000000C   1BD1               BNE      ??UsbGetInterface_1
   \   0000000E   1348               LDR      R0,??UsbGetInterface_0+0x4  ;; UsbEp0SetupPacket + 4
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   1349               LDR      R1,??UsbGetInterface_0+0x8  ;; UsbDevCtrl + 8
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   8842               CMP      R0,R1
   \   00000018   15D1               BNE      ??UsbGetInterface_1
   \   0000001A   1248               LDR      R0,??UsbGetInterface_0+0xC  ;; UsbEp0SetupPacket + 6
   \   0000001C   0088               LDRH     R0,[R0, #+0]
   \   0000001E   0128               CMP      R0,#+1
   \   00000020   11D1               BNE      ??UsbGetInterface_1
   \   00000022   1148               LDR      R0,??UsbGetInterface_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000024   0088               LDRH     R0,[R0, #+0]
   \   00000026   0028               CMP      R0,#+0
   \   00000028   0DD1               BNE      ??UsbGetInterface_1
   \   0000002A   1048               LDR      R0,??UsbGetInterface_0+0x14  ;; UsbEp0Ctrl + 4
   \   0000002C   0121               MOVS     R1,#+1
   \   0000002E   0160               STR      R1,[R0, #+0]
   \   00000030   0F48               LDR      R0,??UsbGetInterface_0+0x18  ;; UsbDevCtrl + 12
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   0F49               LDR      R1,??UsbGetInterface_0+0x1C  ;; EpCtrlDataBuf
   \   00000036   0870               STRB     R0,[R1, #+0]
   \   00000038   0F48               LDR      R0,??UsbGetInterface_0+0x20  ;; UsbEp0Ctrl
   \   0000003A   0E49               LDR      R1,??UsbGetInterface_0+0x1C  ;; EpCtrlDataBuf
   \   0000003C   0160               STR      R1,[R0, #+0]
   \   0000003E   0F48               LDR      R0,??UsbGetInterface_0+0x24  ;; UsbEp0Ctrl + 8
   \   00000040   0321               MOVS     R1,#+3
   \   00000042   0170               STRB     R1,[R0, #+0]
   \   00000044   05E0               B        ??UsbGetInterface_2
   \                     ??UsbGetInterface_1:
   \   00000046   0648               LDR      R0,??UsbGetInterface_0+0x8  ;; UsbDevCtrl + 8
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   0090               STR      R0,[SP, #+0]
   \   0000004C   0B48               LDR      R0,??UsbGetInterface_0+0x24  ;; UsbEp0Ctrl + 8
   \   0000004E   0021               MOVS     R1,#+0
   \   00000050   0170               STRB     R1,[R0, #+0]
   \                     ??UsbGetInterface_2:
   \   00000052   08BC               POP      {R3}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??UsbGetInterface_0:
   \   00000058   ........           DC32     UsbDevCtrl
   \   0000005C   ........           DC32     UsbEp0SetupPacket + 4
   \   00000060   ........           DC32     UsbDevCtrl + 8
   \   00000064   ........           DC32     UsbEp0SetupPacket + 6
   \   00000068   ........           DC32     UsbEp0SetupPacket + 2
   \   0000006C   ........           DC32     UsbEp0Ctrl + 4
   \   00000070   ........           DC32     UsbDevCtrl + 12
   \   00000074   ........           DC32     EpCtrlDataBuf
   \   00000078   ........           DC32     UsbEp0Ctrl
   \   0000007C   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSetInterface(void)
   \                     UsbSetInterface:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
   \   00000004   2048               LDR      R0,??UsbSetInterface_0  ;; UsbDevCtrl
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000000A   400F               LSRS     R0,R0,#+29
   \   0000000C   0528               CMP      R0,#+5
   \   0000000E   34D1               BNE      ??UsbSetInterface_1
   \   00000010   1E48               LDR      R0,??UsbSetInterface_0+0x4  ;; UsbEp0SetupPacket + 6
   \   00000012   0088               LDRH     R0,[R0, #+0]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   30D1               BNE      ??UsbSetInterface_1
   \   00000018   1D48               LDR      R0,??UsbSetInterface_0+0x8  ;; UsbDevCtrl + 4
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       UsbFindConfiguration
   \   00000020   0400               MOVS     R4,R0
   \   00000022   6846               MOV      R0,SP
   \   00000024   1849               LDR      R1,??UsbSetInterface_0  ;; UsbDevCtrl
   \   00000026   1822               MOVS     R2,#+24
   \   00000028   ........           BL       __aeabi_memcpy4
   \   0000002C   1948               LDR      R0,??UsbSetInterface_0+0xC  ;; UsbEp0SetupPacket + 4
   \   0000002E   0088               LDRH     R0,[R0, #+0]
   \   00000030   0290               STR      R0,[SP, #+8]
   \   00000032   1948               LDR      R0,??UsbSetInterface_0+0x10  ;; UsbEp0SetupPacket + 2
   \   00000034   0088               LDRH     R0,[R0, #+0]
   \   00000036   0390               STR      R0,[SP, #+12]
   \   00000038   6846               MOV      R0,SP
   \   0000003A   007D               LDRB     R0,[R0, #+20]
   \   0000003C   FD21               MOVS     R1,#+253
   \   0000003E   0140               ANDS     R1,R1,R0
   \   00000040   6846               MOV      R0,SP
   \   00000042   0175               STRB     R1,[R0, #+20]
   \   00000044   6946               MOV      R1,SP
   \   00000046   2000               MOVS     R0,R4
   \   00000048   ........           BL       UsbFindInterface
   \   0000004C   0028               CMP      R0,#+0
   \   0000004E   03D0               BEQ      ??UsbSetInterface_2
   \   00000050   1248               LDR      R0,??UsbSetInterface_0+0x14  ;; UsbEp0Ctrl + 8
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0170               STRB     R1,[R0, #+0]
   \   00000056   13E0               B        ??UsbSetInterface_3
   \                     ??UsbSetInterface_2:
   \   00000058   6846               MOV      R0,SP
   \   0000005A   1149               LDR      R1,??UsbSetInterface_0+0x18  ;; UsbUserFun + 152
   \   0000005C   0968               LDR      R1,[R1, #+0]
   \   0000005E   ........           BL       __iar_via_R1
   \   00000062   0948               LDR      R0,??UsbSetInterface_0  ;; UsbDevCtrl
   \   00000064   6946               MOV      R1,SP
   \   00000066   1822               MOVS     R2,#+24
   \   00000068   ........           BL       __aeabi_memcpy4
   \   0000006C   0D48               LDR      R0,??UsbSetInterface_0+0x1C  ;; UsbEp0Ctrl + 4
   \   0000006E   0021               MOVS     R1,#+0
   \   00000070   0160               STR      R1,[R0, #+0]
   \   00000072   0A48               LDR      R0,??UsbSetInterface_0+0x14  ;; UsbEp0Ctrl + 8
   \   00000074   0321               MOVS     R1,#+3
   \   00000076   0170               STRB     R1,[R0, #+0]
   \   00000078   02E0               B        ??UsbSetInterface_3
   \                     ??UsbSetInterface_1:
   \   0000007A   0848               LDR      R0,??UsbSetInterface_0+0x14  ;; UsbEp0Ctrl + 8
   \   0000007C   0021               MOVS     R1,#+0
   \   0000007E   0170               STRB     R1,[R0, #+0]
   \                     ??UsbSetInterface_3:
   \   00000080   06B0               ADD      SP,SP,#+24
   \   00000082   10BC               POP      {R4}
   \   00000084   01BC               POP      {R0}
   \   00000086   0047               BX       R0               ;; return
   \                     ??UsbSetInterface_0:
   \   00000088   ........           DC32     UsbDevCtrl
   \   0000008C   ........           DC32     UsbEp0SetupPacket + 6
   \   00000090   ........           DC32     UsbDevCtrl + 4
   \   00000094   ........           DC32     UsbEp0SetupPacket + 4
   \   00000098   ........           DC32     UsbEp0SetupPacket + 2
   \   0000009C   ........           DC32     UsbEp0Ctrl + 8
   \   000000A0   ........           DC32     UsbUserFun + 152
   \   000000A4   ........           DC32     UsbEp0Ctrl + 4

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbSynchFrame(void)
   \                     UsbSynchFrame:
   \   00000000   0148               LDR      R0,??UsbSynchFrame_0  ;; UsbEp0Ctrl + 8
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0170               STRB     R1,[R0, #+0]
   \   00000006   7047               BX       LR               ;; return
   \                     ??UsbSynchFrame_0:
   \   00000008   ........           DC32     UsbEp0Ctrl + 8

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbDevConnectCallback(Boolean)
   \                     UsbDevConnectCallback:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   2000               MOVS     R0,R4
   \   00000006   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000008   000E               LSRS     R0,R0,#+24
   \   0000000A   401E               SUBS     R0,R0,#+1
   \   0000000C   8041               SBCS     R0,R0,R0
   \   0000000E   C043               MVNS     R0,R0
   \   00000010   C00F               LSRS     R0,R0,#+31
   \   00000012   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000014   000E               LSRS     R0,R0,#+24
   \   00000016   ........           BL       UsbSetDevState
   \   0000001A   0748               LDR      R0,??UsbDevConnectCallback_0  ;; UsbUserFun + 160
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   06D0               BEQ      ??UsbDevConnectCallback_1
   \   00000022   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000024   240E               LSRS     R4,R4,#+24
   \   00000026   2000               MOVS     R0,R4
   \   00000028   0349               LDR      R1,??UsbDevConnectCallback_0  ;; UsbUserFun + 160
   \   0000002A   0968               LDR      R1,[R1, #+0]
   \   0000002C   ........           BL       __iar_via_R1
   \                     ??UsbDevConnectCallback_1:
   \   00000030   10BC               POP      {R4}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
   \   00000036   C046               Nop      
   \                     ??UsbDevConnectCallback_0:
   \   00000038   ........           DC32     UsbUserFun + 160

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbDevSuspendCallback(Boolean)
   \                     UsbDevSuspendCallback:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   2000               MOVS     R0,R4
   \   00000006   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000008   000E               LSRS     R0,R0,#+24
   \   0000000A   401E               SUBS     R0,R0,#+1
   \   0000000C   8041               SBCS     R0,R0,R0
   \   0000000E   C043               MVNS     R0,R0
   \   00000010   C00F               LSRS     R0,R0,#+31
   \   00000012   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000014   000E               LSRS     R0,R0,#+24
   \   00000016   ........           BL       UsbSetDevSuspend
   \   0000001A   0748               LDR      R0,??UsbDevSuspendCallback_0  ;; UsbUserFun + 164
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   06D0               BEQ      ??UsbDevSuspendCallback_1
   \   00000022   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000024   240E               LSRS     R4,R4,#+24
   \   00000026   2000               MOVS     R0,R4
   \   00000028   0349               LDR      R1,??UsbDevSuspendCallback_0  ;; UsbUserFun + 164
   \   0000002A   0968               LDR      R1,[R1, #+0]
   \   0000002C   ........           BL       __iar_via_R1
   \                     ??UsbDevSuspendCallback_1:
   \   00000030   10BC               POP      {R4}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
   \   00000036   C046               Nop      
   \                     ??UsbDevSuspendCallback_0:
   \   00000038   ........           DC32     UsbUserFun + 164

   \                                 In section .text, align 4, keep-with-next
   \   static __??Code16?? __code __interwork void UsbDevResetCallback(void)
   \                     UsbDevResetCallback:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0320               MOVS     R0,#+3
   \   00000004   ........           BL       UsbSetDevState
   \   00000008   0548               LDR      R0,??UsbDevResetCallback_0  ;; UsbUserFun + 156
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   04D0               BEQ      ??UsbDevResetCallback_1
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0349               LDR      R1,??UsbDevResetCallback_0  ;; UsbUserFun + 156
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   ........           BL       __iar_via_R1
   \                     ??UsbDevResetCallback_1:
   \   0000001A   08BC               POP      {R3}
   \   0000001C   01BC               POP      {R0}
   \   0000001E   0047               BX       R0               ;; return
   \                     ??UsbDevResetCallback_0:
   \   00000020   ........           DC32     UsbUserFun + 156
    142          
    143          /*************************************************************************
    144           * Function Name: EpCtrlSet_EA
    145           * Parameters: volatile pInt32U pReg, Int32U Data
    146           *
    147           * Return: none
    148           *
    149           * Description: Set EP Addr
    150           *
    151           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    152          void EpCtrlSet_EA(volatile pInt32U pReg, Int32U Data)
    153          {
   \                     EpCtrlSet_EA:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    154            Data &= 0xF;
   \   00000004   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   00000006   090F               LSRS     R1,R1,#+28
    155            Data |= *pReg & 0x0700 ;
   \   00000008   0A00               MOVS     R2,R1
   \   0000000A   0198               LDR      R0,[SP, #+4]
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   E021               MOVS     R1,#+224
   \   00000010   C900               LSLS     R1,R1,#+3        ;; #+1792
   \   00000012   0140               ANDS     R1,R1,R0
   \   00000014   1143               ORRS     R1,R1,R2
    156            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000016   0800               MOVS     R0,R1
   \   00000018   0249               LDR      R1,??EpCtrlSet_EA_0  ;; 0x8080
   \   0000001A   0143               ORRS     R1,R1,R0
    157            *pReg = Data;
   \   0000001C   0198               LDR      R0,[SP, #+4]
   \   0000001E   0160               STR      R1,[R0, #+0]
    158          }
   \   00000020   0CBC               POP      {R2,R3}
   \   00000022   7047               BX       LR               ;; return
   \                     ??EpCtrlSet_EA_0:
   \   00000024   80800000           DC32     0x8080
    159          
    160          /*************************************************************************
    161           * Function Name: EpCtrlGet_EA
    162           * Parameters: volatile pInt32U pReg
    163           *
    164           * Return: Int16U
    165           *
    166           * Description: Get EP Addr
    167           *
    168           *************************************************************************/
    169          inline
    170          Int16U EpCtrlGet_EA(volatile pInt32U pReg)
    171          {
    172            return(*pReg & 0x0F);
    173          }
    174          
    175          /*************************************************************************
    176           * Function Name: EpCtrlSet_STAT_TX
    177           * Parameters: volatile pInt32U pReg, EpState_t Data
    178           *
    179           * Return: none
    180           *
    181           * Description: Set EP IN State
    182           *
    183           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    184          void EpCtrlSet_STAT_TX (volatile pInt32U pReg, EpState_t Data)
    185          {
   \                     EpCtrlSet_STAT_TX:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0C00               MOVS     R4,R1
    186          Int32U State;
    187            // The EP can change state between read and write
    188            // operations from VALID to NAK and result of
    189            // set operation will be invalid!
    190            if(EpCtrlGet_STAT_TX(pReg) != (Int32U)Data)
   \   00000004   0098               LDR      R0,[SP, #+0]
   \   00000006   ........           BL       EpCtrlGet_STAT_TX
   \   0000000A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000000C   240E               LSRS     R4,R4,#+24
   \   0000000E   A042               CMP      R0,R4
   \   00000010   26D0               BEQ      ??EpCtrlSet_STAT_TX_0
    191            {
    192              State = Data;
   \   00000012   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000014   240E               LSRS     R4,R4,#+24
   \   00000016   2500               MOVS     R5,R4
    193              State <<= 4;
   \   00000018   2D01               LSLS     R5,R5,#+4
    194              State ^= *pReg;
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   0098               LDR      R0,[SP, #+0]
   \   0000001E   0568               LDR      R5,[R0, #+0]
   \   00000020   4D40               EORS     R5,R5,R1
    195              State |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000022   2800               MOVS     R0,R5
   \   00000024   104D               LDR      R5,??EpCtrlSet_STAT_TX_1  ;; 0x8080
   \   00000026   0543               ORRS     R5,R5,R0
    196              State &= ~0x7040;  // Clear the toggle bits without STAT_TX (4,5)
   \   00000028   2800               MOVS     R0,R5
   \   0000002A   104D               LDR      R5,??EpCtrlSet_STAT_TX_1+0x4  ;; 0xffff8fbf
   \   0000002C   0540               ANDS     R5,R5,R0
    197              *pReg = State;
   \   0000002E   0098               LDR      R0,[SP, #+0]
   \   00000030   0560               STR      R5,[R0, #+0]
    198            }
    199            else
    200            {
    201              return;
    202            }
    203            if(EpCtrlGet_STAT_TX(pReg) != (Int32U)Data)
   \   00000032   0098               LDR      R0,[SP, #+0]
   \   00000034   ........           BL       EpCtrlGet_STAT_TX
   \   00000038   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003A   240E               LSRS     R4,R4,#+24
   \   0000003C   A042               CMP      R0,R4
   \   0000003E   0FD0               BEQ      ??EpCtrlSet_STAT_TX_0
    204            {
    205              State = Data;
   \   00000040   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000042   240E               LSRS     R4,R4,#+24
   \   00000044   2500               MOVS     R5,R4
    206              State <<= 4;
   \   00000046   2D01               LSLS     R5,R5,#+4
    207              State ^= *pReg;
   \   00000048   2900               MOVS     R1,R5
   \   0000004A   0098               LDR      R0,[SP, #+0]
   \   0000004C   0568               LDR      R5,[R0, #+0]
   \   0000004E   4D40               EORS     R5,R5,R1
    208              State |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000050   2800               MOVS     R0,R5
   \   00000052   054D               LDR      R5,??EpCtrlSet_STAT_TX_1  ;; 0x8080
   \   00000054   0543               ORRS     R5,R5,R0
    209              State &= ~0x7040;  // Clear the toggle bits without STAT_TX (4,5)
   \   00000056   2800               MOVS     R0,R5
   \   00000058   044D               LDR      R5,??EpCtrlSet_STAT_TX_1+0x4  ;; 0xffff8fbf
   \   0000005A   0540               ANDS     R5,R5,R0
    210              *pReg = State;
   \   0000005C   0098               LDR      R0,[SP, #+0]
   \   0000005E   0560               STR      R5,[R0, #+0]
   \                     ??EpCtrlSet_STAT_TX_0:
   \   00000060   38BC               POP      {R3-R5}
   \   00000062   01BC               POP      {R0}
   \   00000064   0047               BX       R0               ;; return
   \   00000066   C046               Nop      
   \                     ??EpCtrlSet_STAT_TX_1:
   \   00000068   80800000           DC32     0x8080
   \   0000006C   BF8FFFFF           DC32     0xffff8fbf
    211            }
    212          }
    213          
    214          /*************************************************************************
    215           * Function Name: EpCtrlGet_STAT_TX
    216           * Parameters: volatile pInt32U pReg
    217           *
    218           * Return: Int32U
    219           *
    220           * Description: Get EP IN Status
    221           *
    222           *************************************************************************/

   \                                 In section .text, align 4
    223          inline
    224          Int32U EpCtrlGet_STAT_TX (volatile pInt32U pReg)
    225          {
   \                     EpCtrlGet_STAT_TX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    226          Int32U Data = *pReg;
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   0800               MOVS     R0,R1
    227            return((Data & (0x3UL << 4)) >> 4);
   \   0000000A   3021               MOVS     R1,#+48
   \   0000000C   0140               ANDS     R1,R1,R0
   \   0000000E   0800               MOVS     R0,R1
   \   00000010   0009               LSRS     R0,R0,#+4
   \   00000012   0CBC               POP      {R2,R3}
   \   00000014   7047               BX       LR               ;; return
    228          }
    229          
    230          /*************************************************************************
    231           * Function Name: EpCtrlSet_DTOG_TX
    232           * Parameters: volatile pInt32U pReg, Int32U Data
    233           *
    234           * Return: none
    235           *
    236           * Description: Set EP DTOG_TX bit (IN)
    237           *
    238           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    239          void EpCtrlSet_DTOG_TX(volatile pInt32U pReg, Int32U Data)
    240          {
   \                     EpCtrlSet_DTOG_TX:
   \   00000000   01B5               PUSH     {R0,LR}
    241            Data  = Data?(*pReg ^ (1UL<<6)):*pReg;
   \   00000002   0029               CMP      R1,#+0
   \   00000004   04D0               BEQ      ??EpCtrlSet_DTOG_TX_0
   \   00000006   0098               LDR      R0,[SP, #+0]
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   4021               MOVS     R1,#+64
   \   0000000C   4140               EORS     R1,R1,R0
   \   0000000E   01E0               B        ??EpCtrlSet_DTOG_TX_1
   \                     ??EpCtrlSet_DTOG_TX_0:
   \   00000010   0098               LDR      R0,[SP, #+0]
   \   00000012   0168               LDR      R1,[R0, #+0]
    242            Data &= ~0x7030;   // Clear the toggle bits without DTOG_TX (6)
   \                     ??EpCtrlSet_DTOG_TX_1:
   \   00000014   0800               MOVS     R0,R1
   \   00000016   0549               LDR      R1,??EpCtrlSet_DTOG_TX_2  ;; 0xffff8fcf
   \   00000018   0140               ANDS     R1,R1,R0
    243            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   0000001A   0800               MOVS     R0,R1
   \   0000001C   0449               LDR      R1,??EpCtrlSet_DTOG_TX_2+0x4  ;; 0x8080
   \   0000001E   0143               ORRS     R1,R1,R0
    244            *pReg = Data;
   \   00000020   0098               LDR      R0,[SP, #+0]
   \   00000022   0160               STR      R1,[R0, #+0]
    245          }
   \   00000024   08BC               POP      {R3}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
   \   0000002A   C046               Nop      
   \                     ??EpCtrlSet_DTOG_TX_2:
   \   0000002C   CF8FFFFF           DC32     0xffff8fcf
   \   00000030   80800000           DC32     0x8080
    246          
    247          /*************************************************************************
    248           * Function Name: EpCtrlToggle_DTOG_TX
    249           * Parameters: volatile pInt32U pReg
    250           *
    251           * Return: none
    252           *
    253           * Description: Toggle EP DTOG_TX bit (IN)
    254           *
    255           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    256          void EpCtrlToggle_DTOG_TX(volatile pInt32U pReg)
    257          {
   \                     EpCtrlToggle_DTOG_TX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    258          Int32U Data = *pReg | (1UL << 6);
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   4022               MOVS     R2,#+64
   \   0000000A   0A43               ORRS     R2,R2,R1
   \   0000000C   1000               MOVS     R0,R2
    259            Data &= ~0x7030;   // Clear the toggle bits without DTOG_TX (6)
   \   0000000E   0100               MOVS     R1,R0
   \   00000010   0448               LDR      R0,??EpCtrlToggle_DTOG_TX_0  ;; 0xffff8fcf
   \   00000012   0840               ANDS     R0,R0,R1
    260            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000014   0100               MOVS     R1,R0
   \   00000016   0448               LDR      R0,??EpCtrlToggle_DTOG_TX_0+0x4  ;; 0x8080
   \   00000018   0843               ORRS     R0,R0,R1
    261            *pReg = Data;
   \   0000001A   0199               LDR      R1,[SP, #+4]
   \   0000001C   0860               STR      R0,[R1, #+0]
    262          }
   \   0000001E   0CBC               POP      {R2,R3}
   \   00000020   7047               BX       LR               ;; return
   \   00000022   C046               Nop      
   \                     ??EpCtrlToggle_DTOG_TX_0:
   \   00000024   CF8FFFFF           DC32     0xffff8fcf
   \   00000028   80800000           DC32     0x8080
    263          
    264          /*************************************************************************
    265           * Function Name: EpCtrlGet_DTOG_TX
    266           * Parameters: volatile pInt32U pReg
    267           *
    268           * Return: Int32U
    269           *
    270           * Description: Get EP DTOG_TX bit (IN)
    271           *
    272           *************************************************************************/

   \                                 In section .text, align 4
    273          inline
    274          Int32U EpCtrlGet_DTOG_TX(volatile pInt32U pReg)
    275          {
   \                     EpCtrlGet_DTOG_TX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    276            return(((*pReg & (1UL<<6))?1:0));
   \   00000004   0198               LDR      R0,[SP, #+4]
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   4021               MOVS     R1,#+64
   \   0000000A   0140               ANDS     R1,R1,R0
   \   0000000C   481E               SUBS     R0,R1,#+1
   \   0000000E   8041               SBCS     R0,R0,R0
   \   00000010   C043               MVNS     R0,R0
   \   00000012   C00F               LSRS     R0,R0,#+31
   \   00000014   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0CBC               POP      {R2,R3}
   \   0000001A   7047               BX       LR               ;; return
    277          }
    278          
    279          /*************************************************************************
    280           * Function Name: EpCtrlClr_CTR_TX
    281           * Parameters: volatile pInt32U pReg
    282           *
    283           * Return: none
    284           *
    285           * Description: Clear EP CTR_TX bit (IN)
    286           *
    287           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    288          void EpCtrlClr_CTR_TX(volatile pInt32U pReg)
    289          {
   \                     EpCtrlClr_CTR_TX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    290          Int32U Data = *pReg;
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   0800               MOVS     R0,R1
    291            Data &= ~(USB_CTRL_TOGGLE_MASK | 1UL << 7);
   \   0000000A   0100               MOVS     R1,R0
   \   0000000C   0448               LDR      R0,??EpCtrlClr_CTR_TX_0  ;; 0xffff8f0f
   \   0000000E   0840               ANDS     R0,R0,R1
    292            Data |= 1UL <<15;   // Set RX_CTR
   \   00000010   0100               MOVS     R1,R0
   \   00000012   8020               MOVS     R0,#+128
   \   00000014   0002               LSLS     R0,R0,#+8        ;; #+32768
   \   00000016   0843               ORRS     R0,R0,R1
    293            *pReg = Data;
   \   00000018   0199               LDR      R1,[SP, #+4]
   \   0000001A   0860               STR      R0,[R1, #+0]
    294          }
   \   0000001C   0CBC               POP      {R2,R3}
   \   0000001E   7047               BX       LR               ;; return
   \                     ??EpCtrlClr_CTR_TX_0:
   \   00000020   0F8FFFFF           DC32     0xffff8f0f
    295          
    296          /*************************************************************************
    297           * Function Name: EpCtrlGet_CTR_TX
    298           * Parameters: volatile pInt32U pReg
    299           *
    300           * Return: UserFunc_t
    301           *
    302           * Description: Get EP CTR_TX bit (IN)
    303           *
    304           *************************************************************************/

   \                                 In section .text, align 4
    305          inline
    306          Int32U EpCtrlGet_CTR_TX(volatile pInt32U pReg)
    307          {
   \                     EpCtrlGet_CTR_TX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    308            return(((*pReg & (0x1UL << 7))?1:0));
   \   00000004   0198               LDR      R0,[SP, #+4]
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   8021               MOVS     R1,#+128
   \   0000000A   0140               ANDS     R1,R1,R0
   \   0000000C   481E               SUBS     R0,R1,#+1
   \   0000000E   8041               SBCS     R0,R0,R0
   \   00000010   C043               MVNS     R0,R0
   \   00000012   C00F               LSRS     R0,R0,#+31
   \   00000014   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0CBC               POP      {R2,R3}
   \   0000001A   7047               BX       LR               ;; return
    309          }
    310          
    311          /*************************************************************************
    312           * Function Name: EpCtrlSet_EP_KIND
    313           * Parameters: volatile pInt32U pReg, Int32U Data
    314           *
    315           * Return: none
    316           *
    317           * Description: Set EP KIND bit
    318           *
    319           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    320          void EpCtrlSet_EP_KIND (volatile pInt32U pReg, Int32U Data)
    321          {
   \                     EpCtrlSet_EP_KIND:
   \   00000000   01B5               PUSH     {R0,LR}
    322            Data  = Data ? (1UL << 8):0;
   \   00000002   0029               CMP      R1,#+0
   \   00000004   02D0               BEQ      ??EpCtrlSet_EP_KIND_0
   \   00000006   8021               MOVS     R1,#+128
   \   00000008   4900               LSLS     R1,R1,#+1        ;; #+256
   \   0000000A   00E0               B        ??EpCtrlSet_EP_KIND_1
   \                     ??EpCtrlSet_EP_KIND_0:
   \   0000000C   0021               MOVS     R1,#+0
    323            Data |= *pReg & ~(USB_CTRL_TOGGLE_MASK | (1UL << 8));
   \                     ??EpCtrlSet_EP_KIND_1:
   \   0000000E   0A00               MOVS     R2,R1
   \   00000010   0098               LDR      R0,[SP, #+0]
   \   00000012   0068               LDR      R0,[R0, #+0]
   \   00000014   0549               LDR      R1,??EpCtrlSet_EP_KIND_2  ;; 0xffff8e8f
   \   00000016   0140               ANDS     R1,R1,R0
   \   00000018   1143               ORRS     R1,R1,R2
    324            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   0000001A   0800               MOVS     R0,R1
   \   0000001C   0449               LDR      R1,??EpCtrlSet_EP_KIND_2+0x4  ;; 0x8080
   \   0000001E   0143               ORRS     R1,R1,R0
    325            *pReg = Data;
   \   00000020   0098               LDR      R0,[SP, #+0]
   \   00000022   0160               STR      R1,[R0, #+0]
    326          }
   \   00000024   08BC               POP      {R3}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
   \   0000002A   C046               Nop      
   \                     ??EpCtrlSet_EP_KIND_2:
   \   0000002C   8F8EFFFF           DC32     0xffff8e8f
   \   00000030   80800000           DC32     0x8080
    327          
    328          /*************************************************************************
    329           * Function Name: EpCtrlGet_EP_KIND
    330           * Parameters: volatile pInt32U pReg
    331           *
    332           * Return: Int32U
    333           *
    334           * Description: Get EP KIND bit
    335           *
    336           *************************************************************************/
    337          inline
    338          Int32U EpCtrlGet_EP_KIND(volatile pInt32U pReg)
    339          {
    340            return(*pReg & (0x1UL << 8)?1:0);
    341          }
    342          
    343          /*************************************************************************
    344           * Function Name: EpCtrlSet_EP_TYPE
    345           * Parameters: volatile pInt32U pReg, EpType_t Data
    346           *
    347           * Return: none
    348           *
    349           * Description: Set EP type
    350           *
    351           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    352          void EpCtrlSet_EP_TYPE(volatile pInt32U pReg, EpType_t Data)
    353          {
   \                     EpCtrlSet_EP_TYPE:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    354          Int32U Type;
    355            Type = Data;
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0800               MOVS     R0,R1
    356            Type <<= 9;
   \   0000000A   4002               LSLS     R0,R0,#+9
    357            Type  |= *pReg & ~(USB_CTRL_TOGGLE_MASK | (0x3UL << 9));
   \   0000000C   0300               MOVS     R3,R0
   \   0000000E   0198               LDR      R0,[SP, #+4]
   \   00000010   0268               LDR      R2,[R0, #+0]
   \   00000012   0548               LDR      R0,??EpCtrlSet_EP_TYPE_0  ;; 0xffff898f
   \   00000014   1040               ANDS     R0,R0,R2
   \   00000016   1843               ORRS     R0,R0,R3
    358            Type  |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000018   0200               MOVS     R2,R0
   \   0000001A   0448               LDR      R0,??EpCtrlSet_EP_TYPE_0+0x4  ;; 0x8080
   \   0000001C   1043               ORRS     R0,R0,R2
    359            *pReg = Type;
   \   0000001E   019A               LDR      R2,[SP, #+4]
   \   00000020   1060               STR      R0,[R2, #+0]
    360          }
   \   00000022   0CBC               POP      {R2,R3}
   \   00000024   7047               BX       LR               ;; return
   \   00000026   C046               Nop      
   \                     ??EpCtrlSet_EP_TYPE_0:
   \   00000028   8F89FFFF           DC32     0xffff898f
   \   0000002C   80800000           DC32     0x8080
    361          
    362          /*************************************************************************
    363           * Function Name: EpCtrlGet_EP_TYPE
    364           * Parameters: volatile pInt32U pReg
    365           *
    366           * Return: Int32U
    367           *
    368           * Description: Get EP type
    369           *
    370           *************************************************************************/
    371          inline
    372          Int32U EpCtrlGet_EP_TYPE(volatile pInt32U pReg)
    373          {
    374          Int32U Data = *pReg;
    375            Data &= (3UL<<9);
    376            return(Data >> 9);
    377          }
    378          
    379          /*************************************************************************
    380           * Function Name: EpCtrlGet_SETUP
    381           * Parameters: volatile pInt32U pReg
    382           *
    383           * Return: Int32U
    384           *
    385           * Description: Get EP SETUP bit
    386           *
    387           *************************************************************************/

   \                                 In section .text, align 4
    388          inline
    389          Int32U EpCtrlGet_SETUP(volatile pInt32U pReg)
    390          {
   \                     EpCtrlGet_SETUP:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    391          Int32U Data = *pReg & (0x1UL << 11);
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   8022               MOVS     R2,#+128
   \   0000000A   1201               LSLS     R2,R2,#+4        ;; #+2048
   \   0000000C   0A40               ANDS     R2,R2,R1
   \   0000000E   1000               MOVS     R0,R2
    392            return(Data?1:0);
   \   00000010   401E               SUBS     R0,R0,#+1
   \   00000012   8041               SBCS     R0,R0,R0
   \   00000014   C043               MVNS     R0,R0
   \   00000016   C00F               LSRS     R0,R0,#+31
   \   00000018   0CBC               POP      {R2,R3}
   \   0000001A   7047               BX       LR               ;; return
    393          }
    394          
    395          /*************************************************************************
    396           * Function Name: EpCtrlSet_STAT_RX
    397           * Parameters: volatile pInt32U pReg, EpState_t Data
    398           *
    399           * Return: none
    400           *
    401           * Description: Set EP STAT_RX (OUT)
    402           *
    403           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    404          void EpCtrlSet_STAT_RX (volatile pInt32U pReg, EpState_t Data)
    405          {
   \                     EpCtrlSet_STAT_RX:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0C00               MOVS     R4,R1
    406          Int32U State;
    407            // The EP can change state between read and write
    408            // operations from VALID to NAK and result of
    409            // set operation will be invalid!
    410            if(EpCtrlGet_STAT_RX(pReg) != (Int32U)Data)
   \   00000004   0098               LDR      R0,[SP, #+0]
   \   00000006   ........           BL       EpCtrlGet_STAT_RX
   \   0000000A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000000C   240E               LSRS     R4,R4,#+24
   \   0000000E   A042               CMP      R0,R4
   \   00000010   26D0               BEQ      ??EpCtrlSet_STAT_RX_0
    411            {
    412              State = Data;
   \   00000012   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000014   240E               LSRS     R4,R4,#+24
   \   00000016   2500               MOVS     R5,R4
    413              State <<= 12;
   \   00000018   2D03               LSLS     R5,R5,#+12
    414              State  ^= *pReg;
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   0098               LDR      R0,[SP, #+0]
   \   0000001E   0568               LDR      R5,[R0, #+0]
   \   00000020   4D40               EORS     R5,R5,R1
    415              State  |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000022   2800               MOVS     R0,R5
   \   00000024   104D               LDR      R5,??EpCtrlSet_STAT_RX_1  ;; 0x8080
   \   00000026   0543               ORRS     R5,R5,R0
    416              State  &= ~0x4070;  // Clear the toggle bits without STAT_RX (12,13)
   \   00000028   2800               MOVS     R0,R5
   \   0000002A   104D               LDR      R5,??EpCtrlSet_STAT_RX_1+0x4  ;; 0xffffbf8f
   \   0000002C   0540               ANDS     R5,R5,R0
    417              *pReg  = State;
   \   0000002E   0098               LDR      R0,[SP, #+0]
   \   00000030   0560               STR      R5,[R0, #+0]
    418            }
    419            else
    420            {
    421              return;
    422            }
    423            if(EpCtrlGet_STAT_RX(pReg) != (Int32U)Data)
   \   00000032   0098               LDR      R0,[SP, #+0]
   \   00000034   ........           BL       EpCtrlGet_STAT_RX
   \   00000038   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003A   240E               LSRS     R4,R4,#+24
   \   0000003C   A042               CMP      R0,R4
   \   0000003E   0FD0               BEQ      ??EpCtrlSet_STAT_RX_0
    424            {
    425              State = Data;
   \   00000040   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000042   240E               LSRS     R4,R4,#+24
   \   00000044   2500               MOVS     R5,R4
    426              State <<= 12;
   \   00000046   2D03               LSLS     R5,R5,#+12
    427              State  ^= *pReg;
   \   00000048   2900               MOVS     R1,R5
   \   0000004A   0098               LDR      R0,[SP, #+0]
   \   0000004C   0568               LDR      R5,[R0, #+0]
   \   0000004E   4D40               EORS     R5,R5,R1
    428              State  |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000050   2800               MOVS     R0,R5
   \   00000052   054D               LDR      R5,??EpCtrlSet_STAT_RX_1  ;; 0x8080
   \   00000054   0543               ORRS     R5,R5,R0
    429              State  &= ~0x4070;  // Clear the toggle bits without STAT_RX (12,13)
   \   00000056   2800               MOVS     R0,R5
   \   00000058   044D               LDR      R5,??EpCtrlSet_STAT_RX_1+0x4  ;; 0xffffbf8f
   \   0000005A   0540               ANDS     R5,R5,R0
    430              *pReg  = State;
   \   0000005C   0098               LDR      R0,[SP, #+0]
   \   0000005E   0560               STR      R5,[R0, #+0]
   \                     ??EpCtrlSet_STAT_RX_0:
   \   00000060   38BC               POP      {R3-R5}
   \   00000062   01BC               POP      {R0}
   \   00000064   0047               BX       R0               ;; return
   \   00000066   C046               Nop      
   \                     ??EpCtrlSet_STAT_RX_1:
   \   00000068   80800000           DC32     0x8080
   \   0000006C   8FBFFFFF           DC32     0xffffbf8f
    431            }
    432          }
    433          
    434          /*************************************************************************
    435           * Function Name: EpCtrlGet_STAT_RX
    436           * Parameters: volatile pInt32U pReg
    437           *
    438           * Return: Int32U
    439           *
    440           * Description: Get EP STAT_RX (OUT)
    441           *
    442           *************************************************************************/

   \                                 In section .text, align 4
    443          inline
    444          Int32U EpCtrlGet_STAT_RX(volatile pInt32U pReg)
    445          {
   \                     EpCtrlGet_STAT_RX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    446          Int32U Data = *pReg &( 0x3UL << 12);
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   C022               MOVS     R2,#+192
   \   0000000A   9201               LSLS     R2,R2,#+6        ;; #+12288
   \   0000000C   0A40               ANDS     R2,R2,R1
   \   0000000E   1000               MOVS     R0,R2
    447            return(Data >> 12);
   \   00000010   000B               LSRS     R0,R0,#+12
   \   00000012   0CBC               POP      {R2,R3}
   \   00000014   7047               BX       LR               ;; return
    448          }
    449          
    450          /*************************************************************************
    451           * Function Name: EpCtrlSet_DTOG_RX
    452           * Parameters: volatile pInt32U pReg, Int32U Data
    453           *
    454           * Return: none
    455           *
    456           * Description: Set DTOG_RX bit
    457           *
    458           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    459          void EpCtrlSet_DTOG_RX(volatile pInt32U pReg, Int32U Data)
    460          {
   \                     EpCtrlSet_DTOG_RX:
   \   00000000   01B5               PUSH     {R0,LR}
    461            Data  = Data?(*pReg ^ (1UL<<14)):*pReg;
   \   00000002   0029               CMP      R1,#+0
   \   00000004   05D0               BEQ      ??EpCtrlSet_DTOG_RX_0
   \   00000006   0098               LDR      R0,[SP, #+0]
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   8021               MOVS     R1,#+128
   \   0000000C   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   0000000E   4140               EORS     R1,R1,R0
   \   00000010   01E0               B        ??EpCtrlSet_DTOG_RX_1
   \                     ??EpCtrlSet_DTOG_RX_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0168               LDR      R1,[R0, #+0]
    462            Data &= ~0x3070;   // Clear the toggle bits without DTOG_RX (14)
   \                     ??EpCtrlSet_DTOG_RX_1:
   \   00000016   0800               MOVS     R0,R1
   \   00000018   0449               LDR      R1,??EpCtrlSet_DTOG_RX_2  ;; 0xffffcf8f
   \   0000001A   0140               ANDS     R1,R1,R0
    463            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   0000001C   0800               MOVS     R0,R1
   \   0000001E   0449               LDR      R1,??EpCtrlSet_DTOG_RX_2+0x4  ;; 0x8080
   \   00000020   0143               ORRS     R1,R1,R0
    464            *pReg = Data;
   \   00000022   0098               LDR      R0,[SP, #+0]
   \   00000024   0160               STR      R1,[R0, #+0]
    465          }
   \   00000026   08BC               POP      {R3}
   \   00000028   01BC               POP      {R0}
   \   0000002A   0047               BX       R0               ;; return
   \                     ??EpCtrlSet_DTOG_RX_2:
   \   0000002C   8FCFFFFF           DC32     0xffffcf8f
   \   00000030   80800000           DC32     0x8080
    466          
    467          /*************************************************************************
    468           * Function Name: EpCtrlToggle_DTOG_RX
    469           * Parameters: volatile Int16U pReg
    470           *
    471           * Return: none
    472           *
    473           * Description: Toggle DTOG_RX bit
    474           *
    475           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    476          void EpCtrlToggle_DTOG_RX(volatile pInt32U pReg)
    477          {
   \                     EpCtrlToggle_DTOG_RX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    478          Int32U Data = *pReg | (1UL << 14);
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   8022               MOVS     R2,#+128
   \   0000000A   D201               LSLS     R2,R2,#+7        ;; #+16384
   \   0000000C   0A43               ORRS     R2,R2,R1
   \   0000000E   1000               MOVS     R0,R2
    479            Data &= ~0x3070;   // Clear the toggle bits without DTOG_TX (14)
   \   00000010   0100               MOVS     R1,R0
   \   00000012   0448               LDR      R0,??EpCtrlToggle_DTOG_RX_0  ;; 0xffffcf8f
   \   00000014   0840               ANDS     R0,R0,R1
    480            Data |= USB_CTRL_CLEAR_ONLY_MASK;
   \   00000016   0100               MOVS     R1,R0
   \   00000018   0348               LDR      R0,??EpCtrlToggle_DTOG_RX_0+0x4  ;; 0x8080
   \   0000001A   0843               ORRS     R0,R0,R1
    481            *pReg = Data;
   \   0000001C   0199               LDR      R1,[SP, #+4]
   \   0000001E   0860               STR      R0,[R1, #+0]
    482          }
   \   00000020   0CBC               POP      {R2,R3}
   \   00000022   7047               BX       LR               ;; return
   \                     ??EpCtrlToggle_DTOG_RX_0:
   \   00000024   8FCFFFFF           DC32     0xffffcf8f
   \   00000028   80800000           DC32     0x8080
    483          
    484          /*************************************************************************
    485           * Function Name: EpCtrlGet_DTOG_RX
    486           * Parameters: volatile pInt32U pReg
    487           *
    488           * Return: Int32U
    489           *
    490           * Description: Get EP DTOG_RX bit (OUT)
    491           *
    492           *************************************************************************/

   \                                 In section .text, align 4
    493          inline
    494          Int32U EpCtrlGet_DTOG_RX(volatile pInt32U pReg)
    495          {
   \                     EpCtrlGet_DTOG_RX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    496            return(((*pReg & (1UL<<14))?1:0));
   \   00000004   0198               LDR      R0,[SP, #+4]
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   8021               MOVS     R1,#+128
   \   0000000A   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   0000000C   0140               ANDS     R1,R1,R0
   \   0000000E   481E               SUBS     R0,R1,#+1
   \   00000010   8041               SBCS     R0,R0,R0
   \   00000012   C043               MVNS     R0,R0
   \   00000014   C00F               LSRS     R0,R0,#+31
   \   00000016   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000018   000E               LSRS     R0,R0,#+24
   \   0000001A   0CBC               POP      {R2,R3}
   \   0000001C   7047               BX       LR               ;; return
    497          }
    498          
    499          /*************************************************************************
    500           * Function Name: EpCtrlClr_CTR_RX
    501           * Parameters: volatile pInt32U pReg
    502           *
    503           * Return: none
    504           *
    505           * Description: Clear EP CTR_RX bit (OUT)
    506           *
    507           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    508          void EpCtrlClr_CTR_RX(volatile pInt32U pReg)
    509          {
   \                     EpCtrlClr_CTR_RX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    510          Int32U Data = *pReg;
   \   00000004   0199               LDR      R1,[SP, #+4]
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   0800               MOVS     R0,R1
    511            Data &= ~(USB_CTRL_TOGGLE_MASK | 1UL << 15);
   \   0000000A   0100               MOVS     R1,R0
   \   0000000C   0448               LDR      R0,??EpCtrlClr_CTR_RX_0  ;; 0xffff0f8f
   \   0000000E   0840               ANDS     R0,R0,R1
    512            Data |= 1UL << 7;   // Set TX_CTR
   \   00000010   0100               MOVS     R1,R0
   \   00000012   8020               MOVS     R0,#+128
   \   00000014   0843               ORRS     R0,R0,R1
    513            *pReg = Data;
   \   00000016   0199               LDR      R1,[SP, #+4]
   \   00000018   0860               STR      R0,[R1, #+0]
    514          }
   \   0000001A   0CBC               POP      {R2,R3}
   \   0000001C   7047               BX       LR               ;; return
   \   0000001E   C046               Nop      
   \                     ??EpCtrlClr_CTR_RX_0:
   \   00000020   8F0FFFFF           DC32     0xffff0f8f
    515          
    516          /*************************************************************************
    517           * Function Name: EpCtrlGet_CTR_RX
    518           * Parameters: volatile pInt32U pReg
    519           *
    520           * Return: Int32U
    521           *
    522           * Description: Get EP CTR_RX bit (OUT)
    523           *
    524           *************************************************************************/

   \                                 In section .text, align 4
    525          inline
    526          Int32U EpCtrlGet_CTR_RX(volatile pInt32U pReg)
    527          {
   \                     EpCtrlGet_CTR_RX:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
    528            return(*pReg & (0x1UL << 15)?1:0);
   \   00000004   0198               LDR      R0,[SP, #+4]
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   8021               MOVS     R1,#+128
   \   0000000A   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   0000000C   0140               ANDS     R1,R1,R0
   \   0000000E   481E               SUBS     R0,R1,#+1
   \   00000010   8041               SBCS     R0,R0,R0
   \   00000012   C043               MVNS     R0,R0
   \   00000014   C00F               LSRS     R0,R0,#+31
   \   00000016   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000018   000E               LSRS     R0,R0,#+24
   \   0000001A   0CBC               POP      {R2,R3}
   \   0000001C   7047               BX       LR               ;; return
    529          }
    530          
    531          /*************************************************************************
    532           * Function Name: USB_Init
    533           * Parameters: Int32U IntrSlotHi, Int32U IntrSlotLo,
    534           *             CommUserFpnt_t UserCoreConfigure
    535           *
    536           * Return: none
    537           *
    538           * Description: Init USB
    539           *
    540           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    541          void USB_Init(Int32U IntrSlotHi, Int32U IntrSlotLo,
    542                        CommUserFpnt_t UserCoreConfigure)
    543          {
   \                     USB_Init:
   \   00000000   73B5               PUSH     {R0,R1,R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    544          EIC_IRQInitTypeDef EIC_IRQInitStructure;
    545          
    546            // Init variables
    547            UsbEp0Ctrl.EpStatus.Status = UsbSetupPhase;
   \   00000008   2548               LDR      R0,??USB_Init_0  ;; UsbEp0Ctrl + 8
   \   0000000A   0221               MOVS     R1,#+2
   \   0000000C   0170               STRB     R1,[R0, #+0]
    548            UsbCoreT9Fun = NULL;
   \   0000000E   2548               LDR      R0,??USB_Init_0+0x4  ;; UsbCoreT9Fun
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0160               STR      R1,[R0, #+0]
    549            UserCoreConfigure(NULL);
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       __iar_via_R6
    550            USB_UserFuncRegistering(UserCoreConfigure,UsbUserConfigure);
   \   0000001A   2621               MOVS     R1,#+38
   \   0000001C   3000               MOVS     R0,R6
   \   0000001E   ........           BL       USB_UserFuncRegistering
    551            UsbSetDevState(UsbDevStatusUnknow);
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   ........           BL       UsbSetDevState
    552          
    553            // Reset USB Engine
    554            MRCC_PeripheralSWResetConfig(MRCC_Peripheral_USB,ENABLE);
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   8020               MOVS     R0,#+128
   \   0000002C   8000               LSLS     R0,R0,#+2        ;; #+512
   \   0000002E   ........           BL       MRCC_PeripheralSWResetConfig
    555            // Init USB Clock
    556            MRCC_PeripheralClockConfig(MRCC_Peripheral_USB,ENABLE);
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   8020               MOVS     R0,#+128
   \   00000036   8000               LSLS     R0,R0,#+2        ;; #+512
   \   00000038   ........           BL       MRCC_PeripheralClockConfig
    557            // Release reset USB Engine
    558            MRCC_PeripheralSWResetConfig(MRCC_Peripheral_USB,DISABLE);
   \   0000003C   0021               MOVS     R1,#+0
   \   0000003E   8020               MOVS     R0,#+128
   \   00000040   8000               LSLS     R0,R0,#+2        ;; #+512
   \   00000042   ........           BL       MRCC_PeripheralSWResetConfig
    559          
    560            // Enable 48MHz clock
    561          #if USB_EXT_CLK > 0
    562          GPIO_InitTypeDef  GPIO_InitStructure;
    563            // Enable GPIO clocks
    564            MRCC_PeripheralClockConfig(MRCC_Peripheral_GPIO, ENABLE);
    565            // Release GPIO reset
    566            MRCC_PeripheralSWResetConfig(MRCC_Peripheral_GPIO,DISABLE);
    567            // Assign the P0.19 for a clock input of the USB engine
    568            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    569            GPIO_InitStructure.GPIO_Pin = 1UL<<19;
    570            GPIO_Init(GPIO0,&GPIO_InitStructure);
    571            MRCC_CKUSBConfig(MRCC_CKUSB_External);
    572          #else
    573            MRCC_CKUSBConfig(MRCC_CKUSB_Internal);
   \   00000046   1848               LDR      R0,??USB_Init_0+0x8  ;; 0xffbfffff
   \   00000048   ........           BL       MRCC_CKUSBConfig
    574          #endif // USB_EXT_CLK > 0
    575          
    576            // Force USB Reset &  Disable USB interrupts
    577            USB_CNTR = 1;
   \   0000004C   1748               LDR      R0,??USB_Init_0+0xC  ;; 0xffffa840
   \   0000004E   0121               MOVS     R1,#+1
   \   00000050   0180               STRH     R1,[R0, #+0]
    578          
    579            // USB interrupt connect to VIC
    580          #if USB_HIGH_PRIORITY_EVENT > 0
    581            EIC_IRQInitStructure.EIC_IRQChannel = USB_HP_IRQChannel;
   \   00000052   6846               MOV      R0,SP
   \   00000054   1821               MOVS     R1,#+24
   \   00000056   0170               STRB     R1,[R0, #+0]
    582            EIC_IRQInitStructure.EIC_IRQChannelPriority = IntrSlotHi;
   \   00000058   6846               MOV      R0,SP
   \   0000005A   2100               MOVS     R1,R4
   \   0000005C   4170               STRB     R1,[R0, #+1]
    583            EIC_IRQInitStructure.EIC_IRQChannelCmd = ENABLE;
   \   0000005E   6846               MOV      R0,SP
   \   00000060   0121               MOVS     R1,#+1
   \   00000062   8170               STRB     R1,[R0, #+2]
    584            EIC_IRQInit(&EIC_IRQInitStructure);
   \   00000064   6846               MOV      R0,SP
   \   00000066   ........           BL       EIC_IRQInit
    585          #endif // USB_HIGH_PRIORITY_EVENT > 0
    586          
    587            EIC_IRQInitStructure.EIC_IRQChannel = USB_LP_IRQChannel;
   \   0000006A   6846               MOV      R0,SP
   \   0000006C   1721               MOVS     R1,#+23
   \   0000006E   0170               STRB     R1,[R0, #+0]
    588            EIC_IRQInitStructure.EIC_IRQChannelPriority = IntrSlotLo;
   \   00000070   6846               MOV      R0,SP
   \   00000072   2900               MOVS     R1,R5
   \   00000074   4170               STRB     R1,[R0, #+1]
    589            EIC_IRQInitStructure.EIC_IRQChannelCmd = ENABLE;
   \   00000076   6846               MOV      R0,SP
   \   00000078   0121               MOVS     R1,#+1
   \   0000007A   8170               STRB     R1,[R0, #+2]
    590            EIC_IRQInit(&EIC_IRQInitStructure);
   \   0000007C   6846               MOV      R0,SP
   \   0000007E   ........           BL       EIC_IRQInit
    591          
    592            // Disconnect device
    593            USB_ConnectRes(FALSE);
   \   00000082   0020               MOVS     R0,#+0
   \   00000084   ........           BL       USB_ConnectRes
    594            // Init controls endpoints
    595            USB_HwReset();
   \   00000088   ........           BL       USB_HwReset
    596            // Clear spurious pending interrupt
    597            USB_ISTR = 0;
   \   0000008C   0848               LDR      R0,??USB_Init_0+0x10  ;; 0xffffa844
   \   0000008E   0021               MOVS     R1,#+0
   \   00000090   0180               STRH     R1,[R0, #+0]
    598            // Enable Device interrupts
    599            USB_CNTR = bmCTRM | bmRESETM | bmSUSPM | bmWKUPM |
    600                   (USB_SOF_EVENT   ? bmSOFM  : 0) |
    601                   (USB_ERROR_EVENT ? bmERRM  : 0) |
    602                   ( USB_DOVR_EVENT ? bmDOVRM : 0) ;
   \   00000092   0648               LDR      R0,??USB_Init_0+0xC  ;; 0xffffa840
   \   00000094   9C21               MOVS     R1,#+156
   \   00000096   0902               LSLS     R1,R1,#+8        ;; #+39936
   \   00000098   0180               STRH     R1,[R0, #+0]
    603          }
   \   0000009A   7CBC               POP      {R2-R6}
   \   0000009C   01BC               POP      {R0}
   \   0000009E   0047               BX       R0               ;; return
   \                     ??USB_Init_0:
   \   000000A0   ........           DC32     UsbEp0Ctrl + 8
   \   000000A4   ........           DC32     UsbCoreT9Fun
   \   000000A8   FFFFBFFF           DC32     0xffbfffff
   \   000000AC   40A8FFFF           DC32     0xffffa840
   \   000000B0   44A8FFFF           DC32     0xffffa844
   \   000000B4                      REQUIRE _A_USB_CNTR
   \   000000B4                      REQUIRE _A_USB_ISTR
    604          
    605          /*************************************************************************
    606           * Function Name: USB_HwReset
    607           * Parameters: none
    608           *
    609           * Return: none
    610           *
    611           * Description: Reset Usb engine
    612           *
    613           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    614          void USB_HwReset (void)
    615          {
   \                     USB_HwReset:
   \   00000000   10B5               PUSH     {R4,LR}
    616          Int32U Count;
    617          
    618            for(Count = 0; Count < ENP_MAX_NUMB; Count++)
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??USB_HwReset_0:
   \   00000006   202C               CMP      R4,#+32
   \   00000008   06D2               BCS      ??USB_HwReset_1
    619            {
    620              EpInfo[Count].pEpCtrl = NULL;
   \   0000000A   1420               MOVS     R0,#+20
   \   0000000C   6043               MULS     R0,R4,R0
   \   0000000E   2C49               LDR      R1,??USB_HwReset_2  ;; EpInfo
   \   00000010   0022               MOVS     R2,#+0
   \   00000012   0A50               STR      R2,[R1, R0]
    621            }
   \   00000014   641C               ADDS     R4,R4,#+1
   \   00000016   F6E7               B        ??USB_HwReset_0
    622            // Free entire USB packet memory
    623            for (Count = 0; Count < EP_MAX_SLOTS*2; Count++)
   \                     ??USB_HwReset_1:
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   0400               MOVS     R4,R0
   \                     ??USB_HwReset_3:
   \   0000001C   102C               CMP      R4,#+16
   \   0000001E   07D2               BCS      ??USB_HwReset_4
    624            {
    625              PacketMemBuff[Count].Size = 0;
   \   00000020   0C20               MOVS     R0,#+12
   \   00000022   6043               MULS     R0,R4,R0
   \   00000024   2749               LDR      R1,??USB_HwReset_2+0x4  ;; PacketMemBuff
   \   00000026   0818               ADDS     R0,R1,R0
   \   00000028   0021               MOVS     R1,#+0
   \   0000002A   8180               STRH     R1,[R0, #+4]
    626            }
   \   0000002C   641C               ADDS     R4,R4,#+1
   \   0000002E   F5E7               B        ??USB_HwReset_3
    627          
    628            // Resume delay counter
    629            DlyCnt = 0;
   \                     ??USB_HwReset_4:
   \   00000030   2548               LDR      R0,??USB_HwReset_2+0x8  ;; DlyCnt
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   0160               STR      R1,[R0, #+0]
    630          
    631            // Filter disabled
    632            CFG_USBFilterConfig(CFG_USBFilter_Disable);
   \   00000036   2548               LDR      R0,??USB_HwReset_2+0xC  ;; 0xfffffdff
   \   00000038   ........           BL       CFG_USBFilterConfig
    633            // Clear USB Reset
    634            USB_CNTR_bit.FRES   = 0;
   \   0000003C   2448               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   0000003E   0088               LDRH     R0,[R0, #+0]
   \   00000040   2449               LDR      R1,??USB_HwReset_2+0x14  ;; 0xfffe
   \   00000042   0140               ANDS     R1,R1,R0
   \   00000044   2248               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   00000046   0180               STRH     R1,[R0, #+0]
    635            // Exit from suspend
    636            USB_CNTR_bit.ESOFM  = 0;
   \   00000048   2148               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   0000004A   0088               LDRH     R0,[R0, #+0]
   \   0000004C   2249               LDR      R1,??USB_HwReset_2+0x18  ;; 0xfeff
   \   0000004E   0140               ANDS     R1,R1,R0
   \   00000050   1F48               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   00000052   0180               STRH     R1,[R0, #+0]
    637            USB_CNTR_bit.RESUME = 0;
   \   00000054   1E48               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   00000056   0088               LDRH     R0,[R0, #+0]
   \   00000058   2049               LDR      R1,??USB_HwReset_2+0x1C  ;; 0xffef
   \   0000005A   0140               ANDS     R1,R1,R0
   \   0000005C   1C48               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   0000005E   0180               STRH     R1,[R0, #+0]
    638            USB_CNTR_bit.LPMODE = 0;
   \   00000060   1B48               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   00000062   0088               LDRH     R0,[R0, #+0]
   \   00000064   1E49               LDR      R1,??USB_HwReset_2+0x20  ;; 0xfffb
   \   00000066   0140               ANDS     R1,R1,R0
   \   00000068   1948               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   0000006A   0180               STRH     R1,[R0, #+0]
    639            USB_CNTR_bit.FSUSP  = 0;  // Must be 0
   \   0000006C   1848               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   0000006E   0088               LDRH     R0,[R0, #+0]
   \   00000070   1C49               LDR      R1,??USB_HwReset_2+0x24  ;; 0xfff7
   \   00000072   0140               ANDS     R1,R1,R0
   \   00000074   1648               LDR      R0,??USB_HwReset_2+0x10  ;; 0xffffa840
   \   00000076   0180               STRH     R1,[R0, #+0]
    640            // USB_Configure
    641            USB_Configure(FALSE);
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   ........           BL       USB_Configure
    642            // Set Buffer table address
    643            USB_BTABLE = USB_OffsetOfDBT;
   \   0000007E   1A48               LDR      R0,??USB_HwReset_2+0x28  ;; SFE(USB_PACKET_MEMORY)
   \   00000080   1A49               LDR      R1,??USB_HwReset_2+0x2C  ;; SFB(USB_PACKET_MEMORY)
   \   00000082   401A               SUBS     R0,R0,R1
   \   00000084   4008               LSRS     R0,R0,#+1
   \   00000086   1838               SUBS     R0,R0,#+24
   \   00000088   1949               LDR      R1,??USB_HwReset_2+0x30  ;; 0xfff8
   \   0000008A   0140               ANDS     R1,R1,R0
   \   0000008C   1948               LDR      R0,??USB_HwReset_2+0x34  ;; 0xffffa850
   \   0000008E   0180               STRH     R1,[R0, #+0]
    644            // Init Packet memory table
    645            pPacketMemUse = NULL;
   \   00000090   1948               LDR      R0,??USB_HwReset_2+0x38  ;; pPacketMemUse
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   0160               STR      R1,[R0, #+0]
    646            // Endpoint Init
    647            USB_UserFuncRegistering((UserFunc_t)UsbCtrlEp,UsbEp0Out);
   \   00000096   0021               MOVS     R1,#+0
   \   00000098   1848               LDR      R0,??USB_HwReset_2+0x3C  ;; UsbCtrlEp
   \   0000009A   ........           BL       USB_UserFuncRegistering
    648            USB_UserFuncRegistering((UserFunc_t)UsbCtrlEp,UsbEp0In);
   \   0000009E   0121               MOVS     R1,#+1
   \   000000A0   1648               LDR      R0,??USB_HwReset_2+0x3C  ;; UsbCtrlEp
   \   000000A2   ........           BL       USB_UserFuncRegistering
    649            USB_RealizeEp(CTRL_ENP_IN,Ep0MaxSize,EP_CTRL,EP_SLOT0);
   \   000000A6   0023               MOVS     R3,#+0
   \   000000A8   0122               MOVS     R2,#+1
   \   000000AA   0821               MOVS     R1,#+8
   \   000000AC   0120               MOVS     R0,#+1
   \   000000AE   ........           BL       USB_RealizeEp
    650            // Set address 0
    651            USB_SetDefAdd();
   \   000000B2   0020               MOVS     R0,#+0
   \   000000B4   ........           BL       USB_SetAdd
    652          }
   \   000000B8   10BC               POP      {R4}
   \   000000BA   01BC               POP      {R0}
   \   000000BC   0047               BX       R0               ;; return
   \   000000BE   C046               Nop      
   \                     ??USB_HwReset_2:
   \   000000C0   ........           DC32     EpInfo
   \   000000C4   ........           DC32     PacketMemBuff
   \   000000C8   ........           DC32     DlyCnt
   \   000000CC   FFFDFFFF           DC32     0xfffffdff
   \   000000D0   40A8FFFF           DC32     0xffffa840
   \   000000D4   FEFF0000           DC32     0xfffe
   \   000000D8   FFFE0000           DC32     0xfeff
   \   000000DC   EFFF0000           DC32     0xffef
   \   000000E0   FBFF0000           DC32     0xfffb
   \   000000E4   F7FF0000           DC32     0xfff7
   \   000000E8   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   000000EC   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   000000F0   F8FF0000           DC32     0xfff8
   \   000000F4   50A8FFFF           DC32     0xffffa850
   \   000000F8   ........           DC32     pPacketMemUse
   \   000000FC   ........           DC32     UsbCtrlEp
   \   00000100                      REQUIRE _A_USB_CNTR
   \   00000100                      REQUIRE USB_BTABLE
    653          
    654          /*************************************************************************
    655           * Function Name: UsbMalloc
    656           * Parameters: none
    657           *
    658           * Return: void *
    659           *
    660           * Description: Return address of free element of the PacketMemBuff massive
    661           *
    662           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    663          static
    664          void * UsbMalloc(void)
    665          {
   \                     UsbMalloc:
   \   00000000   01B5               PUSH     {R0,LR}
    666          Int32U Count;
    667            for (Count = 0; Count < EP_MAX_SLOTS*2; Count++)
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0100               MOVS     R1,R0
   \                     ??UsbMalloc_0:
   \   00000006   1029               CMP      R1,#+16
   \   00000008   0DD2               BCS      ??UsbMalloc_1
    668            {
    669              if (PacketMemBuff[Count].Size == 0)
   \   0000000A   0C20               MOVS     R0,#+12
   \   0000000C   4843               MULS     R0,R1,R0
   \   0000000E   084A               LDR      R2,??UsbMalloc_2  ;; PacketMemBuff
   \   00000010   1018               ADDS     R0,R2,R0
   \   00000012   8088               LDRH     R0,[R0, #+4]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   04D1               BNE      ??UsbMalloc_3
    670              {
    671                return(&PacketMemBuff[Count]);
   \   00000018   0C20               MOVS     R0,#+12
   \   0000001A   4143               MULS     R1,R0,R1
   \   0000001C   0448               LDR      R0,??UsbMalloc_2  ;; PacketMemBuff
   \   0000001E   4018               ADDS     R0,R0,R1
   \   00000020   02E0               B        ??UsbMalloc_4
    672              }
    673            }
   \                     ??UsbMalloc_3:
   \   00000022   491C               ADDS     R1,R1,#+1
   \   00000024   EFE7               B        ??UsbMalloc_0
    674            return(NULL);
   \                     ??UsbMalloc_1:
   \   00000026   0020               MOVS     R0,#+0
   \                     ??UsbMalloc_4:
   \   00000028   08BC               POP      {R3}
   \   0000002A   02BC               POP      {R1}
   \   0000002C   0847               BX       R1               ;; return
   \   0000002E   C046               Nop      
   \                     ??UsbMalloc_2:
   \   00000030   ........           DC32     PacketMemBuff
    675          }
    676          
    677          /*************************************************************************
    678           * Function Name: UsbFree
    679           * Parameters: pPacketMemUse_t pPntr
    680           *
    681           * Return: none
    682           *
    683           * Description: Free element of the PacketMemBuff massive
    684           *
    685           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    686          inline static
    687          void UsbFree(pPacketMemUse_t pPntr)
    688          {
    689            pPntr->Size = 0;
   \                     UsbFree:
   \   00000000   0021               MOVS     R1,#+0
   \   00000002   8180               STRH     R1,[R0, #+4]
    690          }
   \   00000004   7047               BX       LR               ;; return
    691          
    692          /*************************************************************************
    693           * Function Name: USB_AllocateBuffer
    694           * Parameters: pInt16U pOffset,Int32U PacketSize,
    695           *             USB_Endpoint_t EndPoint
    696           *
    697           * Return: Boolean
    698           *
    699           * Description: Allocate a new buffer
    700           *
    701           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    702          static
    703          Boolean USB_AllocateBuffer (pInt16U pOffset,pInt32U pPacketSize,
    704                                      USB_Endpoint_t EndPoint)
    705          {
   \                     USB_AllocateBuffer:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    706          pPacketMemUse_t  pPacketMem = pPacketMemUse, pPacketMemNext, pPacketMemUseNew;
   \   00000004   2C48               LDR      R0,??USB_AllocateBuffer_0  ;; pPacketMemUse
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   0700               MOVS     R7,R0
    707          //Int32U MaxPacketSize = *pPacketSize+4;  // for CRC
    708          Int32U MaxPacketSize = *pPacketSize;
   \   0000000A   0198               LDR      R0,[SP, #+4]
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   0600               MOVS     R6,R0
    709            if(MaxPacketSize > 62)
   \   00000010   3F2E               CMP      R6,#+63
   \   00000012   03D3               BCC      ??USB_AllocateBuffer_1
    710            {
    711              // coarse-granularity size alignment by 32
    712              MaxPacketSize +=  (32-1);
   \   00000014   1F36               ADDS     R6,R6,#+31
    713              MaxPacketSize &= ~(32-1);
   \   00000016   1F20               MOVS     R0,#+31
   \   00000018   8643               BICS     R6,R6,R0
   \   0000001A   02E0               B        ??USB_AllocateBuffer_2
    714            }
    715            else
    716            {
    717              // fine-granularity size alignment by 2
    718              MaxPacketSize +=  (2-1);
   \                     ??USB_AllocateBuffer_1:
   \   0000001C   761C               ADDS     R6,R6,#+1
    719              MaxPacketSize &= ~(2-1);
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   8643               BICS     R6,R6,R0
    720            }
    721            *pOffset = 0;
   \                     ??USB_AllocateBuffer_2:
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   2080               STRH     R0,[R4, #+0]
    722            // Finding free memory block from the USB packet memory
    723            while(pPacketMem != NULL)
   \                     ??USB_AllocateBuffer_3:
   \   00000026   002F               CMP      R7,#+0
   \   00000028   17D0               BEQ      ??USB_AllocateBuffer_4
    724            {
    725              *pOffset = pPacketMem->Start + pPacketMem->Size;
   \   0000002A   7888               LDRH     R0,[R7, #+2]
   \   0000002C   B988               LDRH     R1,[R7, #+4]
   \   0000002E   4018               ADDS     R0,R0,R1
   \   00000030   2080               STRH     R0,[R4, #+0]
    726              // Offset alignment by 4
    727              *pOffset += (4-1);
   \   00000032   2088               LDRH     R0,[R4, #+0]
   \   00000034   C01C               ADDS     R0,R0,#+3
   \   00000036   2080               STRH     R0,[R4, #+0]
    728              *pOffset &= ~(4-1);
   \   00000038   2088               LDRH     R0,[R4, #+0]
   \   0000003A   2049               LDR      R1,??USB_AllocateBuffer_0+0x4  ;; 0xfffc
   \   0000003C   0140               ANDS     R1,R1,R0
   \   0000003E   2180               STRH     R1,[R4, #+0]
    729              pPacketMemNext = pPacketMem->pNext;
   \   00000040   B868               LDR      R0,[R7, #+8]
   \   00000042   0090               STR      R0,[SP, #+0]
    730              if((pPacketMem->pNext == NULL) ||
    731                 (pPacketMemNext->Start >= *pOffset + MaxPacketSize))
   \   00000044   B868               LDR      R0,[R7, #+8]
   \   00000046   0028               CMP      R0,#+0
   \   00000048   07D0               BEQ      ??USB_AllocateBuffer_4
   \   0000004A   0098               LDR      R0,[SP, #+0]
   \   0000004C   4088               LDRH     R0,[R0, #+2]
   \   0000004E   2188               LDRH     R1,[R4, #+0]
   \   00000050   8919               ADDS     R1,R1,R6
   \   00000052   8842               CMP      R0,R1
   \   00000054   01D2               BCS      ??USB_AllocateBuffer_4
    732              {
    733                break;
    734              }
    735              pPacketMem = pPacketMem->pNext;
   \   00000056   BF68               LDR      R7,[R7, #+8]
   \   00000058   E5E7               B        ??USB_AllocateBuffer_3
    736            }
    737            // Is block find?
    738            if((*pOffset + MaxPacketSize) >=
    739               (((Int32U)__segment_size("USB_PACKET_MEMORY") -
    740                 sizeof(USB_BuffDeskTbl_t) * (MaxIndOfRealizeEp+1))&~7))
   \                     ??USB_AllocateBuffer_4:
   \   0000005A   2088               LDRH     R0,[R4, #+0]
   \   0000005C   8019               ADDS     R0,R0,R6
   \   0000005E   1849               LDR      R1,??USB_AllocateBuffer_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   00000060   184A               LDR      R2,??USB_AllocateBuffer_0+0xC  ;; SFB(USB_PACKET_MEMORY)
   \   00000062   891A               SUBS     R1,R1,R2
   \   00000064   1839               SUBS     R1,R1,#+24
   \   00000066   0722               MOVS     R2,#+7
   \   00000068   9143               BICS     R1,R1,R2
   \   0000006A   8842               CMP      R0,R1
   \   0000006C   01D3               BCC      ??USB_AllocateBuffer_5
    741            {
    742              // Not enough space in the USB packet memory
    743              return(FALSE);
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   1EE0               B        ??USB_AllocateBuffer_6
    744            }
    745          
    746            pPacketMemUseNew = UsbMalloc();
   \                     ??USB_AllocateBuffer_5:
   \   00000072   ........           BL       UsbMalloc
   \   00000076   0500               MOVS     R5,R0
    747            if(pPacketMemUseNew == NULL)
   \   00000078   002D               CMP      R5,#+0
   \   0000007A   01D1               BNE      ??USB_AllocateBuffer_7
    748            {
    749              // too many point are realized
    750              return(FALSE);
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   17E0               B        ??USB_AllocateBuffer_6
    751            }
    752            if(pPacketMemUse == NULL)
   \                     ??USB_AllocateBuffer_7:
   \   00000080   0D48               LDR      R0,??USB_AllocateBuffer_0  ;; pPacketMemUse
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   0028               CMP      R0,#+0
   \   00000086   06D1               BNE      ??USB_AllocateBuffer_8
    753            {
    754              pPacketMemUse = pPacketMemUseNew;
   \   00000088   0B48               LDR      R0,??USB_AllocateBuffer_0  ;; pPacketMemUse
   \   0000008A   0560               STR      R5,[R0, #+0]
    755              pPacketMemUse->pNext = NULL;
   \   0000008C   0A48               LDR      R0,??USB_AllocateBuffer_0  ;; pPacketMemUse
   \   0000008E   0068               LDR      R0,[R0, #+0]
   \   00000090   0021               MOVS     R1,#+0
   \   00000092   8160               STR      R1,[R0, #+8]
   \   00000094   02E0               B        ??USB_AllocateBuffer_9
    756            }
    757            else
    758            {
    759              pPacketMemUseNew->pNext  = pPacketMem->pNext;
   \                     ??USB_AllocateBuffer_8:
   \   00000096   B868               LDR      R0,[R7, #+8]
   \   00000098   A860               STR      R0,[R5, #+8]
    760              pPacketMem->pNext        = pPacketMemUseNew;
   \   0000009A   BD60               STR      R5,[R7, #+8]
    761            }
    762            pPacketMemUseNew->RpAddr = EndPoint;
   \                     ??USB_AllocateBuffer_9:
   \   0000009C   6846               MOV      R0,SP
   \   0000009E   007A               LDRB     R0,[R0, #+8]
   \   000000A0   2870               STRB     R0,[R5, #+0]
    763            pPacketMemUseNew->Start  = *pOffset;
   \   000000A2   2088               LDRH     R0,[R4, #+0]
   \   000000A4   6880               STRH     R0,[R5, #+2]
    764            pPacketMemUseNew->Size   = MaxPacketSize;
   \   000000A6   3000               MOVS     R0,R6
   \   000000A8   A880               STRH     R0,[R5, #+4]
    765            *pPacketSize = MaxPacketSize;
   \   000000AA   0198               LDR      R0,[SP, #+4]
   \   000000AC   0660               STR      R6,[R0, #+0]
    766            return(TRUE);
   \   000000AE   0120               MOVS     R0,#+1
   \                     ??USB_AllocateBuffer_6:
   \   000000B0   FEBC               POP      {R1-R7}
   \   000000B2   02BC               POP      {R1}
   \   000000B4   0847               BX       R1               ;; return
   \   000000B6   C046               Nop      
   \                     ??USB_AllocateBuffer_0:
   \   000000B8   ........           DC32     pPacketMemUse
   \   000000BC   FCFF0000           DC32     0xfffc
   \   000000C0   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   000000C4   ........           DC32     SFB(USB_PACKET_MEMORY)
    767          }
    768          
    769          /*************************************************************************
    770           * Function Name: USB_ReleaseBuffer
    771           * Parameters: USB_Endpoint_t EndPoint
    772           *
    773           * Return: none
    774           *
    775           * Description: Release the buffer/s
    776           *
    777           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    778          static
    779          void USB_ReleaseBuffer (USB_Endpoint_t EndPoint)
    780          {
   \                     USB_ReleaseBuffer:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    781          pPacketMemUse_t  pPacketMem, pPacketMemPrev;
    782            pPacketMem = pPacketMemUse;
   \   00000004   0C48               LDR      R0,??USB_ReleaseBuffer_0  ;; pPacketMemUse
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   0500               MOVS     R5,R0
    783            while(pPacketMem != NULL)
   \                     ??USB_ReleaseBuffer_1:
   \   0000000A   002D               CMP      R5,#+0
   \   0000000C   10D0               BEQ      ??USB_ReleaseBuffer_2
    784            {
    785              if(pPacketMem->RpAddr == EndPoint)
   \   0000000E   2878               LDRB     R0,[R5, #+0]
   \   00000010   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000012   240E               LSRS     R4,R4,#+24
   \   00000014   A042               CMP      R0,R4
   \   00000016   07D1               BNE      ??USB_ReleaseBuffer_3
    786              {
    787                pPacketMemPrev->pNext = pPacketMem->pNext;
   \   00000018   A868               LDR      R0,[R5, #+8]
   \   0000001A   B060               STR      R0,[R6, #+8]
    788                UsbFree(pPacketMem);
   \   0000001C   2800               MOVS     R0,R5
   \   0000001E   ........           BL       UsbFree
    789                pPacketMem = pPacketMemPrev->pNext;
   \   00000022   B068               LDR      R0,[R6, #+8]
   \   00000024   0500               MOVS     R5,R0
   \   00000026   01E0               B        ??USB_ReleaseBuffer_4
    790              }
    791              else
    792              {
    793                pPacketMemPrev = pPacketMem;
   \                     ??USB_ReleaseBuffer_3:
   \   00000028   2E00               MOVS     R6,R5
    794                pPacketMem = pPacketMem->pNext;
   \   0000002A   AD68               LDR      R5,[R5, #+8]
    795              }
    796              if (pPacketMem == NULL)
   \                     ??USB_ReleaseBuffer_4:
   \   0000002C   002D               CMP      R5,#+0
   \   0000002E   ECD1               BNE      ??USB_ReleaseBuffer_1
    797              {
    798                break;
    799              }
    800            }
    801          }
   \                     ??USB_ReleaseBuffer_2:
   \   00000030   70BC               POP      {R4-R6}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
   \   00000036   C046               Nop      
   \                     ??USB_ReleaseBuffer_0:
   \   00000038   ........           DC32     pPacketMemUse
    802          
    803          /*************************************************************************
    804           * Function Name: USB_RealizeEp
    805           * Parameters: USB_Endpoint_t EndPoint, Int32U MaxPacketSize,
    806           *             EpType_t EpKind, EpSlot_t EpSlot,
    807           *
    808           * Return: USB_ErrorCodes_t
    809           *
    810           * Description: Enable or disable endpoint
    811           *
    812           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    813          USB_ErrorCodes_t USB_RealizeEp( USB_Endpoint_t EndPoint, Int32U MaxPacketSize,
    814                                          EpType_t EpType, EpSlot_t EpSlot)
    815          {
   \                     USB_RealizeEp:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0700               MOVS     R7,R0
   \   00000006   0C00               MOVS     R4,R1
   \   00000008   1500               MOVS     R5,R2
   \   0000000A   1E00               MOVS     R6,R3
    816          volatile pInt32U pEpCtrlBaseAddr;
    817          Int16U Offset,Offset1;
    818          Int32U MaxPacketSizeTmp;
    819            if (MaxPacketSize)
   \   0000000C   002C               CMP      R4,#+0
   \   0000000E   00D1               BNE      .+4
   \   00000010   AEE2               B        ??USB_RealizeEp_0
    820            {
    821              // Allocate packet memory for EP buffer/s
    822              // calculate actual size only for the OUT EPs
    823              MaxPacketSizeTmp = MaxPacketSize;
   \   00000012   0394               STR      R4,[SP, #+12]
    824              if(!USB_AllocateBuffer(&Offset,&MaxPacketSizeTmp,EndPoint))
   \   00000014   3A00               MOVS     R2,R7
   \   00000016   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000018   120E               LSRS     R2,R2,#+24
   \   0000001A   03A9               ADD      R1,SP,#+12
   \   0000001C   01A8               ADD      R0,SP,#+4
   \   0000001E   801C               ADDS     R0,R0,#+2
   \   00000020   ........           BL       USB_AllocateBuffer
   \   00000024   0028               CMP      R0,#+0
   \   00000026   01D1               BNE      ??USB_RealizeEp_1
    825              {
    826                return(USB_MEMORY_FULL);
   \   00000028   0420               MOVS     R0,#+4
   \   0000002A   C8E2               B        ??USB_RealizeEp_2
    827              }
    828              if((EpType == EP_ISO) || (EpType == EP_BULK_DOUB_BUF) || (EpType == EP_CTRL))
   \                     ??USB_RealizeEp_1:
   \   0000002C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000002E   2D0E               LSRS     R5,R5,#+24
   \   00000030   022D               CMP      R5,#+2
   \   00000032   07D0               BEQ      ??USB_RealizeEp_3
   \   00000034   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000036   2D0E               LSRS     R5,R5,#+24
   \   00000038   042D               CMP      R5,#+4
   \   0000003A   03D0               BEQ      ??USB_RealizeEp_3
   \   0000003C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000003E   2D0E               LSRS     R5,R5,#+24
   \   00000040   012D               CMP      R5,#+1
   \   00000042   10D1               BNE      ??USB_RealizeEp_4
    829              {
    830                // Allocate packet second buffer
    831                MaxPacketSizeTmp = MaxPacketSize;
   \                     ??USB_RealizeEp_3:
   \   00000044   0394               STR      R4,[SP, #+12]
    832                if(!USB_AllocateBuffer(&Offset1,&MaxPacketSizeTmp,EndPoint))
   \   00000046   3A00               MOVS     R2,R7
   \   00000048   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   0000004A   120E               LSRS     R2,R2,#+24
   \   0000004C   03A9               ADD      R1,SP,#+12
   \   0000004E   01A8               ADD      R0,SP,#+4
   \   00000050   ........           BL       USB_AllocateBuffer
   \   00000054   0028               CMP      R0,#+0
   \   00000056   06D1               BNE      ??USB_RealizeEp_4
    833                {
    834                  // release buffer
    835                  USB_ReleaseBuffer(EndPoint);
   \   00000058   3800               MOVS     R0,R7
   \   0000005A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005C   000E               LSRS     R0,R0,#+24
   \   0000005E   ........           BL       USB_ReleaseBuffer
    836                  return(USB_MEMORY_FULL);
   \   00000062   0420               MOVS     R0,#+4
   \   00000064   ABE2               B        ??USB_RealizeEp_2
    837                }
    838              }
    839              pEpCtrlBaseAddr  = (pInt32U)&USB_EP0R;
   \                     ??USB_RealizeEp_4:
   \   00000066   E548               LDR      R0,??USB_RealizeEp_5  ;; 0xffffa800
   \   00000068   0090               STR      R0,[SP, #+0]
    840              pEpCtrlBaseAddr += EpSlot;
   \   0000006A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000006C   360E               LSRS     R6,R6,#+24
   \   0000006E   0420               MOVS     R0,#+4
   \   00000070   7043               MULS     R0,R6,R0
   \   00000072   0099               LDR      R1,[SP, #+0]
   \   00000074   0818               ADDS     R0,R1,R0
   \   00000076   0090               STR      R0,[SP, #+0]
    841              // Set Ep Address
    842              EpCtrlSet_EA(pEpCtrlBaseAddr,EndPoint >> 1);
   \   00000078   3900               MOVS     R1,R7
   \   0000007A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000007C   090E               LSRS     R1,R1,#+24
   \   0000007E   4908               LSRS     R1,R1,#+1
   \   00000080   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000082   090E               LSRS     R1,R1,#+24
   \   00000084   0098               LDR      R0,[SP, #+0]
   \   00000086   ........           BL       EpCtrlSet_EA
    843          
    844              if(EpType == EP_CTRL)
   \   0000008A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000008C   2D0E               LSRS     R5,R5,#+24
   \   0000008E   012D               CMP      R5,#+1
   \   00000090   02D1               BNE      ??USB_RealizeEp_6
    845              {
    846                EndPoint |= 1;
   \   00000092   3800               MOVS     R0,R7
   \   00000094   0127               MOVS     R7,#+1
   \   00000096   0743               ORRS     R7,R7,R0
    847              }
    848            sec_pass: // only for control EP, because this type realize both directions
    849              EpInfo[EndPoint].EpType  = EpType;
   \                     ??USB_RealizeEp_6:
   \   00000098   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000009A   3F0E               LSRS     R7,R7,#+24
   \   0000009C   1420               MOVS     R0,#+20
   \   0000009E   7843               MULS     R0,R7,R0
   \   000000A0   D749               LDR      R1,??USB_RealizeEp_5+0x4  ;; EpInfo
   \   000000A2   0818               ADDS     R0,R1,R0
   \   000000A4   0573               STRB     R5,[R0, #+12]
    850              EpInfo[EndPoint].pEpCtrl = pEpCtrlBaseAddr;
   \   000000A6   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000A8   3F0E               LSRS     R7,R7,#+24
   \   000000AA   1420               MOVS     R0,#+20
   \   000000AC   7843               MULS     R0,R7,R0
   \   000000AE   D449               LDR      R1,??USB_RealizeEp_5+0x4  ;; EpInfo
   \   000000B0   009A               LDR      R2,[SP, #+0]
   \   000000B2   0A50               STR      R2,[R1, R0]
    851              EpInfo[EndPoint].EpSlot  = EpSlot;
   \   000000B4   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000B6   3F0E               LSRS     R7,R7,#+24
   \   000000B8   1420               MOVS     R0,#+20
   \   000000BA   7843               MULS     R0,R7,R0
   \   000000BC   D049               LDR      R1,??USB_RealizeEp_5+0x4  ;; EpInfo
   \   000000BE   0818               ADDS     R0,R1,R0
   \   000000C0   0671               STRB     R6,[R0, #+4]
    852              EpInfo[EndPoint].MaxSize = MaxPacketSize;
   \   000000C2   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000C4   3F0E               LSRS     R7,R7,#+24
   \   000000C6   1420               MOVS     R0,#+20
   \   000000C8   7843               MULS     R0,R7,R0
   \   000000CA   CD49               LDR      R1,??USB_RealizeEp_5+0x4  ;; EpInfo
   \   000000CC   0818               ADDS     R0,R1,R0
   \   000000CE   8460               STR      R4,[R0, #+8]
    853              if(EndPoint & 1)
   \   000000D0   F807               LSLS     R0,R7,#+31
   \   000000D2   00D4               BMI      .+4
   \   000000D4   13E1               B        ??USB_RealizeEp_7
    854              {
    855                // IN EP
    856                // Disable EP
    857                EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_DISABLED);
   \   000000D6   0021               MOVS     R1,#+0
   \   000000D8   0098               LDR      R0,[SP, #+0]
   \   000000DA   ........           BL       EpCtrlSet_STAT_TX
    858                // Clear Tx toggle
    859                EpCtrlSet_DTOG_TX(pEpCtrlBaseAddr,0);
   \   000000DE   0021               MOVS     R1,#+0
   \   000000E0   0098               LDR      R0,[SP, #+0]
   \   000000E2   ........           BL       EpCtrlSet_DTOG_TX
    860                // Clear Correct Transfer for transmission flag
    861                EpCtrlClr_CTR_TX(pEpCtrlBaseAddr);
   \   000000E6   0098               LDR      R0,[SP, #+0]
   \   000000E8   ........           BL       EpCtrlClr_CTR_TX
    862                // Update EP description table
    863                WriteEpDTB_AddrTx(EpSlot,Offset);
   \   000000EC   C548               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000000EE   C649               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   000000F0   C44A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000000F2   891A               SUBS     R1,R1,R2
   \   000000F4   4908               LSRS     R1,R1,#+1
   \   000000F6   1839               SUBS     R1,R1,#+24
   \   000000F8   0722               MOVS     R2,#+7
   \   000000FA   9143               BICS     R1,R1,R2
   \   000000FC   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000000FE   360E               LSRS     R6,R6,#+24
   \   00000100   0822               MOVS     R2,#+8
   \   00000102   7243               MULS     R2,R6,R2
   \   00000104   8918               ADDS     R1,R1,R2
   \   00000106   4900               LSLS     R1,R1,#+1
   \   00000108   0322               MOVS     R2,#+3
   \   0000010A   9143               BICS     R1,R1,R2
   \   0000010C   4018               ADDS     R0,R0,R1
   \   0000010E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000110   360E               LSRS     R6,R6,#+24
   \   00000112   0822               MOVS     R2,#+8
   \   00000114   7243               MULS     R2,R6,R2
   \   00000116   0121               MOVS     R1,#+1
   \   00000118   1140               ANDS     R1,R1,R2
   \   0000011A   6A46               MOV      R2,SP
   \   0000011C   D288               LDRH     R2,[R2, #+6]
   \   0000011E   4252               STRH     R2,[R0, R1]
    864                WriteEpDTB_CountTx(EpSlot,0);
   \   00000120   B848               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000122   B949               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   00000124   B74A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000126   891A               SUBS     R1,R1,R2
   \   00000128   4908               LSRS     R1,R1,#+1
   \   0000012A   1839               SUBS     R1,R1,#+24
   \   0000012C   0722               MOVS     R2,#+7
   \   0000012E   9143               BICS     R1,R1,R2
   \   00000130   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000132   360E               LSRS     R6,R6,#+24
   \   00000134   0822               MOVS     R2,#+8
   \   00000136   7243               MULS     R2,R6,R2
   \   00000138   8918               ADDS     R1,R1,R2
   \   0000013A   891C               ADDS     R1,R1,#+2
   \   0000013C   4900               LSLS     R1,R1,#+1
   \   0000013E   0322               MOVS     R2,#+3
   \   00000140   9143               BICS     R1,R1,R2
   \   00000142   4018               ADDS     R0,R0,R1
   \   00000144   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000146   360E               LSRS     R6,R6,#+24
   \   00000148   0821               MOVS     R1,#+8
   \   0000014A   7143               MULS     R1,R6,R1
   \   0000014C   0122               MOVS     R2,#+1
   \   0000014E   0A40               ANDS     R2,R2,R1
   \   00000150   0021               MOVS     R1,#+0
   \   00000152   8152               STRH     R1,[R0, R2]
    865                // Set EP Kind & enable
    866                switch(EpType)
   \   00000154   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000156   2D0E               LSRS     R5,R5,#+24
   \   00000158   2800               MOVS     R0,R5
   \   0000015A   0028               CMP      R0,#+0
   \   0000015C   06D0               BEQ      ??USB_RealizeEp_8
   \   0000015E   401E               SUBS     R0,R0,#+1
   \   00000160   11D0               BEQ      ??USB_RealizeEp_9
   \   00000162   401E               SUBS     R0,R0,#+1
   \   00000164   23D0               BEQ      ??USB_RealizeEp_10
   \   00000166   401E               SUBS     R0,R0,#+1
   \   00000168   67D0               BEQ      ??USB_RealizeEp_11
   \   0000016A   73E0               B        ??USB_RealizeEp_12
    867                {
    868                case EP_BULK_SING_BUFF:
    869                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_BULK_SING_BUFF);
   \                     ??USB_RealizeEp_8:
   \   0000016C   0021               MOVS     R1,#+0
   \   0000016E   0098               LDR      R0,[SP, #+0]
   \   00000170   ........           BL       EpCtrlSet_EP_TYPE
    870                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   00000174   0021               MOVS     R1,#+0
   \   00000176   0098               LDR      R0,[SP, #+0]
   \   00000178   ........           BL       EpCtrlSet_EP_KIND
    871                  // Enable EP
    872                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_NAK);
   \   0000017C   0221               MOVS     R1,#+2
   \   0000017E   0098               LDR      R0,[SP, #+0]
   \   00000180   ........           BL       EpCtrlSet_STAT_TX
   \   00000184   B7E0               B        ??USB_RealizeEp_13
    873                  break;
    874                case EP_CTRL:
    875                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_CTRL);
   \                     ??USB_RealizeEp_9:
   \   00000186   0121               MOVS     R1,#+1
   \   00000188   0098               LDR      R0,[SP, #+0]
   \   0000018A   ........           BL       EpCtrlSet_EP_TYPE
    876                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   0098               LDR      R0,[SP, #+0]
   \   00000192   ........           BL       EpCtrlSet_EP_KIND
    877                  // Enable EP
    878                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_NAK);
   \   00000196   0221               MOVS     R1,#+2
   \   00000198   0098               LDR      R0,[SP, #+0]
   \   0000019A   ........           BL       EpCtrlSet_STAT_TX
    879                  // Realize OUT direction
    880                  EndPoint &= ~1;
   \   0000019E   3800               MOVS     R0,R7
   \   000001A0   FE27               MOVS     R7,#+254
   \   000001A2   0740               ANDS     R7,R7,R0
    881                  Offset = Offset1;
   \   000001A4   6846               MOV      R0,SP
   \   000001A6   6946               MOV      R1,SP
   \   000001A8   8988               LDRH     R1,[R1, #+4]
   \   000001AA   C180               STRH     R1,[R0, #+6]
    882                  goto sec_pass;
   \   000001AC   74E7               B        ??USB_RealizeEp_6
    883                case EP_ISO:
    884                  // Disable receiving (only singe direction is possible)
    885                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_DISABLED);
   \                     ??USB_RealizeEp_10:
   \   000001AE   0021               MOVS     R1,#+0
   \   000001B0   0098               LDR      R0,[SP, #+0]
   \   000001B2   ........           BL       EpCtrlSet_STAT_RX
    886                  WriteEpDTB_AddrRx(EpSlot,Offset1);
   \   000001B6   9348               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000001B8   9349               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   000001BA   924A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000001BC   891A               SUBS     R1,R1,R2
   \   000001BE   4908               LSRS     R1,R1,#+1
   \   000001C0   1839               SUBS     R1,R1,#+24
   \   000001C2   0722               MOVS     R2,#+7
   \   000001C4   9143               BICS     R1,R1,R2
   \   000001C6   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000001C8   360E               LSRS     R6,R6,#+24
   \   000001CA   0822               MOVS     R2,#+8
   \   000001CC   7243               MULS     R2,R6,R2
   \   000001CE   8918               ADDS     R1,R1,R2
   \   000001D0   091D               ADDS     R1,R1,#+4
   \   000001D2   4900               LSLS     R1,R1,#+1
   \   000001D4   0322               MOVS     R2,#+3
   \   000001D6   9143               BICS     R1,R1,R2
   \   000001D8   4018               ADDS     R0,R0,R1
   \   000001DA   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000001DC   360E               LSRS     R6,R6,#+24
   \   000001DE   0822               MOVS     R2,#+8
   \   000001E0   7243               MULS     R2,R6,R2
   \   000001E2   0121               MOVS     R1,#+1
   \   000001E4   1140               ANDS     R1,R1,R2
   \   000001E6   6A46               MOV      R2,SP
   \   000001E8   9288               LDRH     R2,[R2, #+4]
   \   000001EA   4252               STRH     R2,[R0, R1]
    887                  WriteEpDTB_CountRx(EpSlot,0);
   \   000001EC   8548               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000001EE   8649               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   000001F0   844A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000001F2   891A               SUBS     R1,R1,R2
   \   000001F4   4908               LSRS     R1,R1,#+1
   \   000001F6   1839               SUBS     R1,R1,#+24
   \   000001F8   0722               MOVS     R2,#+7
   \   000001FA   9143               BICS     R1,R1,R2
   \   000001FC   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000001FE   360E               LSRS     R6,R6,#+24
   \   00000200   0822               MOVS     R2,#+8
   \   00000202   7243               MULS     R2,R6,R2
   \   00000204   8918               ADDS     R1,R1,R2
   \   00000206   891D               ADDS     R1,R1,#+6
   \   00000208   4900               LSLS     R1,R1,#+1
   \   0000020A   0322               MOVS     R2,#+3
   \   0000020C   9143               BICS     R1,R1,R2
   \   0000020E   4018               ADDS     R0,R0,R1
   \   00000210   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000212   360E               LSRS     R6,R6,#+24
   \   00000214   0821               MOVS     R1,#+8
   \   00000216   7143               MULS     R1,R6,R1
   \   00000218   0122               MOVS     R2,#+1
   \   0000021A   0A40               ANDS     R2,R2,R1
   \   0000021C   0021               MOVS     R1,#+0
   \   0000021E   8152               STRH     R1,[R0, R2]
    888                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_ISO);
   \   00000220   0221               MOVS     R1,#+2
   \   00000222   0098               LDR      R0,[SP, #+0]
   \   00000224   ........           BL       EpCtrlSet_EP_TYPE
    889                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   00000228   0021               MOVS     R1,#+0
   \   0000022A   0098               LDR      R0,[SP, #+0]
   \   0000022C   ........           BL       EpCtrlSet_EP_KIND
    890                  // Enable EP
    891                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_VALID);
   \   00000230   0321               MOVS     R1,#+3
   \   00000232   0098               LDR      R0,[SP, #+0]
   \   00000234   ........           BL       EpCtrlSet_STAT_TX
   \   00000238   5DE0               B        ??USB_RealizeEp_13
    892                  break;
    893                case EP_INTERRUPT:
    894                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_INTERRUPT);
   \                     ??USB_RealizeEp_11:
   \   0000023A   0321               MOVS     R1,#+3
   \   0000023C   0098               LDR      R0,[SP, #+0]
   \   0000023E   ........           BL       EpCtrlSet_EP_TYPE
    895                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   00000242   0021               MOVS     R1,#+0
   \   00000244   0098               LDR      R0,[SP, #+0]
   \   00000246   ........           BL       EpCtrlSet_EP_KIND
    896                  // Enable EP
    897                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_NAK);
   \   0000024A   0221               MOVS     R1,#+2
   \   0000024C   0098               LDR      R0,[SP, #+0]
   \   0000024E   ........           BL       EpCtrlSet_STAT_TX
   \   00000252   50E0               B        ??USB_RealizeEp_13
    898                  break;
    899                default:  // EP_BULK_DOUB_BUF
    900                  // Disable receiving (only singe direction is possible)
    901                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_DISABLED);
   \                     ??USB_RealizeEp_12:
   \   00000254   0021               MOVS     R1,#+0
   \   00000256   0098               LDR      R0,[SP, #+0]
   \   00000258   ........           BL       EpCtrlSet_STAT_RX
    902                  // All buffers are empties
    903                  EpInfo[EndPoint].EpIntrFl = 1;
   \   0000025C   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000025E   3F0E               LSRS     R7,R7,#+24
   \   00000260   1420               MOVS     R0,#+20
   \   00000262   7843               MULS     R0,R7,R0
   \   00000264   6649               LDR      R1,??USB_RealizeEp_5+0x4  ;; EpInfo
   \   00000266   0818               ADDS     R0,R1,R0
   \   00000268   0121               MOVS     R1,#+1
   \   0000026A   0161               STR      R1,[R0, #+16]
    904                  // Clear Tx Software toggle
    905                  WriteEpDTB_AddrRx(EpSlot,Offset1);
   \   0000026C   6548               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   0000026E   6649               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   00000270   644A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000272   891A               SUBS     R1,R1,R2
   \   00000274   4908               LSRS     R1,R1,#+1
   \   00000276   1839               SUBS     R1,R1,#+24
   \   00000278   0722               MOVS     R2,#+7
   \   0000027A   9143               BICS     R1,R1,R2
   \   0000027C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000027E   360E               LSRS     R6,R6,#+24
   \   00000280   0822               MOVS     R2,#+8
   \   00000282   7243               MULS     R2,R6,R2
   \   00000284   8918               ADDS     R1,R1,R2
   \   00000286   091D               ADDS     R1,R1,#+4
   \   00000288   4900               LSLS     R1,R1,#+1
   \   0000028A   0322               MOVS     R2,#+3
   \   0000028C   9143               BICS     R1,R1,R2
   \   0000028E   4018               ADDS     R0,R0,R1
   \   00000290   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000292   360E               LSRS     R6,R6,#+24
   \   00000294   0822               MOVS     R2,#+8
   \   00000296   7243               MULS     R2,R6,R2
   \   00000298   0121               MOVS     R1,#+1
   \   0000029A   1140               ANDS     R1,R1,R2
   \   0000029C   6A46               MOV      R2,SP
   \   0000029E   9288               LDRH     R2,[R2, #+4]
   \   000002A0   4252               STRH     R2,[R0, R1]
    906                  WriteEpDTB_CountRx(EpSlot,0);
   \   000002A2   5848               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000002A4   5849               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   000002A6   574A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000002A8   891A               SUBS     R1,R1,R2
   \   000002AA   4908               LSRS     R1,R1,#+1
   \   000002AC   1839               SUBS     R1,R1,#+24
   \   000002AE   0722               MOVS     R2,#+7
   \   000002B0   9143               BICS     R1,R1,R2
   \   000002B2   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000002B4   360E               LSRS     R6,R6,#+24
   \   000002B6   0822               MOVS     R2,#+8
   \   000002B8   7243               MULS     R2,R6,R2
   \   000002BA   8918               ADDS     R1,R1,R2
   \   000002BC   891D               ADDS     R1,R1,#+6
   \   000002BE   4900               LSLS     R1,R1,#+1
   \   000002C0   0322               MOVS     R2,#+3
   \   000002C2   9143               BICS     R1,R1,R2
   \   000002C4   4018               ADDS     R0,R0,R1
   \   000002C6   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000002C8   360E               LSRS     R6,R6,#+24
   \   000002CA   0821               MOVS     R1,#+8
   \   000002CC   7143               MULS     R1,R6,R1
   \   000002CE   0122               MOVS     R2,#+1
   \   000002D0   0A40               ANDS     R2,R2,R1
   \   000002D2   0021               MOVS     R1,#+0
   \   000002D4   8152               STRH     R1,[R0, R2]
    907                  EpCtrlSet_DTOG_RX(pEpCtrlBaseAddr,0);
   \   000002D6   0021               MOVS     R1,#+0
   \   000002D8   0098               LDR      R0,[SP, #+0]
   \   000002DA   ........           BL       EpCtrlSet_DTOG_RX
    908                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_BULK_SING_BUFF);
   \   000002DE   0021               MOVS     R1,#+0
   \   000002E0   0098               LDR      R0,[SP, #+0]
   \   000002E2   ........           BL       EpCtrlSet_EP_TYPE
    909                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,1);
   \   000002E6   0121               MOVS     R1,#+1
   \   000002E8   0098               LDR      R0,[SP, #+0]
   \   000002EA   ........           BL       EpCtrlSet_EP_KIND
    910                  // Enable EP
    911                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_NAK);
   \   000002EE   0221               MOVS     R1,#+2
   \   000002F0   0098               LDR      R0,[SP, #+0]
   \   000002F2   ........           BL       EpCtrlSet_STAT_TX
    912                }
    913                // Clear Correct Transfer for transmission flag
    914                EpCtrlClr_CTR_TX(pEpCtrlBaseAddr);
   \                     ??USB_RealizeEp_13:
   \   000002F6   0098               LDR      R0,[SP, #+0]
   \   000002F8   ........           BL       EpCtrlClr_CTR_TX
   \   000002FC   5EE1               B        ??USB_RealizeEp_14
    915              }
    916              else
    917              {
    918                RxCount_t RxCount = {0};
   \                     ??USB_RealizeEp_7:
   \   000002FE   B248               LDR      R0,??USB_RealizeEp_15  ;; `?<Constant {0}>`
   \   00000300   0068               LDR      R0,[R0, #+0]
   \   00000302   0290               STR      R0,[SP, #+8]
    919                // OUT EP
    920                // Disable EP
    921                EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_DISABLED);
   \   00000304   0021               MOVS     R1,#+0
   \   00000306   0098               LDR      R0,[SP, #+0]
   \   00000308   ........           BL       EpCtrlSet_STAT_RX
    922                // Clear Rx toggle
    923                EpCtrlSet_DTOG_RX(pEpCtrlBaseAddr,0);
   \   0000030C   0021               MOVS     R1,#+0
   \   0000030E   0098               LDR      R0,[SP, #+0]
   \   00000310   ........           BL       EpCtrlSet_DTOG_RX
    924                // Clear Correct Transfer for reception flag
    925                EpCtrlClr_CTR_RX(pEpCtrlBaseAddr);
   \   00000314   0098               LDR      R0,[SP, #+0]
   \   00000316   ........           BL       EpCtrlClr_CTR_RX
    926                // Update EP description table
    927                RxCount.BlSizeField = (MaxPacketSize > 62);
   \   0000031A   3F2C               CMP      R4,#+63
   \   0000031C   8041               SBCS     R0,R0,R0
   \   0000031E   C043               MVNS     R0,R0
   \   00000320   C00F               LSRS     R0,R0,#+31
   \   00000322   6946               MOV      R1,SP
   \   00000324   6A46               MOV      R2,SP
   \   00000326   1289               LDRH     R2,[R2, #+8]
   \   00000328   5204               LSLS     R2,R2,#+17       ;; ZeroExtS R2,R2,#+17,#+17
   \   0000032A   520C               LSRS     R2,R2,#+17
   \   0000032C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000032E   000E               LSRS     R0,R0,#+24
   \   00000330   C003               LSLS     R0,R0,#+15
   \   00000332   1043               ORRS     R0,R0,R2
   \   00000334   0881               STRH     R0,[R1, #+8]
    928                RxCount.NubBlockField = (MaxPacketSize > 62) ? (MaxPacketSize>>5)-1:MaxPacketSizeTmp>>1;
   \   00000336   3F2C               CMP      R4,#+63
   \   00000338   03D3               BCC      ??USB_RealizeEp_16
   \   0000033A   2100               MOVS     R1,R4
   \   0000033C   4909               LSRS     R1,R1,#+5
   \   0000033E   491E               SUBS     R1,R1,#+1
   \   00000340   02E0               B        ??USB_RealizeEp_17
   \                     ??USB_RealizeEp_16:
   \   00000342   0398               LDR      R0,[SP, #+12]
   \   00000344   0100               MOVS     R1,R0
   \   00000346   4908               LSRS     R1,R1,#+1
   \                     ??USB_RealizeEp_17:
   \   00000348   6846               MOV      R0,SP
   \   0000034A   0289               LDRH     R2,[R0, #+8]
   \   0000034C   9F48               LDR      R0,??USB_RealizeEp_15+0x4  ;; 0x83ff
   \   0000034E   1040               ANDS     R0,R0,R2
   \   00000350   8902               LSLS     R1,R1,#+10
   \   00000352   F822               MOVS     R2,#+248
   \   00000354   D201               LSLS     R2,R2,#+7        ;; #+31744
   \   00000356   0A40               ANDS     R2,R2,R1
   \   00000358   0243               ORRS     R2,R2,R0
   \   0000035A   6846               MOV      R0,SP
   \   0000035C   0281               STRH     R2,[R0, #+8]
    929                WriteEpDTB_AddrRx(EpSlot,Offset);
   \   0000035E   2948               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000360   2949               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   00000362   284A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000364   891A               SUBS     R1,R1,R2
   \   00000366   4908               LSRS     R1,R1,#+1
   \   00000368   1839               SUBS     R1,R1,#+24
   \   0000036A   0722               MOVS     R2,#+7
   \   0000036C   9143               BICS     R1,R1,R2
   \   0000036E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000370   360E               LSRS     R6,R6,#+24
   \   00000372   0822               MOVS     R2,#+8
   \   00000374   7243               MULS     R2,R6,R2
   \   00000376   8918               ADDS     R1,R1,R2
   \   00000378   091D               ADDS     R1,R1,#+4
   \   0000037A   4900               LSLS     R1,R1,#+1
   \   0000037C   0322               MOVS     R2,#+3
   \   0000037E   9143               BICS     R1,R1,R2
   \   00000380   4018               ADDS     R0,R0,R1
   \   00000382   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000384   360E               LSRS     R6,R6,#+24
   \   00000386   0822               MOVS     R2,#+8
   \   00000388   7243               MULS     R2,R6,R2
   \   0000038A   0121               MOVS     R1,#+1
   \   0000038C   1140               ANDS     R1,R1,R2
   \   0000038E   6A46               MOV      R2,SP
   \   00000390   D288               LDRH     R2,[R2, #+6]
   \   00000392   4252               STRH     R2,[R0, R1]
    930                WriteEpDTB_CountRx(EpSlot,RxCount.Count);
   \   00000394   1B48               LDR      R0,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000396   1C49               LDR      R1,??USB_RealizeEp_5+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   00000398   1A4A               LDR      R2,??USB_RealizeEp_5+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   0000039A   891A               SUBS     R1,R1,R2
   \   0000039C   4908               LSRS     R1,R1,#+1
   \   0000039E   1839               SUBS     R1,R1,#+24
   \   000003A0   0722               MOVS     R2,#+7
   \   000003A2   9143               BICS     R1,R1,R2
   \   000003A4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003A6   360E               LSRS     R6,R6,#+24
   \   000003A8   0822               MOVS     R2,#+8
   \   000003AA   7243               MULS     R2,R6,R2
   \   000003AC   8918               ADDS     R1,R1,R2
   \   000003AE   891D               ADDS     R1,R1,#+6
   \   000003B0   4900               LSLS     R1,R1,#+1
   \   000003B2   0322               MOVS     R2,#+3
   \   000003B4   9143               BICS     R1,R1,R2
   \   000003B6   4018               ADDS     R0,R0,R1
   \   000003B8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003BA   360E               LSRS     R6,R6,#+24
   \   000003BC   0822               MOVS     R2,#+8
   \   000003BE   7243               MULS     R2,R6,R2
   \   000003C0   0121               MOVS     R1,#+1
   \   000003C2   1140               ANDS     R1,R1,R2
   \   000003C4   6A46               MOV      R2,SP
   \   000003C6   1289               LDRH     R2,[R2, #+8]
   \   000003C8   4252               STRH     R2,[R0, R1]
    931          
    932                // Set EP Kind & enable
    933                switch(EpType)
   \   000003CA   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000003CC   2D0E               LSRS     R5,R5,#+24
   \   000003CE   2800               MOVS     R0,R5
   \   000003D0   0028               CMP      R0,#+0
   \   000003D2   06D0               BEQ      ??USB_RealizeEp_18
   \   000003D4   401E               SUBS     R0,R0,#+1
   \   000003D6   19D0               BEQ      ??USB_RealizeEp_19
   \   000003D8   401E               SUBS     R0,R0,#+1
   \   000003DA   24D0               BEQ      ??USB_RealizeEp_20
   \   000003DC   401E               SUBS     R0,R0,#+1
   \   000003DE   68D0               BEQ      ??USB_RealizeEp_21
   \   000003E0   74E0               B        ??USB_RealizeEp_22
    934                {
    935                case EP_BULK_SING_BUFF:
    936                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_BULK_SING_BUFF);
   \                     ??USB_RealizeEp_18:
   \   000003E2   0021               MOVS     R1,#+0
   \   000003E4   0098               LDR      R0,[SP, #+0]
   \   000003E6   ........           BL       EpCtrlSet_EP_TYPE
    937                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   000003EA   0021               MOVS     R1,#+0
   \   000003EC   0098               LDR      R0,[SP, #+0]
   \   000003EE   ........           BL       EpCtrlSet_EP_KIND
    938                  // Enable EP
    939                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_VALID);
   \   000003F2   0321               MOVS     R1,#+3
   \   000003F4   0098               LDR      R0,[SP, #+0]
   \   000003F6   ........           BL       EpCtrlSet_STAT_RX
   \   000003FA   DFE0               B        ??USB_RealizeEp_14
   \                     ??USB_RealizeEp_5:
   \   000003FC   00A8FFFF           DC32     0xffffa800
   \   00000400   ........           DC32     EpInfo
   \   00000404   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   00000408   ........           DC32     SFE(USB_PACKET_MEMORY)
    940                  break;
    941                case EP_CTRL:
    942                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_CTRL);
   \                     ??USB_RealizeEp_19:
   \   0000040C   0121               MOVS     R1,#+1
   \   0000040E   0098               LDR      R0,[SP, #+0]
   \   00000410   ........           BL       EpCtrlSet_EP_TYPE
    943                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   00000414   0021               MOVS     R1,#+0
   \   00000416   0098               LDR      R0,[SP, #+0]
   \   00000418   ........           BL       EpCtrlSet_EP_KIND
    944                  // Enable EP
    945                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_NAK);
   \   0000041C   0221               MOVS     R1,#+2
   \   0000041E   0098               LDR      R0,[SP, #+0]
   \   00000420   ........           BL       EpCtrlSet_STAT_RX
   \   00000424   CAE0               B        ??USB_RealizeEp_14
    946                  break;
    947                case EP_ISO:
    948                  WriteEpDTB_CountTx(EpSlot,RxCount.Count);
   \                     ??USB_RealizeEp_20:
   \   00000426   6A48               LDR      R0,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000428   6A49               LDR      R1,??USB_RealizeEp_15+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   0000042A   694A               LDR      R2,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   0000042C   891A               SUBS     R1,R1,R2
   \   0000042E   4908               LSRS     R1,R1,#+1
   \   00000430   1839               SUBS     R1,R1,#+24
   \   00000432   0722               MOVS     R2,#+7
   \   00000434   9143               BICS     R1,R1,R2
   \   00000436   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000438   360E               LSRS     R6,R6,#+24
   \   0000043A   0822               MOVS     R2,#+8
   \   0000043C   7243               MULS     R2,R6,R2
   \   0000043E   8918               ADDS     R1,R1,R2
   \   00000440   891C               ADDS     R1,R1,#+2
   \   00000442   4900               LSLS     R1,R1,#+1
   \   00000444   0322               MOVS     R2,#+3
   \   00000446   9143               BICS     R1,R1,R2
   \   00000448   4018               ADDS     R0,R0,R1
   \   0000044A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000044C   360E               LSRS     R6,R6,#+24
   \   0000044E   0822               MOVS     R2,#+8
   \   00000450   7243               MULS     R2,R6,R2
   \   00000452   0121               MOVS     R1,#+1
   \   00000454   1140               ANDS     R1,R1,R2
   \   00000456   6A46               MOV      R2,SP
   \   00000458   1289               LDRH     R2,[R2, #+8]
   \   0000045A   4252               STRH     R2,[R0, R1]
    949                  // Disable transmitting (only singe direction is possible)
    950                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_DISABLED);
   \   0000045C   0021               MOVS     R1,#+0
   \   0000045E   0098               LDR      R0,[SP, #+0]
   \   00000460   ........           BL       EpCtrlSet_STAT_TX
    951                  WriteEpDTB_AddrTx(EpSlot,Offset1);
   \   00000464   5A48               LDR      R0,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000466   5B49               LDR      R1,??USB_RealizeEp_15+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   00000468   594A               LDR      R2,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   0000046A   891A               SUBS     R1,R1,R2
   \   0000046C   4908               LSRS     R1,R1,#+1
   \   0000046E   1839               SUBS     R1,R1,#+24
   \   00000470   0722               MOVS     R2,#+7
   \   00000472   9143               BICS     R1,R1,R2
   \   00000474   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000476   360E               LSRS     R6,R6,#+24
   \   00000478   0822               MOVS     R2,#+8
   \   0000047A   7243               MULS     R2,R6,R2
   \   0000047C   8918               ADDS     R1,R1,R2
   \   0000047E   4900               LSLS     R1,R1,#+1
   \   00000480   0322               MOVS     R2,#+3
   \   00000482   9143               BICS     R1,R1,R2
   \   00000484   4018               ADDS     R0,R0,R1
   \   00000486   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000488   360E               LSRS     R6,R6,#+24
   \   0000048A   0822               MOVS     R2,#+8
   \   0000048C   7243               MULS     R2,R6,R2
   \   0000048E   0121               MOVS     R1,#+1
   \   00000490   1140               ANDS     R1,R1,R2
   \   00000492   6A46               MOV      R2,SP
   \   00000494   9288               LDRH     R2,[R2, #+4]
   \   00000496   4252               STRH     R2,[R0, R1]
    952                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_ISO);
   \   00000498   0221               MOVS     R1,#+2
   \   0000049A   0098               LDR      R0,[SP, #+0]
   \   0000049C   ........           BL       EpCtrlSet_EP_TYPE
    953                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   000004A0   0021               MOVS     R1,#+0
   \   000004A2   0098               LDR      R0,[SP, #+0]
   \   000004A4   ........           BL       EpCtrlSet_EP_KIND
    954                  // Enable EP
    955                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_VALID);
   \   000004A8   0321               MOVS     R1,#+3
   \   000004AA   0098               LDR      R0,[SP, #+0]
   \   000004AC   ........           BL       EpCtrlSet_STAT_RX
   \   000004B0   84E0               B        ??USB_RealizeEp_14
    956                  break;
    957                case EP_INTERRUPT:
    958                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_INTERRUPT);
   \                     ??USB_RealizeEp_21:
   \   000004B2   0321               MOVS     R1,#+3
   \   000004B4   0098               LDR      R0,[SP, #+0]
   \   000004B6   ........           BL       EpCtrlSet_EP_TYPE
    959                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,0);
   \   000004BA   0021               MOVS     R1,#+0
   \   000004BC   0098               LDR      R0,[SP, #+0]
   \   000004BE   ........           BL       EpCtrlSet_EP_KIND
    960                  // Enable EP
    961                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_VALID);
   \   000004C2   0321               MOVS     R1,#+3
   \   000004C4   0098               LDR      R0,[SP, #+0]
   \   000004C6   ........           BL       EpCtrlSet_STAT_RX
   \   000004CA   77E0               B        ??USB_RealizeEp_14
    962                  break;
    963                default:  // EP_BULK_DOUB_BUF
    964                  // All buffers are empties
    965                  EpInfo[EndPoint].EpIntrFl = 0;
   \                     ??USB_RealizeEp_22:
   \   000004CC   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000004CE   3F0E               LSRS     R7,R7,#+24
   \   000004D0   1420               MOVS     R0,#+20
   \   000004D2   7843               MULS     R0,R7,R0
   \   000004D4   4049               LDR      R1,??USB_RealizeEp_15+0x10  ;; EpInfo
   \   000004D6   0818               ADDS     R0,R1,R0
   \   000004D8   0021               MOVS     R1,#+0
   \   000004DA   0161               STR      R1,[R0, #+16]
    966                  // Disable transmitting (only singe direction is possible)
    967                  EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_DISABLED);
   \   000004DC   0021               MOVS     R1,#+0
   \   000004DE   0098               LDR      R0,[SP, #+0]
   \   000004E0   ........           BL       EpCtrlSet_STAT_TX
    968                  WriteEpDTB_CountTx(EpSlot,RxCount.Count);
   \   000004E4   3A48               LDR      R0,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000004E6   3B49               LDR      R1,??USB_RealizeEp_15+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   000004E8   394A               LDR      R2,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   000004EA   891A               SUBS     R1,R1,R2
   \   000004EC   4908               LSRS     R1,R1,#+1
   \   000004EE   1839               SUBS     R1,R1,#+24
   \   000004F0   0722               MOVS     R2,#+7
   \   000004F2   9143               BICS     R1,R1,R2
   \   000004F4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000004F6   360E               LSRS     R6,R6,#+24
   \   000004F8   0822               MOVS     R2,#+8
   \   000004FA   7243               MULS     R2,R6,R2
   \   000004FC   8918               ADDS     R1,R1,R2
   \   000004FE   891C               ADDS     R1,R1,#+2
   \   00000500   4900               LSLS     R1,R1,#+1
   \   00000502   0322               MOVS     R2,#+3
   \   00000504   9143               BICS     R1,R1,R2
   \   00000506   4018               ADDS     R0,R0,R1
   \   00000508   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000050A   360E               LSRS     R6,R6,#+24
   \   0000050C   0822               MOVS     R2,#+8
   \   0000050E   7243               MULS     R2,R6,R2
   \   00000510   0121               MOVS     R1,#+1
   \   00000512   1140               ANDS     R1,R1,R2
   \   00000514   6A46               MOV      R2,SP
   \   00000516   1289               LDRH     R2,[R2, #+8]
   \   00000518   4252               STRH     R2,[R0, R1]
    969                  WriteEpDTB_AddrTx(EpSlot,Offset1);
   \   0000051A   2D48               LDR      R0,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   0000051C   2D49               LDR      R1,??USB_RealizeEp_15+0xC  ;; SFE(USB_PACKET_MEMORY)
   \   0000051E   2C4A               LDR      R2,??USB_RealizeEp_15+0x8  ;; SFB(USB_PACKET_MEMORY)
   \   00000520   891A               SUBS     R1,R1,R2
   \   00000522   4908               LSRS     R1,R1,#+1
   \   00000524   1839               SUBS     R1,R1,#+24
   \   00000526   0722               MOVS     R2,#+7
   \   00000528   9143               BICS     R1,R1,R2
   \   0000052A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000052C   360E               LSRS     R6,R6,#+24
   \   0000052E   0822               MOVS     R2,#+8
   \   00000530   7243               MULS     R2,R6,R2
   \   00000532   8918               ADDS     R1,R1,R2
   \   00000534   4900               LSLS     R1,R1,#+1
   \   00000536   0322               MOVS     R2,#+3
   \   00000538   9143               BICS     R1,R1,R2
   \   0000053A   4018               ADDS     R0,R0,R1
   \   0000053C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000053E   360E               LSRS     R6,R6,#+24
   \   00000540   0822               MOVS     R2,#+8
   \   00000542   7243               MULS     R2,R6,R2
   \   00000544   0121               MOVS     R1,#+1
   \   00000546   1140               ANDS     R1,R1,R2
   \   00000548   6A46               MOV      R2,SP
   \   0000054A   9288               LDRH     R2,[R2, #+4]
   \   0000054C   4252               STRH     R2,[R0, R1]
    970                  EpCtrlSet_DTOG_TX(pEpCtrlBaseAddr,0);
   \   0000054E   0021               MOVS     R1,#+0
   \   00000550   0098               LDR      R0,[SP, #+0]
   \   00000552   ........           BL       EpCtrlSet_DTOG_TX
    971                  EpCtrlSet_EP_TYPE(pEpCtrlBaseAddr,EP_BULK_SING_BUFF);
   \   00000556   0021               MOVS     R1,#+0
   \   00000558   0098               LDR      R0,[SP, #+0]
   \   0000055A   ........           BL       EpCtrlSet_EP_TYPE
    972                  EpCtrlSet_EP_KIND(pEpCtrlBaseAddr,1);
   \   0000055E   0121               MOVS     R1,#+1
   \   00000560   0098               LDR      R0,[SP, #+0]
   \   00000562   ........           BL       EpCtrlSet_EP_KIND
    973                  // Enable EP
    974                  EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_VALID);
   \   00000566   0321               MOVS     R1,#+3
   \   00000568   0098               LDR      R0,[SP, #+0]
   \   0000056A   ........           BL       EpCtrlSet_STAT_RX
   \   0000056E   25E0               B        ??USB_RealizeEp_14
    975                }
    976              }
    977            }
    978            else
    979            {
    980              pEpCtrlBaseAddr  = (pInt32U)&USB_EP0R;
   \                     ??USB_RealizeEp_0:
   \   00000570   1A48               LDR      R0,??USB_RealizeEp_15+0x14  ;; 0xffffa800
   \   00000572   0090               STR      R0,[SP, #+0]
    981              pEpCtrlBaseAddr += EpSlot;
   \   00000574   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000576   360E               LSRS     R6,R6,#+24
   \   00000578   0420               MOVS     R0,#+4
   \   0000057A   7043               MULS     R0,R6,R0
   \   0000057C   0099               LDR      R1,[SP, #+0]
   \   0000057E   0818               ADDS     R0,R1,R0
   \   00000580   0090               STR      R0,[SP, #+0]
    982              if(EndPoint & 1)
   \   00000582   F807               LSLS     R0,R7,#+31
   \   00000584   07D5               BPL      ??USB_RealizeEp_23
    983              {
    984                // Disable IN EP
    985                EpCtrlSet_STAT_TX(pEpCtrlBaseAddr,EP_DISABLED);
   \   00000586   0021               MOVS     R1,#+0
   \   00000588   0098               LDR      R0,[SP, #+0]
   \   0000058A   ........           BL       EpCtrlSet_STAT_TX
    986                // Clear Correct Transfer for reception flag
    987                EpCtrlClr_CTR_TX(pEpCtrlBaseAddr);
   \   0000058E   0098               LDR      R0,[SP, #+0]
   \   00000590   ........           BL       EpCtrlClr_CTR_TX
   \   00000594   06E0               B        ??USB_RealizeEp_24
    988              }
    989              else
    990              {
    991                // Disable OUT EP
    992                EpCtrlSet_STAT_RX(pEpCtrlBaseAddr,EP_DISABLED);
   \                     ??USB_RealizeEp_23:
   \   00000596   0021               MOVS     R1,#+0
   \   00000598   0098               LDR      R0,[SP, #+0]
   \   0000059A   ........           BL       EpCtrlSet_STAT_RX
    993                // Clear Correct Transfer for reception flag
    994                EpCtrlClr_CTR_RX(pEpCtrlBaseAddr);
   \   0000059E   0098               LDR      R0,[SP, #+0]
   \   000005A0   ........           BL       EpCtrlClr_CTR_RX
    995              }
    996              // release buffer
    997              USB_ReleaseBuffer(EndPoint);
   \                     ??USB_RealizeEp_24:
   \   000005A4   3800               MOVS     R0,R7
   \   000005A6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000005A8   000E               LSRS     R0,R0,#+24
   \   000005AA   ........           BL       USB_ReleaseBuffer
    998              EpInfo[EndPoint].pEpCtrl = NULL;
   \   000005AE   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000005B0   3F0E               LSRS     R7,R7,#+24
   \   000005B2   1420               MOVS     R0,#+20
   \   000005B4   7843               MULS     R0,R7,R0
   \   000005B6   0849               LDR      R1,??USB_RealizeEp_15+0x10  ;; EpInfo
   \   000005B8   0022               MOVS     R2,#+0
   \   000005BA   0A50               STR      R2,[R1, R0]
    999            }
   1000            return(USB_OK);
   \                     ??USB_RealizeEp_14:
   \   000005BC   0020               MOVS     R0,#+0
   \                     ??USB_RealizeEp_2:
   \   000005BE   05B0               ADD      SP,SP,#+20
   \   000005C0   F0BC               POP      {R4-R7}
   \   000005C2   02BC               POP      {R1}
   \   000005C4   0847               BX       R1               ;; return
   \   000005C6   C046               Nop      
   \                     ??USB_RealizeEp_15:
   \   000005C8   ........           DC32     `?<Constant {0}>`
   \   000005CC   FF830000           DC32     0x83ff
   \   000005D0   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   000005D4   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   000005D8   ........           DC32     EpInfo
   \   000005DC   00A8FFFF           DC32     0xffffa800
   \   000005E0                      REQUIRE _A_USB_EP0R
   1001          }
   1002          
   1003          /*************************************************************************
   1004           * Function Name: USB_SetAdd
   1005           * Parameters: Int32U DevAdd - device address between 0 - 127
   1006           *
   1007           * Return: none
   1008           *
   1009           * Description: Set device address
   1010           *
   1011           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1012          void USB_SetAdd(Int32U DevAdd)
   1013          {
   1014            USB_DADDR = DevAdd | 0x80;
   \                     USB_SetAdd:
   \   00000000   0100               MOVS     R1,R0
   \   00000002   8022               MOVS     R2,#+128
   \   00000004   0A43               ORRS     R2,R2,R1
   \   00000006   0149               LDR      R1,??USB_SetAdd_0  ;; 0xffffa84c
   \   00000008   0A80               STRH     R2,[R1, #+0]
   1015          }
   \   0000000A   7047               BX       LR               ;; return
   \                     ??USB_SetAdd_0:
   \   0000000C   4CA8FFFF           DC32     0xffffa84c
   \   00000010                      REQUIRE _A_USB_DADDR
   1016          
   1017          /*************************************************************************
   1018           * Function Name: USB_ConnectRes
   1019           * Parameters: Boolean Conn
   1020           *
   1021           * Return: none
   1022           *
   1023           * Description: Enable Pull-Up resistor
   1024           *
   1025           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1026          void USB_ConnectRes (Boolean Conn)
   1027          {
   1028          }
   \                     USB_ConnectRes:
   \   00000000   7047               BX       LR               ;; return
   1029          
   1030          /*************************************************************************
   1031           * Function Name: USB_Configure
   1032           * Parameters: Boolean Configure
   1033           *
   1034           * Return: none
   1035           *
   1036           * Description: Configure device
   1037           *  When Configure != 0 enable all Realize Ep
   1038           *
   1039           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1040          static
   1041          void USB_Configure (Boolean Configure)
   1042          {
   1043          }
   \                     USB_Configure:
   \   00000000   7047               BX       LR               ;; return
   1044          
   1045          /*************************************************************************
   1046           * Function Name: USB_Suspend
   1047           * Parameters: void
   1048           *
   1049           * Return: none
   1050           *
   1051           * Description: Suspend the USB engine
   1052           *
   1053           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1054          static
   1055          void USB_Suspend(void)
   1056          {
   \                     USB_Suspend:
   \   00000000   01B5               PUSH     {R0,LR}
   1057            USB_CNTR_bit.FSUSP  = 1;
   \   00000002   0948               LDR      R0,??USB_Suspend_0  ;; 0xffffa840
   \   00000004   0088               LDRH     R0,[R0, #+0]
   \   00000006   0821               MOVS     R1,#+8
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   0748               LDR      R0,??USB_Suspend_0  ;; 0xffffa840
   \   0000000C   0180               STRH     R1,[R0, #+0]
   1058            USB_CNTR_bit.LPMODE = 1;
   \   0000000E   0648               LDR      R0,??USB_Suspend_0  ;; 0xffffa840
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   0143               ORRS     R1,R1,R0
   \   00000016   0448               LDR      R0,??USB_Suspend_0  ;; 0xffffa840
   \   00000018   0180               STRH     R1,[R0, #+0]
   1059            CFG_USBFilterConfig(CFG_USBFilter_Enable);
   \   0000001A   8020               MOVS     R0,#+128
   \   0000001C   8000               LSLS     R0,R0,#+2        ;; #+512
   \   0000001E   ........           BL       CFG_USBFilterConfig
   1060          }
   \   00000022   08BC               POP      {R3}
   \   00000024   01BC               POP      {R0}
   \   00000026   0047               BX       R0               ;; return
   \                     ??USB_Suspend_0:
   \   00000028   40A8FFFF           DC32     0xffffa840
   \   0000002C                      REQUIRE _A_USB_CNTR
   1061          
   1062          #if USB_REMOTE_WAKEUP != 0
   1063          /*************************************************************************
   1064           * Function Name: USB_WakeUp
   1065           * Parameters: none
   1066           *
   1067           * Return: none
   1068           *
   1069           * Description: Wake up Usb
   1070           *
   1071           *************************************************************************/
   1072          static
   1073          void USB_WakeUp (void)
   1074          {
   1075            USB_Resume(USB_RESUME_SOFT_EVENT);
   1076          }
   1077          #endif // USB_REMOTE_WAKEUP != 0
   1078          
   1079          /*************************************************************************
   1080           * Function Name: USB_Resume
   1081           * Parameters: UsbResumeEvent_t UsbResumeEvent
   1082           *
   1083           * Return: none
   1084           *
   1085           * Description: USB Resume implement
   1086           *
   1087           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1088          static
   1089          void USB_Resume (UsbResumeEvent_t UsbResumeEvent)
   1090          {
   \                     USB_Resume:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   1091          Int32U LineStates;
   1092            switch(UsbResumeEvent)
   \   00000004   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000006   240E               LSRS     R4,R4,#+24
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   04D0               BEQ      ??USB_Resume_0
   \   0000000E   401E               SUBS     R0,R0,#+1
   \   00000010   29D0               BEQ      ??USB_Resume_1
   \   00000012   401E               SUBS     R0,R0,#+1
   \   00000014   41D0               BEQ      ??USB_Resume_2
   \   00000016   62E0               B        ??USB_Resume_3
   1093            {
   1094            case USB_RESUME_SOF_EVENT:
   1095              if(DlyCnt)
   \                     ??USB_Resume_0:
   \   00000018   3248               LDR      R0,??USB_Resume_4  ;; DlyCnt
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   5ED0               BEQ      ??USB_Resume_3
   1096              {
   1097                // Waiting 8ms (not take more than 10ms) before release signal to host
   1098                if(--DlyCnt == 0)
   \   00000020   3048               LDR      R0,??USB_Resume_4  ;; DlyCnt
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   401E               SUBS     R0,R0,#+1
   \   00000026   2F49               LDR      R1,??USB_Resume_4  ;; DlyCnt
   \   00000028   0860               STR      R0,[R1, #+0]
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   57D1               BNE      ??USB_Resume_3
   1099                {
   1100                  USB_CNTR_bit.ESOFM  = 0;
   \   0000002E   2E48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000030   0088               LDRH     R0,[R0, #+0]
   \   00000032   2E49               LDR      R1,??USB_Resume_4+0x8  ;; 0xfeff
   \   00000034   0140               ANDS     R1,R1,R0
   \   00000036   2C48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000038   0180               STRH     R1,[R0, #+0]
   1101                  USB_CNTR_bit.RESUME = 0;
   \   0000003A   2B48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   0000003C   0088               LDRH     R0,[R0, #+0]
   \   0000003E   2C49               LDR      R1,??USB_Resume_4+0xC  ;; 0xffef
   \   00000040   0140               ANDS     R1,R1,R0
   \   00000042   2948               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000044   0180               STRH     R1,[R0, #+0]
   1102                  USB_CNTR_bit.FSUSP  = 0;  // Must be 0
   \   00000046   2848               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000048   0088               LDRH     R0,[R0, #+0]
   \   0000004A   2A49               LDR      R1,??USB_Resume_4+0x10  ;; 0xfff7
   \   0000004C   0140               ANDS     R1,R1,R0
   \   0000004E   2648               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000050   0180               STRH     R1,[R0, #+0]
   1103                  if(UsbUserFun[UsbUserSuspend] != NULL)
   \   00000052   2948               LDR      R0,??USB_Resume_4+0x14  ;; UsbUserFun + 164
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   0028               CMP      R0,#+0
   \   00000058   41D0               BEQ      ??USB_Resume_3
   1104                  {
   1105                    UsbUserFun[UsbUserSuspend]((void *)0);
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   2649               LDR      R1,??USB_Resume_4+0x14  ;; UsbUserFun + 164
   \   0000005E   0968               LDR      R1,[R1, #+0]
   \   00000060   ........           BL       __iar_via_R1
   \   00000064   3BE0               B        ??USB_Resume_3
   1106                  }
   1107                }
   1108              }
   1109              break;
   1110            case USB_RESUME_SOFT_EVENT: // resume by USER
   1111              CFG_USBFilterConfig(CFG_USBFilter_Disable);
   \                     ??USB_Resume_1:
   \   00000066   2548               LDR      R0,??USB_Resume_4+0x18  ;; 0xfffffdff
   \   00000068   ........           BL       CFG_USBFilterConfig
   1112              USB_CNTR_bit.LPMODE = 0;
   \   0000006C   1E48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   0000006E   0088               LDRH     R0,[R0, #+0]
   \   00000070   2349               LDR      R1,??USB_Resume_4+0x1C  ;; 0xfffb
   \   00000072   0140               ANDS     R1,R1,R0
   \   00000074   1C48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000076   0180               STRH     R1,[R0, #+0]
   1113              DlyCnt = USB_RESUME_DLY;
   \   00000078   1A48               LDR      R0,??USB_Resume_4  ;; DlyCnt
   \   0000007A   0821               MOVS     R1,#+8
   \   0000007C   0160               STR      R1,[R0, #+0]
   1114              USB_CNTR_bit.RESUME = 1;
   \   0000007E   1A48               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000080   0088               LDRH     R0,[R0, #+0]
   \   00000082   1021               MOVS     R1,#+16
   \   00000084   0143               ORRS     R1,R1,R0
   \   00000086   1848               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000088   0180               STRH     R1,[R0, #+0]
   1115              USB_CNTR_bit.ESOFM  = 1;
   \   0000008A   1748               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   0000008C   0088               LDRH     R0,[R0, #+0]
   \   0000008E   8021               MOVS     R1,#+128
   \   00000090   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000092   0143               ORRS     R1,R1,R0
   \   00000094   1448               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   00000096   0180               STRH     R1,[R0, #+0]
   \   00000098   21E0               B        ??USB_Resume_3
   1116              break;
   1117            case USB_RESUME_WAKE_UP_EVENT:  // resume by HOST
   1118              LineStates = USB_FNR & 0xC000;
   \                     ??USB_Resume_2:
   \   0000009A   1A48               LDR      R0,??USB_Resume_4+0x20  ;; 0xffffa848
   \   0000009C   0088               LDRH     R0,[R0, #+0]
   \   0000009E   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000A0   000C               LSRS     R0,R0,#+16
   \   000000A2   C021               MOVS     R1,#+192
   \   000000A4   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000000A6   0140               ANDS     R1,R1,R0
   \   000000A8   0D00               MOVS     R5,R1
   1119              if((LineStates == 0x8000) && (LineStates == 0x3000))
   \   000000AA   8020               MOVS     R0,#+128
   \   000000AC   0002               LSLS     R0,R0,#+8        ;; #+32768
   \   000000AE   8542               CMP      R5,R0
   \   000000B0   06D1               BNE      ??USB_Resume_5
   \   000000B2   C020               MOVS     R0,#+192
   \   000000B4   8001               LSLS     R0,R0,#+6        ;; #+12288
   \   000000B6   8542               CMP      R5,R0
   \   000000B8   02D1               BNE      ??USB_Resume_5
   1120              {
   1121                // noise return to suspend again
   1122                USB_Suspend();
   \   000000BA   ........           BL       USB_Suspend
   \   000000BE   0EE0               B        ??USB_Resume_3
   1123              }
   1124              else
   1125              {
   1126                // wake-up
   1127                CFG_USBFilterConfig(CFG_USBFilter_Disable);
   \                     ??USB_Resume_5:
   \   000000C0   0E48               LDR      R0,??USB_Resume_4+0x18  ;; 0xfffffdff
   \   000000C2   ........           BL       CFG_USBFilterConfig
   1128                USB_CNTR_bit.LPMODE = 0;
   \   000000C6   0848               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   000000C8   0088               LDRH     R0,[R0, #+0]
   \   000000CA   0D49               LDR      R1,??USB_Resume_4+0x1C  ;; 0xfffb
   \   000000CC   0140               ANDS     R1,R1,R0
   \   000000CE   0648               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   000000D0   0180               STRH     R1,[R0, #+0]
   1129                USB_CNTR_bit.FSUSP  = 0;  // Must be 0
   \   000000D2   0548               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   000000D4   0088               LDRH     R0,[R0, #+0]
   \   000000D6   0749               LDR      R1,??USB_Resume_4+0x10  ;; 0xfff7
   \   000000D8   0140               ANDS     R1,R1,R0
   \   000000DA   0348               LDR      R0,??USB_Resume_4+0x4  ;; 0xffffa840
   \   000000DC   0180               STRH     R1,[R0, #+0]
   1130              }
   1131              break;
   1132            }
   1133          }
   \                     ??USB_Resume_3:
   \   000000DE   38BC               POP      {R3-R5}
   \   000000E0   01BC               POP      {R0}
   \   000000E2   0047               BX       R0               ;; return
   \                     ??USB_Resume_4:
   \   000000E4   ........           DC32     DlyCnt
   \   000000E8   40A8FFFF           DC32     0xffffa840
   \   000000EC   FFFE0000           DC32     0xfeff
   \   000000F0   EFFF0000           DC32     0xffef
   \   000000F4   F7FF0000           DC32     0xfff7
   \   000000F8   ........           DC32     UsbUserFun + 164
   \   000000FC   FFFDFFFF           DC32     0xfffffdff
   \   00000100   FBFF0000           DC32     0xfffb
   \   00000104   48A8FFFF           DC32     0xffffa848
   \   00000108                      REQUIRE _A_USB_CNTR
   \   00000108                      REQUIRE _A_USB_FNR
   1134          
   1135          /*************************************************************************
   1136           * Function Name: USB_GetDevStatus
   1137           * Parameters: USB_DevStatusReqType_t Type
   1138           *
   1139           * Return: Boolean
   1140           *
   1141           * Description: Return USB device status
   1142           *
   1143           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1144          Boolean USB_GetDevStatus (USB_DevStatusReqType_t Type)
   1145          {
   \                     USB_GetDevStatus:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   1146            switch (Type)
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0800               MOVS     R0,R1
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   04D0               BEQ      ??USB_GetDevStatus_0
   \   0000000E   401E               SUBS     R0,R0,#+1
   \   00000010   04D0               BEQ      ??USB_GetDevStatus_1
   \   00000012   401E               SUBS     R0,R0,#+1
   \   00000014   0DD0               BEQ      ??USB_GetDevStatus_2
   \   00000016   11E0               B        ??USB_GetDevStatus_3
   1147            {
   1148            case USB_DevConnectStatus:
   1149              return(TRUE);
   \                     ??USB_GetDevStatus_0:
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   10E0               B        ??USB_GetDevStatus_4
   1150            case USB_SuspendStatus:
   1151              return(USB_CNTR_bit.FSUSP);
   \                     ??USB_GetDevStatus_1:
   \   0000001C   0948               LDR      R0,??USB_GetDevStatus_5  ;; 0xffffa840
   \   0000001E   0088               LDRH     R0,[R0, #+0]
   \   00000020   0822               MOVS     R2,#+8
   \   00000022   0240               ANDS     R2,R2,R0
   \   00000024   1000               MOVS     R0,R2
   \   00000026   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000028   000E               LSRS     R0,R0,#+24
   \   0000002A   C008               LSRS     R0,R0,#+3
   \   0000002C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000002E   000E               LSRS     R0,R0,#+24
   \   00000030   05E0               B        ??USB_GetDevStatus_4
   1152            case USB_ResetStatus:
   1153              return(USB_CNTR_bit.FRES);
   \                     ??USB_GetDevStatus_2:
   \   00000032   0448               LDR      R0,??USB_GetDevStatus_5  ;; 0xffffa840
   \   00000034   0288               LDRH     R2,[R0, #+0]
   \   00000036   0120               MOVS     R0,#+1
   \   00000038   1040               ANDS     R0,R0,R2
   \   0000003A   00E0               B        ??USB_GetDevStatus_4
   1154            }
   1155            return(FALSE);
   \                     ??USB_GetDevStatus_3:
   \   0000003C   0020               MOVS     R0,#+0
   \                     ??USB_GetDevStatus_4:
   \   0000003E   08BC               POP      {R3}
   \   00000040   02BC               POP      {R1}
   \   00000042   0847               BX       R1               ;; return
   \                     ??USB_GetDevStatus_5:
   \   00000044   40A8FFFF           DC32     0xffffa840
   \   00000048                      REQUIRE _A_USB_CNTR
   1156          }
   1157          
   1158          /*************************************************************************
   1159           * Function Name: USB_SetStallEP
   1160           * Parameters: USB_Endpoint_t EndPoint, Boolean Stall
   1161           *
   1162           * Return: USB_ErrorCodes_t
   1163           *
   1164           * Description: The endpoint stall/unstall
   1165           *
   1166           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1167          USB_ErrorCodes_t USB_SetStallEP (USB_Endpoint_t EndPoint, Boolean Stall)
   1168          {
   \                     USB_SetStallEP:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   1169            if( EpInfo[EndPoint].pEpCtrl == NULL)
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   1420               MOVS     R0,#+20
   \   0000000C   6043               MULS     R0,R4,R0
   \   0000000E   4449               LDR      R1,??USB_SetStallEP_0  ;; EpInfo
   \   00000010   0858               LDR      R0,[R1, R0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D1               BNE      ??USB_SetStallEP_1
   1170            {
   1171              return(USB_EP_NOT_VALID);
   \   00000016   0620               MOVS     R0,#+6
   \   00000018   7FE0               B        ??USB_SetStallEP_2
   1172            }
   1173          
   1174            if(Stall)
   \                     ??USB_SetStallEP_1:
   \   0000001A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000001C   2D0E               LSRS     R5,R5,#+24
   \   0000001E   002D               CMP      R5,#+0
   \   00000020   15D0               BEQ      ??USB_SetStallEP_3
   1175            {
   1176              if(EndPoint & 1)
   \   00000022   E007               LSLS     R0,R4,#+31
   \   00000024   09D5               BPL      ??USB_SetStallEP_4
   1177              {
   1178                // IN EP
   1179                EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_STALL);
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000002A   240E               LSRS     R4,R4,#+24
   \   0000002C   1420               MOVS     R0,#+20
   \   0000002E   6043               MULS     R0,R4,R0
   \   00000030   3B4A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   00000032   1058               LDR      R0,[R2, R0]
   \   00000034   ........           BL       EpCtrlSet_STAT_TX
   \   00000038   6EE0               B        ??USB_SetStallEP_5
   1180              }
   1181              else
   1182              {
   1183                // OUT EP
   1184                EpCtrlSet_STAT_RX(EpInfo[EndPoint].pEpCtrl,EP_STALL);
   \                     ??USB_SetStallEP_4:
   \   0000003A   0121               MOVS     R1,#+1
   \   0000003C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003E   240E               LSRS     R4,R4,#+24
   \   00000040   1420               MOVS     R0,#+20
   \   00000042   6043               MULS     R0,R4,R0
   \   00000044   364A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   00000046   1058               LDR      R0,[R2, R0]
   \   00000048   ........           BL       EpCtrlSet_STAT_RX
   \   0000004C   64E0               B        ??USB_SetStallEP_5
   1185              }
   1186            }
   1187            else if(EndPoint & 1)
   \                     ??USB_SetStallEP_3:
   \   0000004E   E007               LSLS     R0,R4,#+31
   \   00000050   31D5               BPL      ??USB_SetStallEP_6
   1188            {
   1189              // IN EP
   1190              // reset Data Toggle bit
   1191              switch(EpInfo[EndPoint].EpType)
   \   00000052   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000054   240E               LSRS     R4,R4,#+24
   \   00000056   1420               MOVS     R0,#+20
   \   00000058   6043               MULS     R0,R4,R0
   \   0000005A   3149               LDR      R1,??USB_SetStallEP_0  ;; EpInfo
   \   0000005C   0818               ADDS     R0,R1,R0
   \   0000005E   007B               LDRB     R0,[R0, #+12]
   \   00000060   0028               CMP      R0,#+0
   \   00000062   15D0               BEQ      ??USB_SetStallEP_7
   \   00000064   801E               SUBS     R0,R0,#+2
   \   00000066   0128               CMP      R0,#+1
   \   00000068   12D9               BLS      ??USB_SetStallEP_7
   \   0000006A   801E               SUBS     R0,R0,#+2
   \   0000006C   19D1               BNE      ??USB_SetStallEP_8
   1192              {
   1193              case EP_BULK_DOUB_BUF:
   1194                EpInfo[EndPoint].EpIntrFl = 1;
   \                     ??USB_SetStallEP_9:
   \   0000006E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000070   240E               LSRS     R4,R4,#+24
   \   00000072   1420               MOVS     R0,#+20
   \   00000074   6043               MULS     R0,R4,R0
   \   00000076   2A49               LDR      R1,??USB_SetStallEP_0  ;; EpInfo
   \   00000078   0818               ADDS     R0,R1,R0
   \   0000007A   0121               MOVS     R1,#+1
   \   0000007C   0161               STR      R1,[R0, #+16]
   1195                EpCtrlSet_DTOG_RX(EpInfo[EndPoint].pEpCtrl,0);
   \   0000007E   0021               MOVS     R1,#+0
   \   00000080   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000082   240E               LSRS     R4,R4,#+24
   \   00000084   1420               MOVS     R0,#+20
   \   00000086   6043               MULS     R0,R4,R0
   \   00000088   254A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   0000008A   1058               LDR      R0,[R2, R0]
   \   0000008C   ........           BL       EpCtrlSet_DTOG_RX
   1196              case EP_INTERRUPT:
   1197              case EP_ISO:
   1198              case EP_BULK_SING_BUFF:
   1199                EpCtrlSet_DTOG_TX(EpInfo[EndPoint].pEpCtrl,0);
   \                     ??USB_SetStallEP_7:
   \   00000090   0021               MOVS     R1,#+0
   \   00000092   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000094   240E               LSRS     R4,R4,#+24
   \   00000096   1420               MOVS     R0,#+20
   \   00000098   6043               MULS     R0,R4,R0
   \   0000009A   214A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   0000009C   1058               LDR      R0,[R2, R0]
   \   0000009E   ........           BL       EpCtrlSet_DTOG_TX
   1200              }
   1201              EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_NAK);
   \                     ??USB_SetStallEP_8:
   \   000000A2   0221               MOVS     R1,#+2
   \   000000A4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000A6   240E               LSRS     R4,R4,#+24
   \   000000A8   1420               MOVS     R0,#+20
   \   000000AA   6043               MULS     R0,R4,R0
   \   000000AC   1C4A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   000000AE   1058               LDR      R0,[R2, R0]
   \   000000B0   ........           BL       EpCtrlSet_STAT_TX
   \   000000B4   30E0               B        ??USB_SetStallEP_5
   1202            }
   1203            else
   1204            {
   1205              // OUT EP
   1206              // reset Data Toggle bit
   1207              switch(EpInfo[EndPoint].EpType)
   \                     ??USB_SetStallEP_6:
   \   000000B6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000B8   240E               LSRS     R4,R4,#+24
   \   000000BA   1420               MOVS     R0,#+20
   \   000000BC   6043               MULS     R0,R4,R0
   \   000000BE   1849               LDR      R1,??USB_SetStallEP_0  ;; EpInfo
   \   000000C0   0818               ADDS     R0,R1,R0
   \   000000C2   007B               LDRB     R0,[R0, #+12]
   \   000000C4   0028               CMP      R0,#+0
   \   000000C6   15D0               BEQ      ??USB_SetStallEP_10
   \   000000C8   801E               SUBS     R0,R0,#+2
   \   000000CA   0128               CMP      R0,#+1
   \   000000CC   12D9               BLS      ??USB_SetStallEP_10
   \   000000CE   801E               SUBS     R0,R0,#+2
   \   000000D0   19D1               BNE      ??USB_SetStallEP_11
   1208              {
   1209              case EP_BULK_DOUB_BUF:
   1210                EpInfo[EndPoint].EpIntrFl = 0;
   \                     ??USB_SetStallEP_12:
   \   000000D2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000D4   240E               LSRS     R4,R4,#+24
   \   000000D6   1420               MOVS     R0,#+20
   \   000000D8   6043               MULS     R0,R4,R0
   \   000000DA   1149               LDR      R1,??USB_SetStallEP_0  ;; EpInfo
   \   000000DC   0818               ADDS     R0,R1,R0
   \   000000DE   0021               MOVS     R1,#+0
   \   000000E0   0161               STR      R1,[R0, #+16]
   1211                EpCtrlSet_DTOG_TX(EpInfo[EndPoint].pEpCtrl,0);
   \   000000E2   0021               MOVS     R1,#+0
   \   000000E4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000E6   240E               LSRS     R4,R4,#+24
   \   000000E8   1420               MOVS     R0,#+20
   \   000000EA   6043               MULS     R0,R4,R0
   \   000000EC   0C4A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   000000EE   1058               LDR      R0,[R2, R0]
   \   000000F0   ........           BL       EpCtrlSet_DTOG_TX
   1212              case EP_INTERRUPT:
   1213              case EP_ISO:
   1214              case EP_BULK_SING_BUFF:
   1215                EpCtrlSet_DTOG_RX(EpInfo[EndPoint].pEpCtrl,0);
   \                     ??USB_SetStallEP_10:
   \   000000F4   0021               MOVS     R1,#+0
   \   000000F6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000F8   240E               LSRS     R4,R4,#+24
   \   000000FA   1420               MOVS     R0,#+20
   \   000000FC   6043               MULS     R0,R4,R0
   \   000000FE   084A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   00000100   1058               LDR      R0,[R2, R0]
   \   00000102   ........           BL       EpCtrlSet_DTOG_RX
   1216              }
   1217              EpCtrlSet_STAT_RX(EpInfo[EndPoint].pEpCtrl,EP_NAK);
   \                     ??USB_SetStallEP_11:
   \   00000106   0221               MOVS     R1,#+2
   \   00000108   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000010A   240E               LSRS     R4,R4,#+24
   \   0000010C   1420               MOVS     R0,#+20
   \   0000010E   6043               MULS     R0,R4,R0
   \   00000110   034A               LDR      R2,??USB_SetStallEP_0  ;; EpInfo
   \   00000112   1058               LDR      R0,[R2, R0]
   \   00000114   ........           BL       EpCtrlSet_STAT_RX
   1218            }
   1219            return(USB_OK);
   \                     ??USB_SetStallEP_5:
   \   00000118   0020               MOVS     R0,#+0
   \                     ??USB_SetStallEP_2:
   \   0000011A   38BC               POP      {R3-R5}
   \   0000011C   02BC               POP      {R1}
   \   0000011E   0847               BX       R1               ;; return
   \                     ??USB_SetStallEP_0:
   \   00000120   ........           DC32     EpInfo
   1220          }
   1221          
   1222          /*************************************************************************
   1223           * Function Name: USB_GetStallEP
   1224           * Parameters: USB_Endpoint_t EndPoint, pBoolean pStall
   1225           *
   1226           * Return: USB_ErrorCodes_t
   1227           *
   1228           * Description: Get stall state of the endpoint
   1229           *
   1230           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1231          static
   1232          USB_ErrorCodes_t USB_GetStallEP (USB_Endpoint_t EndPoint, pBoolean pStall)
   1233          {
   \                     USB_GetStallEP:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   1234            if(EpInfo[EndPoint].pEpCtrl == NULL)
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   1420               MOVS     R0,#+20
   \   0000000C   6043               MULS     R0,R4,R0
   \   0000000E   1449               LDR      R1,??USB_GetStallEP_0  ;; EpInfo
   \   00000010   0858               LDR      R0,[R1, R0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D1               BNE      ??USB_GetStallEP_1
   1235            {
   1236              return(USB_EP_NOT_VALID);
   \   00000016   0620               MOVS     R0,#+6
   \   00000018   1EE0               B        ??USB_GetStallEP_2
   1237            }
   1238            *pStall = (EndPoint & 1)?
   1239                      (EpCtrlGet_STAT_TX(EpInfo[EndPoint].pEpCtrl) == EP_STALL):  // IN EP
   1240                      (EpCtrlGet_STAT_RX(EpInfo[EndPoint].pEpCtrl) == EP_STALL);  // OUT EP
   \                     ??USB_GetStallEP_1:
   \   0000001A   E007               LSLS     R0,R4,#+31
   \   0000001C   0DD5               BPL      ??USB_GetStallEP_3
   \   0000001E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000020   240E               LSRS     R4,R4,#+24
   \   00000022   1420               MOVS     R0,#+20
   \   00000024   6043               MULS     R0,R4,R0
   \   00000026   0E49               LDR      R1,??USB_GetStallEP_0  ;; EpInfo
   \   00000028   0858               LDR      R0,[R1, R0]
   \   0000002A   ........           BL       EpCtrlGet_STAT_TX
   \   0000002E   0128               CMP      R0,#+1
   \   00000030   01D1               BNE      ??USB_GetStallEP_4
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   00E0               B        ??USB_GetStallEP_5
   \                     ??USB_GetStallEP_4:
   \   00000036   0020               MOVS     R0,#+0
   \                     ??USB_GetStallEP_5:
   \   00000038   0CE0               B        ??USB_GetStallEP_6
   \                     ??USB_GetStallEP_3:
   \   0000003A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003C   240E               LSRS     R4,R4,#+24
   \   0000003E   1420               MOVS     R0,#+20
   \   00000040   6043               MULS     R0,R4,R0
   \   00000042   0749               LDR      R1,??USB_GetStallEP_0  ;; EpInfo
   \   00000044   0858               LDR      R0,[R1, R0]
   \   00000046   ........           BL       EpCtrlGet_STAT_RX
   \   0000004A   0128               CMP      R0,#+1
   \   0000004C   01D1               BNE      ??USB_GetStallEP_7
   \   0000004E   0120               MOVS     R0,#+1
   \   00000050   00E0               B        ??USB_GetStallEP_8
   \                     ??USB_GetStallEP_7:
   \   00000052   0020               MOVS     R0,#+0
   \                     ??USB_GetStallEP_8:
   \                     ??USB_GetStallEP_6:
   \   00000054   2870               STRB     R0,[R5, #+0]
   1241            return (USB_OK);
   \   00000056   0020               MOVS     R0,#+0
   \                     ??USB_GetStallEP_2:
   \   00000058   38BC               POP      {R3-R5}
   \   0000005A   02BC               POP      {R1}
   \   0000005C   0847               BX       R1               ;; return
   \   0000005E   C046               Nop      
   \                     ??USB_GetStallEP_0:
   \   00000060   ........           DC32     EpInfo
   1242          }
   1243          
   1244          /*************************************************************************
   1245           * Function Name: USB_EpValidate
   1246           * Parameters: USB_Endpoint_t EndPoint, Boolean State
   1247           *
   1248           * Return: USB_ErrorCodes_t
   1249           *
   1250           * Description: Validate/Unvalidate EP buffer
   1251           *
   1252           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1253          USB_ErrorCodes_t USB_EpValidate( USB_Endpoint_t EndPoint, Boolean State)
   1254          {
   \                     USB_EpValidate:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   1255            if( EpInfo[EndPoint].pEpCtrl == NULL)
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   1420               MOVS     R0,#+20
   \   0000000C   6043               MULS     R0,R4,R0
   \   0000000E   2549               LDR      R1,??USB_EpValidate_0  ;; EpInfo
   \   00000010   0858               LDR      R0,[R1, R0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D1               BNE      ??USB_EpValidate_1
   1256            {
   1257              return(USB_EP_NOT_VALID);
   \   00000016   0620               MOVS     R0,#+6
   \   00000018   41E0               B        ??USB_EpValidate_2
   1258            }
   1259          
   1260            if(EndPoint & 1)
   \                     ??USB_EpValidate_1:
   \   0000001A   E007               LSLS     R0,R4,#+31
   \   0000001C   1FD5               BPL      ??USB_EpValidate_3
   1261            {
   1262            // IN EP (Tx)
   1263              if (State)
   \   0000001E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000020   2D0E               LSRS     R5,R5,#+24
   \   00000022   002D               CMP      R5,#+0
   \   00000024   09D0               BEQ      ??USB_EpValidate_4
   1264              {
   1265                // Validate buffer
   1266                 EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \   00000026   0321               MOVS     R1,#+3
   \   00000028   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000002A   240E               LSRS     R4,R4,#+24
   \   0000002C   1420               MOVS     R0,#+20
   \   0000002E   6043               MULS     R0,R4,R0
   \   00000030   1C4A               LDR      R2,??USB_EpValidate_0  ;; EpInfo
   \   00000032   1058               LDR      R0,[R2, R0]
   \   00000034   ........           BL       EpCtrlSet_STAT_TX
   \   00000038   30E0               B        ??USB_EpValidate_5
   1267              }
   1268              else
   1269              {
   1270                // Unvalidate buffer
   1271                EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_NAK);
   \                     ??USB_EpValidate_4:
   \   0000003A   0221               MOVS     R1,#+2
   \   0000003C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003E   240E               LSRS     R4,R4,#+24
   \   00000040   1420               MOVS     R0,#+20
   \   00000042   6043               MULS     R0,R4,R0
   \   00000044   174A               LDR      R2,??USB_EpValidate_0  ;; EpInfo
   \   00000046   1058               LDR      R0,[R2, R0]
   \   00000048   ........           BL       EpCtrlSet_STAT_TX
   1272                EpCtrlClr_CTR_TX(EpInfo[EndPoint].pEpCtrl);
   \   0000004C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000004E   240E               LSRS     R4,R4,#+24
   \   00000050   1420               MOVS     R0,#+20
   \   00000052   6043               MULS     R0,R4,R0
   \   00000054   1349               LDR      R1,??USB_EpValidate_0  ;; EpInfo
   \   00000056   0858               LDR      R0,[R1, R0]
   \   00000058   ........           BL       EpCtrlClr_CTR_TX
   \   0000005C   1EE0               B        ??USB_EpValidate_5
   1273              }
   1274            }
   1275            else
   1276            {
   1277            // OUT EP (Rx)
   1278              if (State)
   \                     ??USB_EpValidate_3:
   \   0000005E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000060   2D0E               LSRS     R5,R5,#+24
   \   00000062   002D               CMP      R5,#+0
   \   00000064   09D0               BEQ      ??USB_EpValidate_6
   1279              {
   1280                // Validate buffer
   1281                EpCtrlSet_STAT_RX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \   00000066   0321               MOVS     R1,#+3
   \   00000068   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000006A   240E               LSRS     R4,R4,#+24
   \   0000006C   1420               MOVS     R0,#+20
   \   0000006E   6043               MULS     R0,R4,R0
   \   00000070   0C4A               LDR      R2,??USB_EpValidate_0  ;; EpInfo
   \   00000072   1058               LDR      R0,[R2, R0]
   \   00000074   ........           BL       EpCtrlSet_STAT_RX
   \   00000078   10E0               B        ??USB_EpValidate_5
   1282              }
   1283              else
   1284              {
   1285                // Unvalidate buffer
   1286                EpCtrlSet_STAT_RX(EpInfo[EndPoint].pEpCtrl,EP_NAK);
   \                     ??USB_EpValidate_6:
   \   0000007A   0221               MOVS     R1,#+2
   \   0000007C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000007E   240E               LSRS     R4,R4,#+24
   \   00000080   1420               MOVS     R0,#+20
   \   00000082   6043               MULS     R0,R4,R0
   \   00000084   074A               LDR      R2,??USB_EpValidate_0  ;; EpInfo
   \   00000086   1058               LDR      R0,[R2, R0]
   \   00000088   ........           BL       EpCtrlSet_STAT_RX
   1287                EpCtrlClr_CTR_RX(EpInfo[EndPoint].pEpCtrl);
   \   0000008C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000008E   240E               LSRS     R4,R4,#+24
   \   00000090   1420               MOVS     R0,#+20
   \   00000092   6043               MULS     R0,R4,R0
   \   00000094   0349               LDR      R1,??USB_EpValidate_0  ;; EpInfo
   \   00000096   0858               LDR      R0,[R1, R0]
   \   00000098   ........           BL       EpCtrlClr_CTR_RX
   1288              }
   1289            }
   1290            return(USB_OK);
   \                     ??USB_EpValidate_5:
   \   0000009C   0020               MOVS     R0,#+0
   \                     ??USB_EpValidate_2:
   \   0000009E   38BC               POP      {R3-R5}
   \   000000A0   02BC               POP      {R1}
   \   000000A2   0847               BX       R1               ;; return
   \                     ??USB_EpValidate_0:
   \   000000A4   ........           DC32     EpInfo
   1291          }
   1292          
   1293          /*************************************************************************
   1294           * Function Name: USB_EpWrite
   1295           * Parameters: USB_Endpoint_t EndPoint, pInt8U pData, pInt32U pCount
   1296           *
   1297           * Return: USB_ErrorCodes_t
   1298           *
   1299           * Description: Endpoint Write (IN)
   1300           *
   1301           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1302          USB_ErrorCodes_t USB_EpWrite (USB_Endpoint_t EndPoint, pInt8U pData,
   1303                                        pInt32U pCount)
   1304          {
   \                     USB_EpWrite:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   1305          __usb_epr_bits EpState;
   1306          pInt32U pDst;
   1307          Int32U  ActSize, Temp, Count, CurrSize, SizeHold;
   1308          
   1309            ActSize = *pCount;
   \   00000008   0698               LDR      R0,[SP, #+24]
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   0390               STR      R0,[SP, #+12]
   1310            *pCount = 0;
   \   0000000E   0698               LDR      R0,[SP, #+24]
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0160               STR      R1,[R0, #+0]
   1311            if(EpInfo[EndPoint].pEpCtrl == NULL)
   \   00000014   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000016   240E               LSRS     R4,R4,#+24
   \   00000018   1420               MOVS     R0,#+20
   \   0000001A   6043               MULS     R0,R4,R0
   \   0000001C   E049               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   0000001E   0858               LDR      R0,[R1, R0]
   \   00000020   0028               CMP      R0,#+0
   \   00000022   02D1               BNE      ??USB_EpWrite_1
   1312            {
   1313              return(USB_EP_NOT_VALID);
   \   00000024   0620               MOVS     R0,#+6
   \   00000026   00F089FD           BL       ??USB_EpWrite_2
   1314            }
   1315          
   1316            EpState = *(__usb_epr_bits *)EpInfo[EndPoint].pEpCtrl;
   \                     ??USB_EpWrite_1:
   \   0000002A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000002C   240E               LSRS     R4,R4,#+24
   \   0000002E   1420               MOVS     R0,#+20
   \   00000030   6043               MULS     R0,R4,R0
   \   00000032   DB49               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   00000034   0858               LDR      R0,[R1, R0]
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   0290               STR      R0,[SP, #+8]
   1317          
   1318            if(EpState.STATTX == EP_DISABLED)
   \   0000003A   6846               MOV      R0,SP
   \   0000003C   0089               LDRH     R0,[R0, #+8]
   \   0000003E   3021               MOVS     R1,#+48
   \   00000040   0140               ANDS     R1,R1,R0
   \   00000042   0800               MOVS     R0,R1
   \   00000044   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000046   000E               LSRS     R0,R0,#+24
   \   00000048   0009               LSRS     R0,R0,#+4
   \   0000004A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000004C   000E               LSRS     R0,R0,#+24
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   02D1               BNE      ??USB_EpWrite_3
   1319            {
   1320              // Fatal error (require restart of the USB)
   1321              return(USB_EP_FATAL_ERROR);
   \   00000052   0A20               MOVS     R0,#+10
   \   00000054   00F072FD           BL       ??USB_EpWrite_2
   1322            }
   1323          
   1324            switch(EpInfo[EndPoint].EpType)
   \                     ??USB_EpWrite_3:
   \   00000058   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000005A   240E               LSRS     R4,R4,#+24
   \   0000005C   1420               MOVS     R0,#+20
   \   0000005E   6043               MULS     R0,R4,R0
   \   00000060   CF49               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   00000062   0818               ADDS     R0,R1,R0
   \   00000064   007B               LDRB     R0,[R0, #+12]
   \   00000066   0028               CMP      R0,#+0
   \   00000068   00D1               BNE      .+4
   \   0000006A   F2E2               B        ??USB_EpWrite_4
   \   0000006C   401E               SUBS     R0,R0,#+1
   \   0000006E   00D1               BNE      .+4
   \   00000070   D7E0               B        ??USB_EpWrite_5
   \   00000072   401E               SUBS     R0,R0,#+1
   \   00000074   00D1               BNE      .+4
   \   00000076   99E1               B        ??USB_EpWrite_6
   \   00000078   401E               SUBS     R0,R0,#+1
   \   0000007A   04D0               BEQ      ??USB_EpWrite_7
   \   0000007C   401E               SUBS     R0,R0,#+1
   \   0000007E   00D1               BNE      .+4
   \   00000080   B8E3               B        ??USB_EpWrite_8
   \   00000082   00F055FD           BL       ??USB_EpWrite_9
   1325            {
   1326            case EP_INTERRUPT:
   1327              if (EpState.STATTX == EP_STALL)
   \                     ??USB_EpWrite_7:
   \   00000086   6846               MOV      R0,SP
   \   00000088   0089               LDRH     R0,[R0, #+8]
   \   0000008A   3021               MOVS     R1,#+48
   \   0000008C   0140               ANDS     R1,R1,R0
   \   0000008E   0800               MOVS     R0,R1
   \   00000090   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000092   000E               LSRS     R0,R0,#+24
   \   00000094   0009               LSRS     R0,R0,#+4
   \   00000096   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000098   000E               LSRS     R0,R0,#+24
   \   0000009A   0128               CMP      R0,#+1
   \   0000009C   02D1               BNE      ??USB_EpWrite_10
   1328              {
   1329                // EP stalled
   1330                return(USB_EP_STALLED);
   \   0000009E   0820               MOVS     R0,#+8
   \   000000A0   00F04CFD           BL       ??USB_EpWrite_2
   1331              }
   1332              else if(EpState.STATTX == EP_VALID)
   \                     ??USB_EpWrite_10:
   \   000000A4   6846               MOV      R0,SP
   \   000000A6   0089               LDRH     R0,[R0, #+8]
   \   000000A8   3021               MOVS     R1,#+48
   \   000000AA   0140               ANDS     R1,R1,R0
   \   000000AC   0800               MOVS     R0,R1
   \   000000AE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000B0   000E               LSRS     R0,R0,#+24
   \   000000B2   0009               LSRS     R0,R0,#+4
   \   000000B4   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000B6   000E               LSRS     R0,R0,#+24
   \   000000B8   0328               CMP      R0,#+3
   \   000000BA   02D1               BNE      ??USB_EpWrite_11
   1333              {
   1334                // Data sending in progress
   1335                return(USB_OK);
   \   000000BC   0020               MOVS     R0,#+0
   \   000000BE   00F03DFD           BL       ??USB_EpWrite_2
   1336              }
   1337              // Get is smaller of user buffer and received data.
   1338              SizeHold = MIN(EpInfo[EndPoint].MaxSize,ActSize);
   \                     ??USB_EpWrite_11:
   \   000000C2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000C4   240E               LSRS     R4,R4,#+24
   \   000000C6   1420               MOVS     R0,#+20
   \   000000C8   6043               MULS     R0,R4,R0
   \   000000CA   B549               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   000000CC   0818               ADDS     R0,R1,R0
   \   000000CE   8068               LDR      R0,[R0, #+8]
   \   000000D0   0399               LDR      R1,[SP, #+12]
   \   000000D2   8842               CMP      R0,R1
   \   000000D4   08D2               BCS      ??USB_EpWrite_12
   \   000000D6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000D8   240E               LSRS     R4,R4,#+24
   \   000000DA   1420               MOVS     R0,#+20
   \   000000DC   6043               MULS     R0,R4,R0
   \   000000DE   B049               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   000000E0   0818               ADDS     R0,R1,R0
   \   000000E2   8068               LDR      R0,[R0, #+8]
   \   000000E4   0090               STR      R0,[SP, #+0]
   \   000000E6   01E0               B        ??USB_EpWrite_13
   \                     ??USB_EpWrite_12:
   \   000000E8   0398               LDR      R0,[SP, #+12]
   \   000000EA   0090               STR      R0,[SP, #+0]
   1339              WriteEpDTB_CountTx(EpInfo[EndPoint].EpSlot,SizeHold);
   \                     ??USB_EpWrite_13:
   \   000000EC   AD49               LDR      R1,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000EE   AE48               LDR      R0,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   000000F0   AC4A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000F2   801A               SUBS     R0,R0,R2
   \   000000F4   4008               LSRS     R0,R0,#+1
   \   000000F6   1838               SUBS     R0,R0,#+24
   \   000000F8   0722               MOVS     R2,#+7
   \   000000FA   9043               BICS     R0,R0,R2
   \   000000FC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000FE   240E               LSRS     R4,R4,#+24
   \   00000100   1422               MOVS     R2,#+20
   \   00000102   6243               MULS     R2,R4,R2
   \   00000104   A64B               LDR      R3,??USB_EpWrite_0  ;; EpInfo
   \   00000106   9A18               ADDS     R2,R3,R2
   \   00000108   1279               LDRB     R2,[R2, #+4]
   \   0000010A   0823               MOVS     R3,#+8
   \   0000010C   5A43               MULS     R2,R3,R2
   \   0000010E   8018               ADDS     R0,R0,R2
   \   00000110   801C               ADDS     R0,R0,#+2
   \   00000112   4000               LSLS     R0,R0,#+1
   \   00000114   0322               MOVS     R2,#+3
   \   00000116   9043               BICS     R0,R0,R2
   \   00000118   0818               ADDS     R0,R1,R0
   \   0000011A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000011C   240E               LSRS     R4,R4,#+24
   \   0000011E   1421               MOVS     R1,#+20
   \   00000120   6143               MULS     R1,R4,R1
   \   00000122   9F4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000124   5118               ADDS     R1,R2,R1
   \   00000126   0979               LDRB     R1,[R1, #+4]
   \   00000128   0822               MOVS     R2,#+8
   \   0000012A   5143               MULS     R1,R2,R1
   \   0000012C   0122               MOVS     R2,#+1
   \   0000012E   0A40               ANDS     R2,R2,R1
   \   00000130   0099               LDR      R1,[SP, #+0]
   \   00000132   8152               STRH     R1,[R0, R2]
   1340              pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   00000134   9B48               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000136   8446               MOV      R12,R0
   \   00000138   9A48               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000013A   9B49               LDR      R1,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   0000013C   994A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000013E   891A               SUBS     R1,R1,R2
   \   00000140   4908               LSRS     R1,R1,#+1
   \   00000142   1839               SUBS     R1,R1,#+24
   \   00000144   0722               MOVS     R2,#+7
   \   00000146   9143               BICS     R1,R1,R2
   \   00000148   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000014A   240E               LSRS     R4,R4,#+24
   \   0000014C   1423               MOVS     R3,#+20
   \   0000014E   6343               MULS     R3,R4,R3
   \   00000150   934A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000152   D218               ADDS     R2,R2,R3
   \   00000154   1379               LDRB     R3,[R2, #+4]
   \   00000156   0822               MOVS     R2,#+8
   \   00000158   5343               MULS     R3,R2,R3
   \   0000015A   C918               ADDS     R1,R1,R3
   \   0000015C   4900               LSLS     R1,R1,#+1
   \   0000015E   0322               MOVS     R2,#+3
   \   00000160   9143               BICS     R1,R1,R2
   \   00000162   4018               ADDS     R0,R0,R1
   \   00000164   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000166   240E               LSRS     R4,R4,#+24
   \   00000168   1421               MOVS     R1,#+20
   \   0000016A   6143               MULS     R1,R4,R1
   \   0000016C   8C4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   0000016E   5118               ADDS     R1,R2,R1
   \   00000170   0A79               LDRB     R2,[R1, #+4]
   \   00000172   0821               MOVS     R1,#+8
   \   00000174   4A43               MULS     R2,R1,R2
   \   00000176   0121               MOVS     R1,#+1
   \   00000178   1140               ANDS     R1,R1,R2
   \   0000017A   405A               LDRH     R0,[R0, R1]
   \   0000017C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000017E   000C               LSRS     R0,R0,#+16
   \   00000180   4100               LSLS     R1,R0,#+1
   \   00000182   0320               MOVS     R0,#+3
   \   00000184   8143               BICS     R1,R1,R0
   \   00000186   6046               MOV      R0,R12
   \   00000188   4018               ADDS     R0,R0,R1
   \   0000018A   8446               MOV      R12,R0
   \   0000018C   8548               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000018E   8649               LDR      R1,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   00000190   844A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000192   891A               SUBS     R1,R1,R2
   \   00000194   4908               LSRS     R1,R1,#+1
   \   00000196   1839               SUBS     R1,R1,#+24
   \   00000198   0722               MOVS     R2,#+7
   \   0000019A   9143               BICS     R1,R1,R2
   \   0000019C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000019E   240E               LSRS     R4,R4,#+24
   \   000001A0   1423               MOVS     R3,#+20
   \   000001A2   6343               MULS     R3,R4,R3
   \   000001A4   7E4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   000001A6   D218               ADDS     R2,R2,R3
   \   000001A8   1379               LDRB     R3,[R2, #+4]
   \   000001AA   0822               MOVS     R2,#+8
   \   000001AC   5343               MULS     R3,R2,R3
   \   000001AE   C918               ADDS     R1,R1,R3
   \   000001B0   4900               LSLS     R1,R1,#+1
   \   000001B2   0322               MOVS     R2,#+3
   \   000001B4   9143               BICS     R1,R1,R2
   \   000001B6   4018               ADDS     R0,R0,R1
   \   000001B8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001BA   240E               LSRS     R4,R4,#+24
   \   000001BC   1421               MOVS     R1,#+20
   \   000001BE   6143               MULS     R1,R4,R1
   \   000001C0   774A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   000001C2   5118               ADDS     R1,R2,R1
   \   000001C4   0A79               LDRB     R2,[R1, #+4]
   \   000001C6   0821               MOVS     R1,#+8
   \   000001C8   4A43               MULS     R2,R1,R2
   \   000001CA   0121               MOVS     R1,#+1
   \   000001CC   1140               ANDS     R1,R1,R2
   \   000001CE   405A               LDRH     R0,[R0, R1]
   \   000001D0   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000001D2   000C               LSRS     R0,R0,#+16
   \   000001D4   0121               MOVS     R1,#+1
   \   000001D6   0140               ANDS     R1,R1,R0
   \   000001D8   6046               MOV      R0,R12
   \   000001DA   4018               ADDS     R0,R0,R1
   \   000001DC   0600               MOVS     R6,R0
   1341              for (Count = 0; Count < SizeHold; ++Count)
   \   000001DE   0020               MOVS     R0,#+0
   \   000001E0   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_14:
   \   000001E2   0098               LDR      R0,[SP, #+0]
   \   000001E4   8742               CMP      R7,R0
   \   000001E6   11D2               BCS      ??USB_EpWrite_15
   1342              {
   1343                Temp  = *pData++;
   \   000001E8   2878               LDRB     R0,[R5, #+0]
   \   000001EA   0190               STR      R0,[SP, #+4]
   \   000001EC   6D1C               ADDS     R5,R5,#+1
   1344                if (++Count < SizeHold)
   \   000001EE   7F1C               ADDS     R7,R7,#+1
   \   000001F0   0098               LDR      R0,[SP, #+0]
   \   000001F2   8742               CMP      R7,R0
   \   000001F4   05D2               BCS      ??USB_EpWrite_16
   1345                {
   1346                  Temp |= (*pData++) << 8;
   \   000001F6   0198               LDR      R0,[SP, #+4]
   \   000001F8   2978               LDRB     R1,[R5, #+0]
   \   000001FA   0902               LSLS     R1,R1,#+8
   \   000001FC   0143               ORRS     R1,R1,R0
   \   000001FE   0191               STR      R1,[SP, #+4]
   \   00000200   6D1C               ADDS     R5,R5,#+1
   1347                }
   1348                *pDst++ = Temp;
   \                     ??USB_EpWrite_16:
   \   00000202   0198               LDR      R0,[SP, #+4]
   \   00000204   3060               STR      R0,[R6, #+0]
   \   00000206   361D               ADDS     R6,R6,#+4
   1349              }
   \   00000208   7F1C               ADDS     R7,R7,#+1
   \   0000020A   EAE7               B        ??USB_EpWrite_14
   1350              // Validate buffer
   1351              EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \                     ??USB_EpWrite_15:
   \   0000020C   0321               MOVS     R1,#+3
   \   0000020E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000210   240E               LSRS     R4,R4,#+24
   \   00000212   1420               MOVS     R0,#+20
   \   00000214   6043               MULS     R0,R4,R0
   \   00000216   624A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000218   1058               LDR      R0,[R2, R0]
   \   0000021A   ........           BL       EpCtrlSet_STAT_TX
   \   0000021E   00F089FC           BL       ??USB_EpWrite_17
   1352              break;
   1353            case EP_CTRL:
   1354              if(EpState.STATTX == EP_VALID)
   \                     ??USB_EpWrite_5:
   \   00000222   6846               MOV      R0,SP
   \   00000224   0089               LDRH     R0,[R0, #+8]
   \   00000226   3021               MOVS     R1,#+48
   \   00000228   0140               ANDS     R1,R1,R0
   \   0000022A   0800               MOVS     R0,R1
   \   0000022C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000022E   000E               LSRS     R0,R0,#+24
   \   00000230   0009               LSRS     R0,R0,#+4
   \   00000232   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000234   000E               LSRS     R0,R0,#+24
   \   00000236   0328               CMP      R0,#+3
   \   00000238   02D1               BNE      ??USB_EpWrite_18
   1355              {
   1356                // Data sending in progress
   1357                return(USB_OK);
   \   0000023A   0020               MOVS     R0,#+0
   \   0000023C   00F07EFC           BL       ??USB_EpWrite_2
   1358              }
   1359              // Get smaller of the user buffer and the received data.
   1360              SizeHold = MIN(EpInfo[EndPoint].MaxSize,ActSize);
   \                     ??USB_EpWrite_18:
   \   00000240   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000242   240E               LSRS     R4,R4,#+24
   \   00000244   1420               MOVS     R0,#+20
   \   00000246   6043               MULS     R0,R4,R0
   \   00000248   5549               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   0000024A   0818               ADDS     R0,R1,R0
   \   0000024C   8068               LDR      R0,[R0, #+8]
   \   0000024E   0399               LDR      R1,[SP, #+12]
   \   00000250   8842               CMP      R0,R1
   \   00000252   08D2               BCS      ??USB_EpWrite_19
   \   00000254   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000256   240E               LSRS     R4,R4,#+24
   \   00000258   1420               MOVS     R0,#+20
   \   0000025A   6043               MULS     R0,R4,R0
   \   0000025C   5049               LDR      R1,??USB_EpWrite_0  ;; EpInfo
   \   0000025E   0818               ADDS     R0,R1,R0
   \   00000260   8068               LDR      R0,[R0, #+8]
   \   00000262   0090               STR      R0,[SP, #+0]
   \   00000264   01E0               B        ??USB_EpWrite_20
   \                     ??USB_EpWrite_19:
   \   00000266   0398               LDR      R0,[SP, #+12]
   \   00000268   0090               STR      R0,[SP, #+0]
   1361              WriteEpDTB_CountTx(EpInfo[EndPoint].EpSlot,SizeHold);
   \                     ??USB_EpWrite_20:
   \   0000026A   4E49               LDR      R1,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000026C   4E48               LDR      R0,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   0000026E   4D4A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000270   801A               SUBS     R0,R0,R2
   \   00000272   4008               LSRS     R0,R0,#+1
   \   00000274   1838               SUBS     R0,R0,#+24
   \   00000276   0722               MOVS     R2,#+7
   \   00000278   9043               BICS     R0,R0,R2
   \   0000027A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000027C   240E               LSRS     R4,R4,#+24
   \   0000027E   1422               MOVS     R2,#+20
   \   00000280   6243               MULS     R2,R4,R2
   \   00000282   474B               LDR      R3,??USB_EpWrite_0  ;; EpInfo
   \   00000284   9A18               ADDS     R2,R3,R2
   \   00000286   1279               LDRB     R2,[R2, #+4]
   \   00000288   0823               MOVS     R3,#+8
   \   0000028A   5A43               MULS     R2,R3,R2
   \   0000028C   8018               ADDS     R0,R0,R2
   \   0000028E   801C               ADDS     R0,R0,#+2
   \   00000290   4000               LSLS     R0,R0,#+1
   \   00000292   0322               MOVS     R2,#+3
   \   00000294   9043               BICS     R0,R0,R2
   \   00000296   0818               ADDS     R0,R1,R0
   \   00000298   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000029A   240E               LSRS     R4,R4,#+24
   \   0000029C   1421               MOVS     R1,#+20
   \   0000029E   6143               MULS     R1,R4,R1
   \   000002A0   3F4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   000002A2   5118               ADDS     R1,R2,R1
   \   000002A4   0979               LDRB     R1,[R1, #+4]
   \   000002A6   0822               MOVS     R2,#+8
   \   000002A8   5143               MULS     R1,R2,R1
   \   000002AA   0122               MOVS     R2,#+1
   \   000002AC   0A40               ANDS     R2,R2,R1
   \   000002AE   0099               LDR      R1,[SP, #+0]
   \   000002B0   8152               STRH     R1,[R0, R2]
   1362              pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   000002B2   3C48               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000002B4   8446               MOV      R12,R0
   \   000002B6   3B48               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000002B8   3B49               LDR      R1,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   000002BA   3A4A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000002BC   891A               SUBS     R1,R1,R2
   \   000002BE   4908               LSRS     R1,R1,#+1
   \   000002C0   1839               SUBS     R1,R1,#+24
   \   000002C2   0722               MOVS     R2,#+7
   \   000002C4   9143               BICS     R1,R1,R2
   \   000002C6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002C8   240E               LSRS     R4,R4,#+24
   \   000002CA   1423               MOVS     R3,#+20
   \   000002CC   6343               MULS     R3,R4,R3
   \   000002CE   344A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   000002D0   D218               ADDS     R2,R2,R3
   \   000002D2   1379               LDRB     R3,[R2, #+4]
   \   000002D4   0822               MOVS     R2,#+8
   \   000002D6   5343               MULS     R3,R2,R3
   \   000002D8   C918               ADDS     R1,R1,R3
   \   000002DA   4900               LSLS     R1,R1,#+1
   \   000002DC   0322               MOVS     R2,#+3
   \   000002DE   9143               BICS     R1,R1,R2
   \   000002E0   4018               ADDS     R0,R0,R1
   \   000002E2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002E4   240E               LSRS     R4,R4,#+24
   \   000002E6   1421               MOVS     R1,#+20
   \   000002E8   6143               MULS     R1,R4,R1
   \   000002EA   2D4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   000002EC   5118               ADDS     R1,R2,R1
   \   000002EE   0A79               LDRB     R2,[R1, #+4]
   \   000002F0   0821               MOVS     R1,#+8
   \   000002F2   4A43               MULS     R2,R1,R2
   \   000002F4   0121               MOVS     R1,#+1
   \   000002F6   1140               ANDS     R1,R1,R2
   \   000002F8   405A               LDRH     R0,[R0, R1]
   \   000002FA   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000002FC   000C               LSRS     R0,R0,#+16
   \   000002FE   4100               LSLS     R1,R0,#+1
   \   00000300   0320               MOVS     R0,#+3
   \   00000302   8143               BICS     R1,R1,R0
   \   00000304   6046               MOV      R0,R12
   \   00000306   4018               ADDS     R0,R0,R1
   \   00000308   8446               MOV      R12,R0
   \   0000030A   2648               LDR      R0,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000030C   2649               LDR      R1,??USB_EpWrite_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   0000030E   254A               LDR      R2,??USB_EpWrite_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000310   891A               SUBS     R1,R1,R2
   \   00000312   4908               LSRS     R1,R1,#+1
   \   00000314   1839               SUBS     R1,R1,#+24
   \   00000316   0722               MOVS     R2,#+7
   \   00000318   9143               BICS     R1,R1,R2
   \   0000031A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000031C   240E               LSRS     R4,R4,#+24
   \   0000031E   1423               MOVS     R3,#+20
   \   00000320   6343               MULS     R3,R4,R3
   \   00000322   1F4A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000324   D218               ADDS     R2,R2,R3
   \   00000326   1379               LDRB     R3,[R2, #+4]
   \   00000328   0822               MOVS     R2,#+8
   \   0000032A   5343               MULS     R3,R2,R3
   \   0000032C   C918               ADDS     R1,R1,R3
   \   0000032E   4900               LSLS     R1,R1,#+1
   \   00000330   0322               MOVS     R2,#+3
   \   00000332   9143               BICS     R1,R1,R2
   \   00000334   4018               ADDS     R0,R0,R1
   \   00000336   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000338   240E               LSRS     R4,R4,#+24
   \   0000033A   1421               MOVS     R1,#+20
   \   0000033C   6143               MULS     R1,R4,R1
   \   0000033E   184A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000340   5118               ADDS     R1,R2,R1
   \   00000342   0A79               LDRB     R2,[R1, #+4]
   \   00000344   0821               MOVS     R1,#+8
   \   00000346   4A43               MULS     R2,R1,R2
   \   00000348   0121               MOVS     R1,#+1
   \   0000034A   1140               ANDS     R1,R1,R2
   \   0000034C   405A               LDRH     R0,[R0, R1]
   \   0000034E   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000350   000C               LSRS     R0,R0,#+16
   \   00000352   0121               MOVS     R1,#+1
   \   00000354   0140               ANDS     R1,R1,R0
   \   00000356   6046               MOV      R0,R12
   \   00000358   4018               ADDS     R0,R0,R1
   \   0000035A   0600               MOVS     R6,R0
   1363              for (Count = 0; Count < SizeHold; ++Count)
   \   0000035C   0020               MOVS     R0,#+0
   \   0000035E   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_21:
   \   00000360   0098               LDR      R0,[SP, #+0]
   \   00000362   8742               CMP      R7,R0
   \   00000364   11D2               BCS      ??USB_EpWrite_22
   1364              {
   1365                Temp  = *pData++;
   \   00000366   2878               LDRB     R0,[R5, #+0]
   \   00000368   0190               STR      R0,[SP, #+4]
   \   0000036A   6D1C               ADDS     R5,R5,#+1
   1366                if (++Count < SizeHold)
   \   0000036C   7F1C               ADDS     R7,R7,#+1
   \   0000036E   0098               LDR      R0,[SP, #+0]
   \   00000370   8742               CMP      R7,R0
   \   00000372   05D2               BCS      ??USB_EpWrite_23
   1367                {
   1368                  Temp |= (*pData++) << 8;
   \   00000374   0198               LDR      R0,[SP, #+4]
   \   00000376   2978               LDRB     R1,[R5, #+0]
   \   00000378   0902               LSLS     R1,R1,#+8
   \   0000037A   0143               ORRS     R1,R1,R0
   \   0000037C   0191               STR      R1,[SP, #+4]
   \   0000037E   6D1C               ADDS     R5,R5,#+1
   1369                }
   1370                *pDst++ = Temp;
   \                     ??USB_EpWrite_23:
   \   00000380   0198               LDR      R0,[SP, #+4]
   \   00000382   3060               STR      R0,[R6, #+0]
   \   00000384   361D               ADDS     R6,R6,#+4
   1371              }
   \   00000386   7F1C               ADDS     R7,R7,#+1
   \   00000388   EAE7               B        ??USB_EpWrite_21
   1372              // Validate buffer
   1373              EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \                     ??USB_EpWrite_22:
   \   0000038A   0321               MOVS     R1,#+3
   \   0000038C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000038E   240E               LSRS     R4,R4,#+24
   \   00000390   1420               MOVS     R0,#+20
   \   00000392   6043               MULS     R0,R4,R0
   \   00000394   024A               LDR      R2,??USB_EpWrite_0  ;; EpInfo
   \   00000396   1058               LDR      R0,[R2, R0]
   \   00000398   ........           BL       EpCtrlSet_STAT_TX
   \   0000039C   CAE3               B        ??USB_EpWrite_17
   \   0000039E   C046               Nop      
   \                     ??USB_EpWrite_0:
   \   000003A0   ........           DC32     EpInfo
   \   000003A4   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   000003A8   ........           DC32     SFE(USB_PACKET_MEMORY)
   1374              break;
   1375            case EP_ISO:
   1376              if(EpState.DTOGTX)
   \                     ??USB_EpWrite_6:
   \   000003AC   6846               MOV      R0,SP
   \   000003AE   0089               LDRH     R0,[R0, #+8]
   \   000003B0   4006               LSLS     R0,R0,#+25
   \   000003B2   00D4               BMI      .+4
   \   000003B4   A5E0               B        ??USB_EpWrite_24
   1377              {
   1378                // Tx Buffer
   1379                pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   000003B6   BE48               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   000003B8   8446               MOV      R12,R0
   \   000003BA   BD48               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   000003BC   BD49               LDR      R1,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000003BE   BC4A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   000003C0   891A               SUBS     R1,R1,R2
   \   000003C2   4908               LSRS     R1,R1,#+1
   \   000003C4   1839               SUBS     R1,R1,#+24
   \   000003C6   0722               MOVS     R2,#+7
   \   000003C8   9143               BICS     R1,R1,R2
   \   000003CA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003CC   240E               LSRS     R4,R4,#+24
   \   000003CE   1423               MOVS     R3,#+20
   \   000003D0   6343               MULS     R3,R4,R3
   \   000003D2   B94A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000003D4   D218               ADDS     R2,R2,R3
   \   000003D6   1379               LDRB     R3,[R2, #+4]
   \   000003D8   0822               MOVS     R2,#+8
   \   000003DA   5343               MULS     R3,R2,R3
   \   000003DC   C918               ADDS     R1,R1,R3
   \   000003DE   4900               LSLS     R1,R1,#+1
   \   000003E0   0322               MOVS     R2,#+3
   \   000003E2   9143               BICS     R1,R1,R2
   \   000003E4   4018               ADDS     R0,R0,R1
   \   000003E6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003E8   240E               LSRS     R4,R4,#+24
   \   000003EA   1421               MOVS     R1,#+20
   \   000003EC   6143               MULS     R1,R4,R1
   \   000003EE   B24A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000003F0   5118               ADDS     R1,R2,R1
   \   000003F2   0A79               LDRB     R2,[R1, #+4]
   \   000003F4   0821               MOVS     R1,#+8
   \   000003F6   4A43               MULS     R2,R1,R2
   \   000003F8   0121               MOVS     R1,#+1
   \   000003FA   1140               ANDS     R1,R1,R2
   \   000003FC   405A               LDRH     R0,[R0, R1]
   \   000003FE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000400   000C               LSRS     R0,R0,#+16
   \   00000402   4100               LSLS     R1,R0,#+1
   \   00000404   0320               MOVS     R0,#+3
   \   00000406   8143               BICS     R1,R1,R0
   \   00000408   6046               MOV      R0,R12
   \   0000040A   4018               ADDS     R0,R0,R1
   \   0000040C   8446               MOV      R12,R0
   \   0000040E   A848               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   00000410   A849               LDR      R1,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000412   A74A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   00000414   891A               SUBS     R1,R1,R2
   \   00000416   4908               LSRS     R1,R1,#+1
   \   00000418   1839               SUBS     R1,R1,#+24
   \   0000041A   0722               MOVS     R2,#+7
   \   0000041C   9143               BICS     R1,R1,R2
   \   0000041E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000420   240E               LSRS     R4,R4,#+24
   \   00000422   1423               MOVS     R3,#+20
   \   00000424   6343               MULS     R3,R4,R3
   \   00000426   A44A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000428   D218               ADDS     R2,R2,R3
   \   0000042A   1379               LDRB     R3,[R2, #+4]
   \   0000042C   0822               MOVS     R2,#+8
   \   0000042E   5343               MULS     R3,R2,R3
   \   00000430   C918               ADDS     R1,R1,R3
   \   00000432   4900               LSLS     R1,R1,#+1
   \   00000434   0322               MOVS     R2,#+3
   \   00000436   9143               BICS     R1,R1,R2
   \   00000438   4018               ADDS     R0,R0,R1
   \   0000043A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000043C   240E               LSRS     R4,R4,#+24
   \   0000043E   1421               MOVS     R1,#+20
   \   00000440   6143               MULS     R1,R4,R1
   \   00000442   9D4A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000444   5118               ADDS     R1,R2,R1
   \   00000446   0A79               LDRB     R2,[R1, #+4]
   \   00000448   0821               MOVS     R1,#+8
   \   0000044A   4A43               MULS     R2,R1,R2
   \   0000044C   0121               MOVS     R1,#+1
   \   0000044E   1140               ANDS     R1,R1,R2
   \   00000450   405A               LDRH     R0,[R0, R1]
   \   00000452   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000454   000C               LSRS     R0,R0,#+16
   \   00000456   0121               MOVS     R1,#+1
   \   00000458   0140               ANDS     R1,R1,R0
   \   0000045A   6046               MOV      R0,R12
   \   0000045C   4018               ADDS     R0,R0,R1
   \   0000045E   0600               MOVS     R6,R0
   1380                // Get smaller of the user buffer and the received data.
   1381                SizeHold = MIN(EpInfo[EndPoint].MaxSize,SizeHold);
   \   00000460   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000462   240E               LSRS     R4,R4,#+24
   \   00000464   1420               MOVS     R0,#+20
   \   00000466   6043               MULS     R0,R4,R0
   \   00000468   9349               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   0000046A   0818               ADDS     R0,R1,R0
   \   0000046C   8068               LDR      R0,[R0, #+8]
   \   0000046E   0099               LDR      R1,[SP, #+0]
   \   00000470   8842               CMP      R0,R1
   \   00000472   08D2               BCS      ??USB_EpWrite_26
   \   00000474   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000476   240E               LSRS     R4,R4,#+24
   \   00000478   1420               MOVS     R0,#+20
   \   0000047A   6043               MULS     R0,R4,R0
   \   0000047C   8E49               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   0000047E   0818               ADDS     R0,R1,R0
   \   00000480   8068               LDR      R0,[R0, #+8]
   \   00000482   0090               STR      R0,[SP, #+0]
   \   00000484   01E0               B        ??USB_EpWrite_27
   \                     ??USB_EpWrite_26:
   \   00000486   0098               LDR      R0,[SP, #+0]
   \   00000488   0090               STR      R0,[SP, #+0]
   1382                for (Count = 0; Count < SizeHold; ++Count)
   \                     ??USB_EpWrite_27:
   \   0000048A   0020               MOVS     R0,#+0
   \   0000048C   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_28:
   \   0000048E   0098               LDR      R0,[SP, #+0]
   \   00000490   8742               CMP      R7,R0
   \   00000492   11D2               BCS      ??USB_EpWrite_29
   1383                {
   1384                  Temp  = *pData++;
   \   00000494   2878               LDRB     R0,[R5, #+0]
   \   00000496   0190               STR      R0,[SP, #+4]
   \   00000498   6D1C               ADDS     R5,R5,#+1
   1385                  if (++Count < SizeHold)
   \   0000049A   7F1C               ADDS     R7,R7,#+1
   \   0000049C   0098               LDR      R0,[SP, #+0]
   \   0000049E   8742               CMP      R7,R0
   \   000004A0   05D2               BCS      ??USB_EpWrite_30
   1386                  {
   1387                    Temp |= (*pData++) << 8;
   \   000004A2   0198               LDR      R0,[SP, #+4]
   \   000004A4   2978               LDRB     R1,[R5, #+0]
   \   000004A6   0902               LSLS     R1,R1,#+8
   \   000004A8   0143               ORRS     R1,R1,R0
   \   000004AA   0191               STR      R1,[SP, #+4]
   \   000004AC   6D1C               ADDS     R5,R5,#+1
   1388                  }
   1389                  *pDst++ = Temp;
   \                     ??USB_EpWrite_30:
   \   000004AE   0198               LDR      R0,[SP, #+4]
   \   000004B0   3060               STR      R0,[R6, #+0]
   \   000004B2   361D               ADDS     R6,R6,#+4
   1390                }
   \   000004B4   7F1C               ADDS     R7,R7,#+1
   \   000004B6   EAE7               B        ??USB_EpWrite_28
   1391                WriteEpDTB_CountTx(EpInfo[EndPoint].EpSlot,SizeHold);
   \                     ??USB_EpWrite_29:
   \   000004B8   7D49               LDR      R1,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   000004BA   7E48               LDR      R0,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000004BC   7C4A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   000004BE   801A               SUBS     R0,R0,R2
   \   000004C0   4008               LSRS     R0,R0,#+1
   \   000004C2   1838               SUBS     R0,R0,#+24
   \   000004C4   0722               MOVS     R2,#+7
   \   000004C6   9043               BICS     R0,R0,R2
   \   000004C8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004CA   240E               LSRS     R4,R4,#+24
   \   000004CC   1422               MOVS     R2,#+20
   \   000004CE   6243               MULS     R2,R4,R2
   \   000004D0   794B               LDR      R3,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000004D2   9A18               ADDS     R2,R3,R2
   \   000004D4   1279               LDRB     R2,[R2, #+4]
   \   000004D6   0823               MOVS     R3,#+8
   \   000004D8   5A43               MULS     R2,R3,R2
   \   000004DA   8018               ADDS     R0,R0,R2
   \   000004DC   801C               ADDS     R0,R0,#+2
   \   000004DE   4000               LSLS     R0,R0,#+1
   \   000004E0   0322               MOVS     R2,#+3
   \   000004E2   9043               BICS     R0,R0,R2
   \   000004E4   0818               ADDS     R0,R1,R0
   \   000004E6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004E8   240E               LSRS     R4,R4,#+24
   \   000004EA   1421               MOVS     R1,#+20
   \   000004EC   6143               MULS     R1,R4,R1
   \   000004EE   724A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000004F0   5118               ADDS     R1,R2,R1
   \   000004F2   0979               LDRB     R1,[R1, #+4]
   \   000004F4   0822               MOVS     R2,#+8
   \   000004F6   5143               MULS     R1,R2,R1
   \   000004F8   0122               MOVS     R2,#+1
   \   000004FA   0A40               ANDS     R2,R2,R1
   \   000004FC   0099               LDR      R1,[SP, #+0]
   \   000004FE   8152               STRH     R1,[R0, R2]
   \   00000500   18E3               B        ??USB_EpWrite_17
   1392              }
   1393              else
   1394              {
   1395                // Rx Buffer
   1396                pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \                     ??USB_EpWrite_24:
   \   00000502   6B48               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   00000504   8446               MOV      R12,R0
   \   00000506   6A48               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   00000508   6A49               LDR      R1,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000050A   694A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   0000050C   891A               SUBS     R1,R1,R2
   \   0000050E   4908               LSRS     R1,R1,#+1
   \   00000510   1839               SUBS     R1,R1,#+24
   \   00000512   0722               MOVS     R2,#+7
   \   00000514   9143               BICS     R1,R1,R2
   \   00000516   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000518   240E               LSRS     R4,R4,#+24
   \   0000051A   1423               MOVS     R3,#+20
   \   0000051C   6343               MULS     R3,R4,R3
   \   0000051E   664A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000520   D218               ADDS     R2,R2,R3
   \   00000522   1379               LDRB     R3,[R2, #+4]
   \   00000524   0822               MOVS     R2,#+8
   \   00000526   5343               MULS     R3,R2,R3
   \   00000528   C918               ADDS     R1,R1,R3
   \   0000052A   091D               ADDS     R1,R1,#+4
   \   0000052C   4900               LSLS     R1,R1,#+1
   \   0000052E   0322               MOVS     R2,#+3
   \   00000530   9143               BICS     R1,R1,R2
   \   00000532   4018               ADDS     R0,R0,R1
   \   00000534   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000536   240E               LSRS     R4,R4,#+24
   \   00000538   1421               MOVS     R1,#+20
   \   0000053A   6143               MULS     R1,R4,R1
   \   0000053C   5E4A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   0000053E   5118               ADDS     R1,R2,R1
   \   00000540   0A79               LDRB     R2,[R1, #+4]
   \   00000542   0821               MOVS     R1,#+8
   \   00000544   4A43               MULS     R2,R1,R2
   \   00000546   0121               MOVS     R1,#+1
   \   00000548   1140               ANDS     R1,R1,R2
   \   0000054A   405A               LDRH     R0,[R0, R1]
   \   0000054C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000054E   000C               LSRS     R0,R0,#+16
   \   00000550   4100               LSLS     R1,R0,#+1
   \   00000552   0320               MOVS     R0,#+3
   \   00000554   8143               BICS     R1,R1,R0
   \   00000556   6046               MOV      R0,R12
   \   00000558   4018               ADDS     R0,R0,R1
   \   0000055A   8446               MOV      R12,R0
   \   0000055C   5448               LDR      R0,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   0000055E   5549               LDR      R1,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000560   534A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   00000562   891A               SUBS     R1,R1,R2
   \   00000564   4908               LSRS     R1,R1,#+1
   \   00000566   1839               SUBS     R1,R1,#+24
   \   00000568   0722               MOVS     R2,#+7
   \   0000056A   9143               BICS     R1,R1,R2
   \   0000056C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000056E   240E               LSRS     R4,R4,#+24
   \   00000570   1423               MOVS     R3,#+20
   \   00000572   6343               MULS     R3,R4,R3
   \   00000574   504A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000576   D218               ADDS     R2,R2,R3
   \   00000578   1379               LDRB     R3,[R2, #+4]
   \   0000057A   0822               MOVS     R2,#+8
   \   0000057C   5343               MULS     R3,R2,R3
   \   0000057E   C918               ADDS     R1,R1,R3
   \   00000580   091D               ADDS     R1,R1,#+4
   \   00000582   4900               LSLS     R1,R1,#+1
   \   00000584   0322               MOVS     R2,#+3
   \   00000586   9143               BICS     R1,R1,R2
   \   00000588   4018               ADDS     R0,R0,R1
   \   0000058A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000058C   240E               LSRS     R4,R4,#+24
   \   0000058E   1421               MOVS     R1,#+20
   \   00000590   6143               MULS     R1,R4,R1
   \   00000592   494A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000594   5118               ADDS     R1,R2,R1
   \   00000596   0A79               LDRB     R2,[R1, #+4]
   \   00000598   0821               MOVS     R1,#+8
   \   0000059A   4A43               MULS     R2,R1,R2
   \   0000059C   0121               MOVS     R1,#+1
   \   0000059E   1140               ANDS     R1,R1,R2
   \   000005A0   405A               LDRH     R0,[R0, R1]
   \   000005A2   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000005A4   000C               LSRS     R0,R0,#+16
   \   000005A6   0121               MOVS     R1,#+1
   \   000005A8   0140               ANDS     R1,R1,R0
   \   000005AA   6046               MOV      R0,R12
   \   000005AC   4018               ADDS     R0,R0,R1
   \   000005AE   0600               MOVS     R6,R0
   1397                // Get smaller of the user buffer and the received data.
   1398                SizeHold = MIN(EpInfo[EndPoint].MaxSize,SizeHold);
   \   000005B0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000005B2   240E               LSRS     R4,R4,#+24
   \   000005B4   1420               MOVS     R0,#+20
   \   000005B6   6043               MULS     R0,R4,R0
   \   000005B8   3F49               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000005BA   0818               ADDS     R0,R1,R0
   \   000005BC   8068               LDR      R0,[R0, #+8]
   \   000005BE   0099               LDR      R1,[SP, #+0]
   \   000005C0   8842               CMP      R0,R1
   \   000005C2   08D2               BCS      ??USB_EpWrite_31
   \   000005C4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000005C6   240E               LSRS     R4,R4,#+24
   \   000005C8   1420               MOVS     R0,#+20
   \   000005CA   6043               MULS     R0,R4,R0
   \   000005CC   3A49               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000005CE   0818               ADDS     R0,R1,R0
   \   000005D0   8068               LDR      R0,[R0, #+8]
   \   000005D2   0090               STR      R0,[SP, #+0]
   \   000005D4   01E0               B        ??USB_EpWrite_32
   \                     ??USB_EpWrite_31:
   \   000005D6   0098               LDR      R0,[SP, #+0]
   \   000005D8   0090               STR      R0,[SP, #+0]
   1399                for (Count = 0; Count < SizeHold; ++Count)
   \                     ??USB_EpWrite_32:
   \   000005DA   0020               MOVS     R0,#+0
   \   000005DC   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_33:
   \   000005DE   0098               LDR      R0,[SP, #+0]
   \   000005E0   8742               CMP      R7,R0
   \   000005E2   11D2               BCS      ??USB_EpWrite_34
   1400                {
   1401                  Temp  = *pData++;
   \   000005E4   2878               LDRB     R0,[R5, #+0]
   \   000005E6   0190               STR      R0,[SP, #+4]
   \   000005E8   6D1C               ADDS     R5,R5,#+1
   1402                  if (++Count < SizeHold)
   \   000005EA   7F1C               ADDS     R7,R7,#+1
   \   000005EC   0098               LDR      R0,[SP, #+0]
   \   000005EE   8742               CMP      R7,R0
   \   000005F0   05D2               BCS      ??USB_EpWrite_35
   1403                  {
   1404                    Temp |= (*pData++) << 8;
   \   000005F2   0198               LDR      R0,[SP, #+4]
   \   000005F4   2978               LDRB     R1,[R5, #+0]
   \   000005F6   0902               LSLS     R1,R1,#+8
   \   000005F8   0143               ORRS     R1,R1,R0
   \   000005FA   0191               STR      R1,[SP, #+4]
   \   000005FC   6D1C               ADDS     R5,R5,#+1
   1405                  }
   1406                  *pDst++ = Temp;
   \                     ??USB_EpWrite_35:
   \   000005FE   0198               LDR      R0,[SP, #+4]
   \   00000600   3060               STR      R0,[R6, #+0]
   \   00000602   361D               ADDS     R6,R6,#+4
   1407                }
   \   00000604   7F1C               ADDS     R7,R7,#+1
   \   00000606   EAE7               B        ??USB_EpWrite_33
   1408                WriteEpDTB_CountRx(EpInfo[EndPoint].EpSlot,SizeHold);
   \                     ??USB_EpWrite_34:
   \   00000608   2949               LDR      R1,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   0000060A   2A48               LDR      R0,??USB_EpWrite_25+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000060C   284A               LDR      R2,??USB_EpWrite_25  ;; SFB(USB_PACKET_MEMORY)
   \   0000060E   801A               SUBS     R0,R0,R2
   \   00000610   4008               LSRS     R0,R0,#+1
   \   00000612   1838               SUBS     R0,R0,#+24
   \   00000614   0722               MOVS     R2,#+7
   \   00000616   9043               BICS     R0,R0,R2
   \   00000618   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000061A   240E               LSRS     R4,R4,#+24
   \   0000061C   1422               MOVS     R2,#+20
   \   0000061E   6243               MULS     R2,R4,R2
   \   00000620   254B               LDR      R3,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000622   9A18               ADDS     R2,R3,R2
   \   00000624   1279               LDRB     R2,[R2, #+4]
   \   00000626   0823               MOVS     R3,#+8
   \   00000628   5A43               MULS     R2,R3,R2
   \   0000062A   8018               ADDS     R0,R0,R2
   \   0000062C   801D               ADDS     R0,R0,#+6
   \   0000062E   4000               LSLS     R0,R0,#+1
   \   00000630   0322               MOVS     R2,#+3
   \   00000632   9043               BICS     R0,R0,R2
   \   00000634   0818               ADDS     R0,R1,R0
   \   00000636   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000638   240E               LSRS     R4,R4,#+24
   \   0000063A   1421               MOVS     R1,#+20
   \   0000063C   6143               MULS     R1,R4,R1
   \   0000063E   1E4A               LDR      R2,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000640   5118               ADDS     R1,R2,R1
   \   00000642   0979               LDRB     R1,[R1, #+4]
   \   00000644   0822               MOVS     R2,#+8
   \   00000646   5143               MULS     R1,R2,R1
   \   00000648   0122               MOVS     R2,#+1
   \   0000064A   0A40               ANDS     R2,R2,R1
   \   0000064C   0099               LDR      R1,[SP, #+0]
   \   0000064E   8152               STRH     R1,[R0, R2]
   \   00000650   70E2               B        ??USB_EpWrite_17
   1409              }
   1410              break;
   1411            case EP_BULK_SING_BUFF:
   1412              if (EpState.STATTX == EP_STALL)
   \                     ??USB_EpWrite_4:
   \   00000652   6846               MOV      R0,SP
   \   00000654   0089               LDRH     R0,[R0, #+8]
   \   00000656   3021               MOVS     R1,#+48
   \   00000658   0140               ANDS     R1,R1,R0
   \   0000065A   0800               MOVS     R0,R1
   \   0000065C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000065E   000E               LSRS     R0,R0,#+24
   \   00000660   0009               LSRS     R0,R0,#+4
   \   00000662   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000664   000E               LSRS     R0,R0,#+24
   \   00000666   0128               CMP      R0,#+1
   \   00000668   01D1               BNE      ??USB_EpWrite_36
   1413              {
   1414                // EP stalled
   1415                return(USB_EP_STALLED);
   \   0000066A   0820               MOVS     R0,#+8
   \   0000066C   66E2               B        ??USB_EpWrite_2
   1416              }
   1417              else if(EpState.STATTX == EP_VALID)
   \                     ??USB_EpWrite_36:
   \   0000066E   6846               MOV      R0,SP
   \   00000670   0089               LDRH     R0,[R0, #+8]
   \   00000672   3021               MOVS     R1,#+48
   \   00000674   0140               ANDS     R1,R1,R0
   \   00000676   0800               MOVS     R0,R1
   \   00000678   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000067A   000E               LSRS     R0,R0,#+24
   \   0000067C   0009               LSRS     R0,R0,#+4
   \   0000067E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000680   000E               LSRS     R0,R0,#+24
   \   00000682   0328               CMP      R0,#+3
   \   00000684   01D1               BNE      ??USB_EpWrite_37
   1418              {
   1419                // Data sending in progress
   1420                return(USB_OK);
   \   00000686   0020               MOVS     R0,#+0
   \   00000688   58E2               B        ??USB_EpWrite_2
   1421              }
   1422              /// Get smaller of the user buffer and the received data.
   1423              SizeHold = MIN(EpInfo[EndPoint].MaxSize,ActSize);
   \                     ??USB_EpWrite_37:
   \   0000068A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000068C   240E               LSRS     R4,R4,#+24
   \   0000068E   1420               MOVS     R0,#+20
   \   00000690   6043               MULS     R0,R4,R0
   \   00000692   0949               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   00000694   0818               ADDS     R0,R1,R0
   \   00000696   8068               LDR      R0,[R0, #+8]
   \   00000698   0399               LDR      R1,[SP, #+12]
   \   0000069A   8842               CMP      R0,R1
   \   0000069C   0ED2               BCS      ??USB_EpWrite_38
   \   0000069E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006A0   240E               LSRS     R4,R4,#+24
   \   000006A2   1420               MOVS     R0,#+20
   \   000006A4   6043               MULS     R0,R4,R0
   \   000006A6   0449               LDR      R1,??USB_EpWrite_25+0x8  ;; EpInfo
   \   000006A8   0818               ADDS     R0,R1,R0
   \   000006AA   8068               LDR      R0,[R0, #+8]
   \   000006AC   0090               STR      R0,[SP, #+0]
   \   000006AE   07E0               B        ??USB_EpWrite_39
   \                     ??USB_EpWrite_25:
   \   000006B0   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   000006B4   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   000006B8   ........           DC32     EpInfo
   \                     ??USB_EpWrite_38:
   \   000006BC   0398               LDR      R0,[SP, #+12]
   \   000006BE   0090               STR      R0,[SP, #+0]
   1424              WriteEpDTB_CountTx(EpInfo[EndPoint].EpSlot,SizeHold);
   \                     ??USB_EpWrite_39:
   \   000006C0   B649               LDR      R1,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   000006C2   B748               LDR      R0,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000006C4   B54A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   000006C6   801A               SUBS     R0,R0,R2
   \   000006C8   4008               LSRS     R0,R0,#+1
   \   000006CA   1838               SUBS     R0,R0,#+24
   \   000006CC   0722               MOVS     R2,#+7
   \   000006CE   9043               BICS     R0,R0,R2
   \   000006D0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006D2   240E               LSRS     R4,R4,#+24
   \   000006D4   1422               MOVS     R2,#+20
   \   000006D6   6243               MULS     R2,R4,R2
   \   000006D8   B24B               LDR      R3,??USB_EpWrite_40+0x8  ;; EpInfo
   \   000006DA   9A18               ADDS     R2,R3,R2
   \   000006DC   1279               LDRB     R2,[R2, #+4]
   \   000006DE   0823               MOVS     R3,#+8
   \   000006E0   5A43               MULS     R2,R3,R2
   \   000006E2   8018               ADDS     R0,R0,R2
   \   000006E4   801C               ADDS     R0,R0,#+2
   \   000006E6   4000               LSLS     R0,R0,#+1
   \   000006E8   0322               MOVS     R2,#+3
   \   000006EA   9043               BICS     R0,R0,R2
   \   000006EC   0818               ADDS     R0,R1,R0
   \   000006EE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006F0   240E               LSRS     R4,R4,#+24
   \   000006F2   1421               MOVS     R1,#+20
   \   000006F4   6143               MULS     R1,R4,R1
   \   000006F6   AB4A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   000006F8   5118               ADDS     R1,R2,R1
   \   000006FA   0979               LDRB     R1,[R1, #+4]
   \   000006FC   0822               MOVS     R2,#+8
   \   000006FE   5143               MULS     R1,R2,R1
   \   00000700   0122               MOVS     R2,#+1
   \   00000702   0A40               ANDS     R2,R2,R1
   \   00000704   0099               LDR      R1,[SP, #+0]
   \   00000706   8152               STRH     R1,[R0, R2]
   1425          
   1426              pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   00000708   A448               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   0000070A   8446               MOV      R12,R0
   \   0000070C   A348               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   0000070E   A449               LDR      R1,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000710   A24A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000712   891A               SUBS     R1,R1,R2
   \   00000714   4908               LSRS     R1,R1,#+1
   \   00000716   1839               SUBS     R1,R1,#+24
   \   00000718   0722               MOVS     R2,#+7
   \   0000071A   9143               BICS     R1,R1,R2
   \   0000071C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000071E   240E               LSRS     R4,R4,#+24
   \   00000720   1423               MOVS     R3,#+20
   \   00000722   6343               MULS     R3,R4,R3
   \   00000724   9F4A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000726   D218               ADDS     R2,R2,R3
   \   00000728   1379               LDRB     R3,[R2, #+4]
   \   0000072A   0822               MOVS     R2,#+8
   \   0000072C   5343               MULS     R3,R2,R3
   \   0000072E   C918               ADDS     R1,R1,R3
   \   00000730   4900               LSLS     R1,R1,#+1
   \   00000732   0322               MOVS     R2,#+3
   \   00000734   9143               BICS     R1,R1,R2
   \   00000736   4018               ADDS     R0,R0,R1
   \   00000738   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000073A   240E               LSRS     R4,R4,#+24
   \   0000073C   1421               MOVS     R1,#+20
   \   0000073E   6143               MULS     R1,R4,R1
   \   00000740   984A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000742   5118               ADDS     R1,R2,R1
   \   00000744   0A79               LDRB     R2,[R1, #+4]
   \   00000746   0821               MOVS     R1,#+8
   \   00000748   4A43               MULS     R2,R1,R2
   \   0000074A   0121               MOVS     R1,#+1
   \   0000074C   1140               ANDS     R1,R1,R2
   \   0000074E   405A               LDRH     R0,[R0, R1]
   \   00000750   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000752   000C               LSRS     R0,R0,#+16
   \   00000754   4100               LSLS     R1,R0,#+1
   \   00000756   0320               MOVS     R0,#+3
   \   00000758   8143               BICS     R1,R1,R0
   \   0000075A   6046               MOV      R0,R12
   \   0000075C   4018               ADDS     R0,R0,R1
   \   0000075E   8446               MOV      R12,R0
   \   00000760   8E48               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000762   8F49               LDR      R1,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000764   8D4A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000766   891A               SUBS     R1,R1,R2
   \   00000768   4908               LSRS     R1,R1,#+1
   \   0000076A   1839               SUBS     R1,R1,#+24
   \   0000076C   0722               MOVS     R2,#+7
   \   0000076E   9143               BICS     R1,R1,R2
   \   00000770   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000772   240E               LSRS     R4,R4,#+24
   \   00000774   1423               MOVS     R3,#+20
   \   00000776   6343               MULS     R3,R4,R3
   \   00000778   8A4A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   0000077A   D218               ADDS     R2,R2,R3
   \   0000077C   1379               LDRB     R3,[R2, #+4]
   \   0000077E   0822               MOVS     R2,#+8
   \   00000780   5343               MULS     R3,R2,R3
   \   00000782   C918               ADDS     R1,R1,R3
   \   00000784   4900               LSLS     R1,R1,#+1
   \   00000786   0322               MOVS     R2,#+3
   \   00000788   9143               BICS     R1,R1,R2
   \   0000078A   4018               ADDS     R0,R0,R1
   \   0000078C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000078E   240E               LSRS     R4,R4,#+24
   \   00000790   1421               MOVS     R1,#+20
   \   00000792   6143               MULS     R1,R4,R1
   \   00000794   834A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000796   5118               ADDS     R1,R2,R1
   \   00000798   0A79               LDRB     R2,[R1, #+4]
   \   0000079A   0821               MOVS     R1,#+8
   \   0000079C   4A43               MULS     R2,R1,R2
   \   0000079E   0121               MOVS     R1,#+1
   \   000007A0   1140               ANDS     R1,R1,R2
   \   000007A2   405A               LDRH     R0,[R0, R1]
   \   000007A4   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000007A6   000C               LSRS     R0,R0,#+16
   \   000007A8   0121               MOVS     R1,#+1
   \   000007AA   0140               ANDS     R1,R1,R0
   \   000007AC   6046               MOV      R0,R12
   \   000007AE   4018               ADDS     R0,R0,R1
   \   000007B0   0600               MOVS     R6,R0
   1427              for (Count = 0; Count < SizeHold; ++Count)
   \   000007B2   0020               MOVS     R0,#+0
   \   000007B4   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_41:
   \   000007B6   0098               LDR      R0,[SP, #+0]
   \   000007B8   8742               CMP      R7,R0
   \   000007BA   11D2               BCS      ??USB_EpWrite_42
   1428              {
   1429                Temp  = *pData++;
   \   000007BC   2878               LDRB     R0,[R5, #+0]
   \   000007BE   0190               STR      R0,[SP, #+4]
   \   000007C0   6D1C               ADDS     R5,R5,#+1
   1430                if (++Count < SizeHold)
   \   000007C2   7F1C               ADDS     R7,R7,#+1
   \   000007C4   0098               LDR      R0,[SP, #+0]
   \   000007C6   8742               CMP      R7,R0
   \   000007C8   05D2               BCS      ??USB_EpWrite_43
   1431                {
   1432                  Temp |= (*pData++) << 8;
   \   000007CA   0198               LDR      R0,[SP, #+4]
   \   000007CC   2978               LDRB     R1,[R5, #+0]
   \   000007CE   0902               LSLS     R1,R1,#+8
   \   000007D0   0143               ORRS     R1,R1,R0
   \   000007D2   0191               STR      R1,[SP, #+4]
   \   000007D4   6D1C               ADDS     R5,R5,#+1
   1433                }
   1434                *pDst++ = Temp;
   \                     ??USB_EpWrite_43:
   \   000007D6   0198               LDR      R0,[SP, #+4]
   \   000007D8   3060               STR      R0,[R6, #+0]
   \   000007DA   361D               ADDS     R6,R6,#+4
   1435              }
   \   000007DC   7F1C               ADDS     R7,R7,#+1
   \   000007DE   EAE7               B        ??USB_EpWrite_41
   1436              // Validate buffer
   1437              EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \                     ??USB_EpWrite_42:
   \   000007E0   0321               MOVS     R1,#+3
   \   000007E2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000007E4   240E               LSRS     R4,R4,#+24
   \   000007E6   1420               MOVS     R0,#+20
   \   000007E8   6043               MULS     R0,R4,R0
   \   000007EA   6E4A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   000007EC   1058               LDR      R0,[R2, R0]
   \   000007EE   ........           BL       EpCtrlSet_STAT_TX
   \   000007F2   9FE1               B        ??USB_EpWrite_17
   1438              break;
   1439            case EP_BULK_DOUB_BUF:
   1440              // Double buffered
   1441              if (EpState.STATTX == EP_STALL)
   \                     ??USB_EpWrite_8:
   \   000007F4   6846               MOV      R0,SP
   \   000007F6   0089               LDRH     R0,[R0, #+8]
   \   000007F8   3021               MOVS     R1,#+48
   \   000007FA   0140               ANDS     R1,R1,R0
   \   000007FC   0800               MOVS     R0,R1
   \   000007FE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000800   000E               LSRS     R0,R0,#+24
   \   00000802   0009               LSRS     R0,R0,#+4
   \   00000804   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000806   000E               LSRS     R0,R0,#+24
   \   00000808   0128               CMP      R0,#+1
   \   0000080A   01D1               BNE      ??USB_EpWrite_44
   1442              {
   1443                // EP stalled
   1444                return(USB_EP_STALLED);
   \   0000080C   0820               MOVS     R0,#+8
   \   0000080E   95E1               B        ??USB_EpWrite_2
   1445              }
   1446          
   1447              SizeHold = 0;
   \                     ??USB_EpWrite_44:
   \   00000810   0020               MOVS     R0,#+0
   \   00000812   0090               STR      R0,[SP, #+0]
   1448              do
   1449              {
   1450                // Check for a pending TX interrupt
   1451                if(!EpCtrlGet_CTR_TX(EpInfo[EndPoint].pEpCtrl) &&
   1452                   !EpInfo[EndPoint].EpIntrFl &&
   1453                   (EpState.DTOGRX == EpCtrlGet_DTOG_TX(EpInfo[EndPoint].pEpCtrl)))
   \                     ??USB_EpWrite_45:
   \   00000814   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000816   240E               LSRS     R4,R4,#+24
   \   00000818   1420               MOVS     R0,#+20
   \   0000081A   6043               MULS     R0,R4,R0
   \   0000081C   6149               LDR      R1,??USB_EpWrite_40+0x8  ;; EpInfo
   \   0000081E   0858               LDR      R0,[R1, R0]
   \   00000820   ........           BL       EpCtrlGet_CTR_TX
   \   00000824   0028               CMP      R0,#+0
   \   00000826   20D1               BNE      ??USB_EpWrite_46
   \   00000828   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000082A   240E               LSRS     R4,R4,#+24
   \   0000082C   1420               MOVS     R0,#+20
   \   0000082E   6043               MULS     R0,R4,R0
   \   00000830   5C49               LDR      R1,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000832   0818               ADDS     R0,R1,R0
   \   00000834   0069               LDR      R0,[R0, #+16]
   \   00000836   0028               CMP      R0,#+0
   \   00000838   17D1               BNE      ??USB_EpWrite_46
   \   0000083A   6846               MOV      R0,SP
   \   0000083C   0089               LDRH     R0,[R0, #+8]
   \   0000083E   8021               MOVS     R1,#+128
   \   00000840   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   00000842   0140               ANDS     R1,R1,R0
   \   00000844   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000846   090C               LSRS     R1,R1,#+16
   \   00000848   890B               LSRS     R1,R1,#+14
   \   0000084A   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   0000084C   090C               LSRS     R1,R1,#+16
   \   0000084E   02B5               PUSH     {R1,LR}
   \   00000850   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000852   240E               LSRS     R4,R4,#+24
   \   00000854   1420               MOVS     R0,#+20
   \   00000856   6043               MULS     R0,R4,R0
   \   00000858   5249               LDR      R1,??USB_EpWrite_40+0x8  ;; EpInfo
   \   0000085A   0858               LDR      R0,[R1, R0]
   \   0000085C   ........           BL       EpCtrlGet_DTOG_TX
   \   00000860   0099               LDR      R1,[SP, #0]
   \   00000862   02B0               ADD      SP,SP,#+8
   \   00000864   8142               CMP      R1,R0
   \   00000866   00D1               BNE      .+4
   \   00000868   64E1               B        ??USB_EpWrite_17
   1454                {
   1455                  // All buffers are filled
   1456                  break;
   1457                }
   1458          
   1459                // Get smaller of the rest of the user buffer and the received data.
   1460                CurrSize = MIN(EpInfo[EndPoint].MaxSize,(ActSize-SizeHold));
   \                     ??USB_EpWrite_46:
   \   0000086A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000086C   240E               LSRS     R4,R4,#+24
   \   0000086E   1420               MOVS     R0,#+20
   \   00000870   6043               MULS     R0,R4,R0
   \   00000872   4C49               LDR      R1,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000874   0818               ADDS     R0,R1,R0
   \   00000876   8068               LDR      R0,[R0, #+8]
   \   00000878   0399               LDR      R1,[SP, #+12]
   \   0000087A   009A               LDR      R2,[SP, #+0]
   \   0000087C   891A               SUBS     R1,R1,R2
   \   0000087E   8842               CMP      R0,R1
   \   00000880   08D2               BCS      ??USB_EpWrite_47
   \   00000882   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000884   240E               LSRS     R4,R4,#+24
   \   00000886   1420               MOVS     R0,#+20
   \   00000888   6043               MULS     R0,R4,R0
   \   0000088A   4649               LDR      R1,??USB_EpWrite_40+0x8  ;; EpInfo
   \   0000088C   0818               ADDS     R0,R1,R0
   \   0000088E   8068               LDR      R0,[R0, #+8]
   \   00000890   0490               STR      R0,[SP, #+16]
   \   00000892   03E0               B        ??USB_EpWrite_48
   \                     ??USB_EpWrite_47:
   \   00000894   0398               LDR      R0,[SP, #+12]
   \   00000896   0099               LDR      R1,[SP, #+0]
   \   00000898   401A               SUBS     R0,R0,R1
   \   0000089A   0490               STR      R0,[SP, #+16]
   1461          
   1462                if(!EpState.DTOGRX)
   \                     ??USB_EpWrite_48:
   \   0000089C   6846               MOV      R0,SP
   \   0000089E   0089               LDRH     R0,[R0, #+8]
   \   000008A0   4004               LSLS     R0,R0,#+17
   \   000008A2   00D5               BPL      .+4
   \   000008A4   80E0               B        ??USB_EpWrite_49
   1463                {
   1464                  // Tx Buffer
   1465                  pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   000008A6   3D48               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   000008A8   8446               MOV      R12,R0
   \   000008AA   3C48               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   000008AC   3C49               LDR      R1,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000008AE   3B4A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   000008B0   891A               SUBS     R1,R1,R2
   \   000008B2   4908               LSRS     R1,R1,#+1
   \   000008B4   1839               SUBS     R1,R1,#+24
   \   000008B6   0722               MOVS     R2,#+7
   \   000008B8   9143               BICS     R1,R1,R2
   \   000008BA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000008BC   240E               LSRS     R4,R4,#+24
   \   000008BE   1423               MOVS     R3,#+20
   \   000008C0   6343               MULS     R3,R4,R3
   \   000008C2   384A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   000008C4   D218               ADDS     R2,R2,R3
   \   000008C6   1379               LDRB     R3,[R2, #+4]
   \   000008C8   0822               MOVS     R2,#+8
   \   000008CA   5343               MULS     R3,R2,R3
   \   000008CC   C918               ADDS     R1,R1,R3
   \   000008CE   4900               LSLS     R1,R1,#+1
   \   000008D0   0322               MOVS     R2,#+3
   \   000008D2   9143               BICS     R1,R1,R2
   \   000008D4   4018               ADDS     R0,R0,R1
   \   000008D6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000008D8   240E               LSRS     R4,R4,#+24
   \   000008DA   1421               MOVS     R1,#+20
   \   000008DC   6143               MULS     R1,R4,R1
   \   000008DE   314A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   000008E0   5118               ADDS     R1,R2,R1
   \   000008E2   0A79               LDRB     R2,[R1, #+4]
   \   000008E4   0821               MOVS     R1,#+8
   \   000008E6   4A43               MULS     R2,R1,R2
   \   000008E8   0121               MOVS     R1,#+1
   \   000008EA   1140               ANDS     R1,R1,R2
   \   000008EC   405A               LDRH     R0,[R0, R1]
   \   000008EE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000008F0   000C               LSRS     R0,R0,#+16
   \   000008F2   4100               LSLS     R1,R0,#+1
   \   000008F4   0320               MOVS     R0,#+3
   \   000008F6   8143               BICS     R1,R1,R0
   \   000008F8   6046               MOV      R0,R12
   \   000008FA   4018               ADDS     R0,R0,R1
   \   000008FC   8446               MOV      R12,R0
   \   000008FE   2748               LDR      R0,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000900   2749               LDR      R1,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000902   264A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000904   891A               SUBS     R1,R1,R2
   \   00000906   4908               LSRS     R1,R1,#+1
   \   00000908   1839               SUBS     R1,R1,#+24
   \   0000090A   0722               MOVS     R2,#+7
   \   0000090C   9143               BICS     R1,R1,R2
   \   0000090E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000910   240E               LSRS     R4,R4,#+24
   \   00000912   1423               MOVS     R3,#+20
   \   00000914   6343               MULS     R3,R4,R3
   \   00000916   234A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000918   D218               ADDS     R2,R2,R3
   \   0000091A   1379               LDRB     R3,[R2, #+4]
   \   0000091C   0822               MOVS     R2,#+8
   \   0000091E   5343               MULS     R3,R2,R3
   \   00000920   C918               ADDS     R1,R1,R3
   \   00000922   4900               LSLS     R1,R1,#+1
   \   00000924   0322               MOVS     R2,#+3
   \   00000926   9143               BICS     R1,R1,R2
   \   00000928   4018               ADDS     R0,R0,R1
   \   0000092A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000092C   240E               LSRS     R4,R4,#+24
   \   0000092E   1421               MOVS     R1,#+20
   \   00000930   6143               MULS     R1,R4,R1
   \   00000932   1C4A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000934   5118               ADDS     R1,R2,R1
   \   00000936   0A79               LDRB     R2,[R1, #+4]
   \   00000938   0821               MOVS     R1,#+8
   \   0000093A   4A43               MULS     R2,R1,R2
   \   0000093C   0121               MOVS     R1,#+1
   \   0000093E   1140               ANDS     R1,R1,R2
   \   00000940   405A               LDRH     R0,[R0, R1]
   \   00000942   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000944   000C               LSRS     R0,R0,#+16
   \   00000946   0121               MOVS     R1,#+1
   \   00000948   0140               ANDS     R1,R1,R0
   \   0000094A   6046               MOV      R0,R12
   \   0000094C   4018               ADDS     R0,R0,R1
   \   0000094E   0600               MOVS     R6,R0
   1466                  WriteEpDTB_CountTx(EpInfo[EndPoint].EpSlot,CurrSize);
   \   00000950   1249               LDR      R1,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000952   1348               LDR      R0,??USB_EpWrite_40+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000954   114A               LDR      R2,??USB_EpWrite_40  ;; SFB(USB_PACKET_MEMORY)
   \   00000956   801A               SUBS     R0,R0,R2
   \   00000958   4008               LSRS     R0,R0,#+1
   \   0000095A   1838               SUBS     R0,R0,#+24
   \   0000095C   0722               MOVS     R2,#+7
   \   0000095E   9043               BICS     R0,R0,R2
   \   00000960   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000962   240E               LSRS     R4,R4,#+24
   \   00000964   1422               MOVS     R2,#+20
   \   00000966   6243               MULS     R2,R4,R2
   \   00000968   0E4B               LDR      R3,??USB_EpWrite_40+0x8  ;; EpInfo
   \   0000096A   9A18               ADDS     R2,R3,R2
   \   0000096C   1279               LDRB     R2,[R2, #+4]
   \   0000096E   0823               MOVS     R3,#+8
   \   00000970   5A43               MULS     R2,R3,R2
   \   00000972   8018               ADDS     R0,R0,R2
   \   00000974   801C               ADDS     R0,R0,#+2
   \   00000976   4000               LSLS     R0,R0,#+1
   \   00000978   0322               MOVS     R2,#+3
   \   0000097A   9043               BICS     R0,R0,R2
   \   0000097C   0818               ADDS     R0,R1,R0
   \   0000097E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000980   240E               LSRS     R4,R4,#+24
   \   00000982   1421               MOVS     R1,#+20
   \   00000984   6143               MULS     R1,R4,R1
   \   00000986   074A               LDR      R2,??USB_EpWrite_40+0x8  ;; EpInfo
   \   00000988   5118               ADDS     R1,R2,R1
   \   0000098A   0979               LDRB     R1,[R1, #+4]
   \   0000098C   0822               MOVS     R2,#+8
   \   0000098E   5143               MULS     R1,R2,R1
   \   00000990   0122               MOVS     R2,#+1
   \   00000992   0A40               ANDS     R2,R2,R1
   \   00000994   0499               LDR      R1,[SP, #+16]
   \   00000996   8152               STRH     R1,[R0, R2]
   \   00000998   81E0               B        ??USB_EpWrite_50
   \   0000099A   C046               Nop      
   \                     ??USB_EpWrite_40:
   \   0000099C   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   000009A0   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   000009A4   ........           DC32     EpInfo
   1467                }
   1468                else
   1469                {
   1470                  // Rx Buffer
   1471                  pDst = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \                     ??USB_EpWrite_49:
   \   000009A8   6648               LDR      R0,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   000009AA   8446               MOV      R12,R0
   \   000009AC   6548               LDR      R0,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   000009AE   6649               LDR      R1,??USB_EpWrite_51+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000009B0   644A               LDR      R2,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   000009B2   891A               SUBS     R1,R1,R2
   \   000009B4   4908               LSRS     R1,R1,#+1
   \   000009B6   1839               SUBS     R1,R1,#+24
   \   000009B8   0722               MOVS     R2,#+7
   \   000009BA   9143               BICS     R1,R1,R2
   \   000009BC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000009BE   240E               LSRS     R4,R4,#+24
   \   000009C0   1423               MOVS     R3,#+20
   \   000009C2   6343               MULS     R3,R4,R3
   \   000009C4   614A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   000009C6   D218               ADDS     R2,R2,R3
   \   000009C8   1379               LDRB     R3,[R2, #+4]
   \   000009CA   0822               MOVS     R2,#+8
   \   000009CC   5343               MULS     R3,R2,R3
   \   000009CE   C918               ADDS     R1,R1,R3
   \   000009D0   091D               ADDS     R1,R1,#+4
   \   000009D2   4900               LSLS     R1,R1,#+1
   \   000009D4   0322               MOVS     R2,#+3
   \   000009D6   9143               BICS     R1,R1,R2
   \   000009D8   4018               ADDS     R0,R0,R1
   \   000009DA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000009DC   240E               LSRS     R4,R4,#+24
   \   000009DE   1421               MOVS     R1,#+20
   \   000009E0   6143               MULS     R1,R4,R1
   \   000009E2   5A4A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   000009E4   5118               ADDS     R1,R2,R1
   \   000009E6   0A79               LDRB     R2,[R1, #+4]
   \   000009E8   0821               MOVS     R1,#+8
   \   000009EA   4A43               MULS     R2,R1,R2
   \   000009EC   0121               MOVS     R1,#+1
   \   000009EE   1140               ANDS     R1,R1,R2
   \   000009F0   405A               LDRH     R0,[R0, R1]
   \   000009F2   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000009F4   000C               LSRS     R0,R0,#+16
   \   000009F6   4100               LSLS     R1,R0,#+1
   \   000009F8   0320               MOVS     R0,#+3
   \   000009FA   8143               BICS     R1,R1,R0
   \   000009FC   6046               MOV      R0,R12
   \   000009FE   4018               ADDS     R0,R0,R1
   \   00000A00   8446               MOV      R12,R0
   \   00000A02   5048               LDR      R0,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   00000A04   5049               LDR      R1,??USB_EpWrite_51+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000A06   4F4A               LDR      R2,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   00000A08   891A               SUBS     R1,R1,R2
   \   00000A0A   4908               LSRS     R1,R1,#+1
   \   00000A0C   1839               SUBS     R1,R1,#+24
   \   00000A0E   0722               MOVS     R2,#+7
   \   00000A10   9143               BICS     R1,R1,R2
   \   00000A12   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000A14   240E               LSRS     R4,R4,#+24
   \   00000A16   1423               MOVS     R3,#+20
   \   00000A18   6343               MULS     R3,R4,R3
   \   00000A1A   4C4A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000A1C   D218               ADDS     R2,R2,R3
   \   00000A1E   1379               LDRB     R3,[R2, #+4]
   \   00000A20   0822               MOVS     R2,#+8
   \   00000A22   5343               MULS     R3,R2,R3
   \   00000A24   C918               ADDS     R1,R1,R3
   \   00000A26   091D               ADDS     R1,R1,#+4
   \   00000A28   4900               LSLS     R1,R1,#+1
   \   00000A2A   0322               MOVS     R2,#+3
   \   00000A2C   9143               BICS     R1,R1,R2
   \   00000A2E   4018               ADDS     R0,R0,R1
   \   00000A30   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000A32   240E               LSRS     R4,R4,#+24
   \   00000A34   1421               MOVS     R1,#+20
   \   00000A36   6143               MULS     R1,R4,R1
   \   00000A38   444A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000A3A   5118               ADDS     R1,R2,R1
   \   00000A3C   0A79               LDRB     R2,[R1, #+4]
   \   00000A3E   0821               MOVS     R1,#+8
   \   00000A40   4A43               MULS     R2,R1,R2
   \   00000A42   0121               MOVS     R1,#+1
   \   00000A44   1140               ANDS     R1,R1,R2
   \   00000A46   405A               LDRH     R0,[R0, R1]
   \   00000A48   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000A4A   000C               LSRS     R0,R0,#+16
   \   00000A4C   0121               MOVS     R1,#+1
   \   00000A4E   0140               ANDS     R1,R1,R0
   \   00000A50   6046               MOV      R0,R12
   \   00000A52   4018               ADDS     R0,R0,R1
   \   00000A54   0600               MOVS     R6,R0
   1472                  WriteEpDTB_CountRx(EpInfo[EndPoint].EpSlot,CurrSize);
   \   00000A56   3B49               LDR      R1,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   00000A58   3B48               LDR      R0,??USB_EpWrite_51+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000A5A   3A4A               LDR      R2,??USB_EpWrite_51  ;; SFB(USB_PACKET_MEMORY)
   \   00000A5C   801A               SUBS     R0,R0,R2
   \   00000A5E   4008               LSRS     R0,R0,#+1
   \   00000A60   1838               SUBS     R0,R0,#+24
   \   00000A62   0722               MOVS     R2,#+7
   \   00000A64   9043               BICS     R0,R0,R2
   \   00000A66   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000A68   240E               LSRS     R4,R4,#+24
   \   00000A6A   1422               MOVS     R2,#+20
   \   00000A6C   6243               MULS     R2,R4,R2
   \   00000A6E   374B               LDR      R3,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000A70   9A18               ADDS     R2,R3,R2
   \   00000A72   1279               LDRB     R2,[R2, #+4]
   \   00000A74   0823               MOVS     R3,#+8
   \   00000A76   5A43               MULS     R2,R3,R2
   \   00000A78   8018               ADDS     R0,R0,R2
   \   00000A7A   801D               ADDS     R0,R0,#+6
   \   00000A7C   4000               LSLS     R0,R0,#+1
   \   00000A7E   0322               MOVS     R2,#+3
   \   00000A80   9043               BICS     R0,R0,R2
   \   00000A82   0818               ADDS     R0,R1,R0
   \   00000A84   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000A86   240E               LSRS     R4,R4,#+24
   \   00000A88   1421               MOVS     R1,#+20
   \   00000A8A   6143               MULS     R1,R4,R1
   \   00000A8C   2F4A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000A8E   5118               ADDS     R1,R2,R1
   \   00000A90   0979               LDRB     R1,[R1, #+4]
   \   00000A92   0822               MOVS     R2,#+8
   \   00000A94   5143               MULS     R1,R2,R1
   \   00000A96   0122               MOVS     R2,#+1
   \   00000A98   0A40               ANDS     R2,R2,R1
   \   00000A9A   0499               LDR      R1,[SP, #+16]
   \   00000A9C   8152               STRH     R1,[R0, R2]
   1473                }
   1474          
   1475                for (Count = 0; Count < CurrSize; ++Count)
   \                     ??USB_EpWrite_50:
   \   00000A9E   0020               MOVS     R0,#+0
   \   00000AA0   0700               MOVS     R7,R0
   \                     ??USB_EpWrite_52:
   \   00000AA2   0498               LDR      R0,[SP, #+16]
   \   00000AA4   8742               CMP      R7,R0
   \   00000AA6   11D2               BCS      ??USB_EpWrite_53
   1476                {
   1477                  Temp  = *pData++;
   \   00000AA8   2878               LDRB     R0,[R5, #+0]
   \   00000AAA   0190               STR      R0,[SP, #+4]
   \   00000AAC   6D1C               ADDS     R5,R5,#+1
   1478                  if (++Count < CurrSize)
   \   00000AAE   7F1C               ADDS     R7,R7,#+1
   \   00000AB0   0498               LDR      R0,[SP, #+16]
   \   00000AB2   8742               CMP      R7,R0
   \   00000AB4   05D2               BCS      ??USB_EpWrite_54
   1479                  {
   1480                    Temp |= (*pData++) << 8;
   \   00000AB6   0198               LDR      R0,[SP, #+4]
   \   00000AB8   2978               LDRB     R1,[R5, #+0]
   \   00000ABA   0902               LSLS     R1,R1,#+8
   \   00000ABC   0143               ORRS     R1,R1,R0
   \   00000ABE   0191               STR      R1,[SP, #+4]
   \   00000AC0   6D1C               ADDS     R5,R5,#+1
   1481                  }
   1482                  *pDst++ = Temp;
   \                     ??USB_EpWrite_54:
   \   00000AC2   0198               LDR      R0,[SP, #+4]
   \   00000AC4   3060               STR      R0,[R6, #+0]
   \   00000AC6   361D               ADDS     R6,R6,#+4
   1483                }
   \   00000AC8   7F1C               ADDS     R7,R7,#+1
   \   00000ACA   EAE7               B        ??USB_EpWrite_52
   1484          
   1485                EpInfo[EndPoint].EpIntrFl = 0;
   \                     ??USB_EpWrite_53:
   \   00000ACC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000ACE   240E               LSRS     R4,R4,#+24
   \   00000AD0   1420               MOVS     R0,#+20
   \   00000AD2   6043               MULS     R0,R4,R0
   \   00000AD4   1D49               LDR      R1,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000AD6   0818               ADDS     R0,R1,R0
   \   00000AD8   0021               MOVS     R1,#+0
   \   00000ADA   0161               STR      R1,[R0, #+16]
   1486                // Clear for pending TX interrupt
   1487                EpCtrlClr_CTR_TX(EpInfo[EndPoint].pEpCtrl);
   \   00000ADC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000ADE   240E               LSRS     R4,R4,#+24
   \   00000AE0   1420               MOVS     R0,#+20
   \   00000AE2   6043               MULS     R0,R4,R0
   \   00000AE4   1949               LDR      R1,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000AE6   0858               LDR      R0,[R1, R0]
   \   00000AE8   ........           BL       EpCtrlClr_CTR_TX
   1488                EpCtrlToggle_DTOG_RX(EpInfo[EndPoint].pEpCtrl);
   \   00000AEC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000AEE   240E               LSRS     R4,R4,#+24
   \   00000AF0   1420               MOVS     R0,#+20
   \   00000AF2   6043               MULS     R0,R4,R0
   \   00000AF4   1549               LDR      R1,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000AF6   0858               LDR      R0,[R1, R0]
   \   00000AF8   ........           BL       EpCtrlToggle_DTOG_RX
   1489                // Update RX toggle status
   1490                EpState.DTOGRX ^= 1;
   \   00000AFC   6846               MOV      R0,SP
   \   00000AFE   6946               MOV      R1,SP
   \   00000B00   0989               LDRH     R1,[R1, #+8]
   \   00000B02   8022               MOVS     R2,#+128
   \   00000B04   D201               LSLS     R2,R2,#+7        ;; #+16384
   \   00000B06   4A40               EORS     R2,R2,R1
   \   00000B08   0281               STRH     R2,[R0, #+8]
   1491                EpCtrlSet_STAT_TX(EpInfo[EndPoint].pEpCtrl,EP_VALID);
   \   00000B0A   0321               MOVS     R1,#+3
   \   00000B0C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000B0E   240E               LSRS     R4,R4,#+24
   \   00000B10   1420               MOVS     R0,#+20
   \   00000B12   6043               MULS     R0,R4,R0
   \   00000B14   0D4A               LDR      R2,??USB_EpWrite_51+0x8  ;; EpInfo
   \   00000B16   1058               LDR      R0,[R2, R0]
   \   00000B18   ........           BL       EpCtrlSet_STAT_TX
   1492                SizeHold += CurrSize;
   \   00000B1C   0098               LDR      R0,[SP, #+0]
   \   00000B1E   0499               LDR      R1,[SP, #+16]
   \   00000B20   4018               ADDS     R0,R0,R1
   \   00000B22   0090               STR      R0,[SP, #+0]
   1493              } while(SizeHold < ActSize);
   \   00000B24   0098               LDR      R0,[SP, #+0]
   \   00000B26   0399               LDR      R1,[SP, #+12]
   \   00000B28   8842               CMP      R0,R1
   \   00000B2A   00D2               BCS      .+4
   \   00000B2C   72E6               B        ??USB_EpWrite_45
   \   00000B2E   01E0               B        ??USB_EpWrite_17
   1494              break;
   1495            default:
   1496              // Fatal error (require restart of the USB)
   1497              return(USB_EP_FATAL_ERROR);
   \                     ??USB_EpWrite_9:
   \   00000B30   0A20               MOVS     R0,#+10
   \   00000B32   03E0               B        ??USB_EpWrite_2
   1498            }
   1499          
   1500            *pCount = SizeHold;
   \                     ??USB_EpWrite_17:
   \   00000B34   0698               LDR      R0,[SP, #+24]
   \   00000B36   0099               LDR      R1,[SP, #+0]
   \   00000B38   0160               STR      R1,[R0, #+0]
   1501            return(USB_OK);
   \   00000B3A   0020               MOVS     R0,#+0
   \                     ??USB_EpWrite_2:
   \   00000B3C   07B0               ADD      SP,SP,#+28
   \   00000B3E   F0BC               POP      {R4-R7}
   \   00000B40   02BC               POP      {R1}
   \   00000B42   0847               BX       R1               ;; return
   \                     ??USB_EpWrite_51:
   \   00000B44   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   00000B48   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   00000B4C   ........           DC32     EpInfo
   1502          }
   1503          
   1504          /*************************************************************************
   1505           * Function Name: USB_EpRead
   1506           * Parameters: USB_Endpoint_t EndPoint, pInt8U pData, pInt32U pCount
   1507           *
   1508           * Return: USB_ErrorCodes_t
   1509           *
   1510           * Description: Endpoint Read (OUT)
   1511           *
   1512           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1513          USB_ErrorCodes_t USB_EpRead (USB_Endpoint_t EndPoint, pInt8U pData,
   1514                                       pInt32U pCount)
   1515          {
   \                     USB_EpRead:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0E00               MOVS     R6,R1
   1516          volatile pInt32U pSrc;
   1517          Int32U ActSize = *pCount, EpCount;
   \   00000008   0698               LDR      R0,[SP, #+24]
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   0490               STR      R0,[SP, #+16]
   1518          __usb_epr_bits EpState;
   1519          Int32U Temp;
   1520          Int32U CurrSize,SizeHold;
   1521          Int32U Count;
   1522          
   1523            *pCount = 0;
   \   0000000E   0698               LDR      R0,[SP, #+24]
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0160               STR      R1,[R0, #+0]
   1524          
   1525            if(EpInfo[EndPoint].pEpCtrl == NULL)
   \   00000014   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000016   240E               LSRS     R4,R4,#+24
   \   00000018   1420               MOVS     R0,#+20
   \   0000001A   6043               MULS     R0,R4,R0
   \   0000001C   BA49               LDR      R1,??USB_EpRead_0  ;; EpInfo
   \   0000001E   0858               LDR      R0,[R1, R0]
   \   00000020   0028               CMP      R0,#+0
   \   00000022   02D1               BNE      ??USB_EpRead_1
   1526            {
   1527              return(USB_EP_NOT_VALID);
   \   00000024   0620               MOVS     R0,#+6
   \   00000026   00F0FAFC           BL       ??USB_EpRead_2
   1528            }
   1529          
   1530            EpState = *(__usb_epr_bits *)EpInfo[EndPoint].pEpCtrl;
   \                     ??USB_EpRead_1:
   \   0000002A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000002C   240E               LSRS     R4,R4,#+24
   \   0000002E   1420               MOVS     R0,#+20
   \   00000030   6043               MULS     R0,R4,R0
   \   00000032   B549               LDR      R1,??USB_EpRead_0  ;; EpInfo
   \   00000034   0858               LDR      R0,[R1, R0]
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   0390               STR      R0,[SP, #+12]
   1531            if(EpState.STATRX == EP_DISABLED)
   \   0000003A   6846               MOV      R0,SP
   \   0000003C   8089               LDRH     R0,[R0, #+12]
   \   0000003E   C021               MOVS     R1,#+192
   \   00000040   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   00000042   0140               ANDS     R1,R1,R0
   \   00000044   0800               MOVS     R0,R1
   \   00000046   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000048   000C               LSRS     R0,R0,#+16
   \   0000004A   000B               LSRS     R0,R0,#+12
   \   0000004C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000004E   000E               LSRS     R0,R0,#+24
   \   00000050   0028               CMP      R0,#+0
   \   00000052   02D1               BNE      ??USB_EpRead_3
   1532            {
   1533              return(USB_EP_FATAL_ERROR);
   \   00000054   0A20               MOVS     R0,#+10
   \   00000056   00F0E2FC           BL       ??USB_EpRead_2
   1534            }
   1535          
   1536            switch (EpInfo[EndPoint].EpType)
   \                     ??USB_EpRead_3:
   \   0000005A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000005C   240E               LSRS     R4,R4,#+24
   \   0000005E   1420               MOVS     R0,#+20
   \   00000060   6043               MULS     R0,R4,R0
   \   00000062   A949               LDR      R1,??USB_EpRead_0  ;; EpInfo
   \   00000064   0818               ADDS     R0,R1,R0
   \   00000066   007B               LDRB     R0,[R0, #+12]
   \   00000068   0028               CMP      R0,#+0
   \   0000006A   00D1               BNE      .+4
   \   0000006C   A8E2               B        ??USB_EpRead_4
   \   0000006E   401E               SUBS     R0,R0,#+1
   \   00000070   0AD0               BEQ      ??USB_EpRead_5
   \   00000072   401E               SUBS     R0,R0,#+1
   \   00000074   00D1               BNE      .+4
   \   00000076   C3E0               B        ??USB_EpRead_6
   \   00000078   401E               SUBS     R0,R0,#+1
   \   0000007A   00D1               BNE      .+4
   \   0000007C   E6E1               B        ??USB_EpRead_7
   \   0000007E   401E               SUBS     R0,R0,#+1
   \   00000080   00D1               BNE      .+4
   \   00000082   5DE3               B        ??USB_EpRead_8
   \   00000084   00F0C6FC           BL       ??USB_EpRead_9
   1537            {
   1538            case EP_CTRL:
   1539              if(EpState.STATRX == EP_VALID)
   \                     ??USB_EpRead_5:
   \   00000088   6846               MOV      R0,SP
   \   0000008A   8089               LDRH     R0,[R0, #+12]
   \   0000008C   C021               MOVS     R1,#+192
   \   0000008E   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   00000090   0140               ANDS     R1,R1,R0
   \   00000092   0800               MOVS     R0,R1
   \   00000094   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000096   000C               LSRS     R0,R0,#+16
   \   00000098   000B               LSRS     R0,R0,#+12
   \   0000009A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000009C   000E               LSRS     R0,R0,#+24
   \   0000009E   0328               CMP      R0,#+3
   \   000000A0   02D1               BNE      ??USB_EpRead_10
   1540              {
   1541                // Data is not received yet.
   1542                return(UB_EP_SETUP_UNDERRUN);
   \   000000A2   0720               MOVS     R0,#+7
   \   000000A4   00F0BBFC           BL       ??USB_EpRead_2
   1543              }
   1544              // Get received bytes number
   1545              EpCount = ReadEpDTB_CountRx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \                     ??USB_EpRead_10:
   \   000000A8   9849               LDR      R1,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000AA   9948               LDR      R0,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   000000AC   974A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000AE   801A               SUBS     R0,R0,R2
   \   000000B0   4008               LSRS     R0,R0,#+1
   \   000000B2   1838               SUBS     R0,R0,#+24
   \   000000B4   0722               MOVS     R2,#+7
   \   000000B6   9043               BICS     R0,R0,R2
   \   000000B8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000BA   240E               LSRS     R4,R4,#+24
   \   000000BC   1422               MOVS     R2,#+20
   \   000000BE   6243               MULS     R2,R4,R2
   \   000000C0   914B               LDR      R3,??USB_EpRead_0  ;; EpInfo
   \   000000C2   9A18               ADDS     R2,R3,R2
   \   000000C4   1279               LDRB     R2,[R2, #+4]
   \   000000C6   0823               MOVS     R3,#+8
   \   000000C8   5A43               MULS     R2,R3,R2
   \   000000CA   8018               ADDS     R0,R0,R2
   \   000000CC   801D               ADDS     R0,R0,#+6
   \   000000CE   4000               LSLS     R0,R0,#+1
   \   000000D0   0322               MOVS     R2,#+3
   \   000000D2   9043               BICS     R0,R0,R2
   \   000000D4   0818               ADDS     R0,R1,R0
   \   000000D6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000D8   240E               LSRS     R4,R4,#+24
   \   000000DA   1421               MOVS     R1,#+20
   \   000000DC   6143               MULS     R1,R4,R1
   \   000000DE   8A4A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   000000E0   5118               ADDS     R1,R2,R1
   \   000000E2   0979               LDRB     R1,[R1, #+4]
   \   000000E4   0822               MOVS     R2,#+8
   \   000000E6   5143               MULS     R1,R2,R1
   \   000000E8   0122               MOVS     R2,#+1
   \   000000EA   0A40               ANDS     R2,R2,R1
   \   000000EC   805A               LDRH     R0,[R0, R2]
   \   000000EE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000F0   000C               LSRS     R0,R0,#+16
   \   000000F2   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   000000F4   800D               LSRS     R0,R0,#+22
   \   000000F6   0190               STR      R0,[SP, #+4]
   1546              // Get address of the USB packet buffer for corresponding EP
   1547              pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \   000000F8   8448               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000FA   8446               MOV      R12,R0
   \   000000FC   8348               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000000FE   8449               LDR      R1,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   00000100   824A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000102   891A               SUBS     R1,R1,R2
   \   00000104   4908               LSRS     R1,R1,#+1
   \   00000106   1839               SUBS     R1,R1,#+24
   \   00000108   0722               MOVS     R2,#+7
   \   0000010A   9143               BICS     R1,R1,R2
   \   0000010C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000010E   240E               LSRS     R4,R4,#+24
   \   00000110   1423               MOVS     R3,#+20
   \   00000112   6343               MULS     R3,R4,R3
   \   00000114   7C4A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   00000116   D218               ADDS     R2,R2,R3
   \   00000118   1379               LDRB     R3,[R2, #+4]
   \   0000011A   0822               MOVS     R2,#+8
   \   0000011C   5343               MULS     R3,R2,R3
   \   0000011E   C918               ADDS     R1,R1,R3
   \   00000120   091D               ADDS     R1,R1,#+4
   \   00000122   4900               LSLS     R1,R1,#+1
   \   00000124   0322               MOVS     R2,#+3
   \   00000126   9143               BICS     R1,R1,R2
   \   00000128   4018               ADDS     R0,R0,R1
   \   0000012A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000012C   240E               LSRS     R4,R4,#+24
   \   0000012E   1421               MOVS     R1,#+20
   \   00000130   6143               MULS     R1,R4,R1
   \   00000132   754A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   00000134   5118               ADDS     R1,R2,R1
   \   00000136   0A79               LDRB     R2,[R1, #+4]
   \   00000138   0821               MOVS     R1,#+8
   \   0000013A   4A43               MULS     R2,R1,R2
   \   0000013C   0121               MOVS     R1,#+1
   \   0000013E   1140               ANDS     R1,R1,R2
   \   00000140   405A               LDRH     R0,[R0, R1]
   \   00000142   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000144   000C               LSRS     R0,R0,#+16
   \   00000146   4100               LSLS     R1,R0,#+1
   \   00000148   0320               MOVS     R0,#+3
   \   0000014A   8143               BICS     R1,R1,R0
   \   0000014C   6046               MOV      R0,R12
   \   0000014E   4018               ADDS     R0,R0,R1
   \   00000150   8446               MOV      R12,R0
   \   00000152   6E48               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000154   6E49               LDR      R1,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   00000156   6D4A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000158   891A               SUBS     R1,R1,R2
   \   0000015A   4908               LSRS     R1,R1,#+1
   \   0000015C   1839               SUBS     R1,R1,#+24
   \   0000015E   0722               MOVS     R2,#+7
   \   00000160   9143               BICS     R1,R1,R2
   \   00000162   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000164   240E               LSRS     R4,R4,#+24
   \   00000166   1423               MOVS     R3,#+20
   \   00000168   6343               MULS     R3,R4,R3
   \   0000016A   674A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   0000016C   D218               ADDS     R2,R2,R3
   \   0000016E   1379               LDRB     R3,[R2, #+4]
   \   00000170   0822               MOVS     R2,#+8
   \   00000172   5343               MULS     R3,R2,R3
   \   00000174   C918               ADDS     R1,R1,R3
   \   00000176   091D               ADDS     R1,R1,#+4
   \   00000178   4900               LSLS     R1,R1,#+1
   \   0000017A   0322               MOVS     R2,#+3
   \   0000017C   9143               BICS     R1,R1,R2
   \   0000017E   4018               ADDS     R0,R0,R1
   \   00000180   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000182   240E               LSRS     R4,R4,#+24
   \   00000184   1421               MOVS     R1,#+20
   \   00000186   6143               MULS     R1,R4,R1
   \   00000188   5F4A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   0000018A   5118               ADDS     R1,R2,R1
   \   0000018C   0A79               LDRB     R2,[R1, #+4]
   \   0000018E   0821               MOVS     R1,#+8
   \   00000190   4A43               MULS     R2,R1,R2
   \   00000192   0121               MOVS     R1,#+1
   \   00000194   1140               ANDS     R1,R1,R2
   \   00000196   405A               LDRH     R0,[R0, R1]
   \   00000198   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000019A   000C               LSRS     R0,R0,#+16
   \   0000019C   0121               MOVS     R1,#+1
   \   0000019E   0140               ANDS     R1,R1,R0
   \   000001A0   6046               MOV      R0,R12
   \   000001A2   4018               ADDS     R0,R0,R1
   \   000001A4   0090               STR      R0,[SP, #+0]
   1548              // Get smaller of the user buffer and the received data.
   1549              SizeHold = MIN(EpCount,ActSize);
   \   000001A6   0198               LDR      R0,[SP, #+4]
   \   000001A8   0499               LDR      R1,[SP, #+16]
   \   000001AA   8842               CMP      R0,R1
   \   000001AC   00D9               BLS      ??USB_EpRead_11
   \   000001AE   0800               MOVS     R0,R1
   \                     ??USB_EpRead_11:
   \   000001B0   0500               MOVS     R5,R0
   1550          
   1551              for(Count = 0; Count < SizeHold; ++Count)
   \   000001B2   0020               MOVS     R0,#+0
   \   000001B4   0700               MOVS     R7,R0
   \                     ??USB_EpRead_12:
   \   000001B6   AF42               CMP      R7,R5
   \   000001B8   11D2               BCS      ??USB_EpRead_13
   1552              {
   1553                Temp = *pSrc++;
   \   000001BA   0098               LDR      R0,[SP, #+0]
   \   000001BC   0100               MOVS     R1,R0
   \   000001BE   091D               ADDS     R1,R1,#+4
   \   000001C0   0091               STR      R1,[SP, #+0]
   \   000001C2   0068               LDR      R0,[R0, #+0]
   \   000001C4   0290               STR      R0,[SP, #+8]
   1554                *pData++ = Temp;
   \   000001C6   0298               LDR      R0,[SP, #+8]
   \   000001C8   3070               STRB     R0,[R6, #+0]
   \   000001CA   761C               ADDS     R6,R6,#+1
   1555                if(++Count <= SizeHold) // fix overwrite problem with odd number of bytes
   \   000001CC   7F1C               ADDS     R7,R7,#+1
   \   000001CE   BD42               CMP      R5,R7
   \   000001D0   03D3               BCC      ??USB_EpRead_14
   1556                {
   1557                  *pData++ = Temp>>8;
   \   000001D2   0298               LDR      R0,[SP, #+8]
   \   000001D4   000A               LSRS     R0,R0,#+8
   \   000001D6   3070               STRB     R0,[R6, #+0]
   \   000001D8   761C               ADDS     R6,R6,#+1
   1558                }
   1559              }
   \                     ??USB_EpRead_14:
   \   000001DA   7F1C               ADDS     R7,R7,#+1
   \   000001DC   EBE7               B        ??USB_EpRead_12
   1560              *pCount = SizeHold;
   \                     ??USB_EpRead_13:
   \   000001DE   0698               LDR      R0,[SP, #+24]
   \   000001E0   0560               STR      R5,[R0, #+0]
   1561              if(EpCtrlGet_SETUP(EpInfo[EndPoint].pEpCtrl))
   \   000001E2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001E4   240E               LSRS     R4,R4,#+24
   \   000001E6   1420               MOVS     R0,#+20
   \   000001E8   6043               MULS     R0,R4,R0
   \   000001EA   4749               LDR      R1,??USB_EpRead_0  ;; EpInfo
   \   000001EC   0858               LDR      R0,[R1, R0]
   \   000001EE   ........           BL       EpCtrlGet_SETUP
   \   000001F2   0028               CMP      R0,#+0
   \   000001F4   01D1               BNE      .+6
   \   000001F6   00F00FFC           BL       ??USB_EpRead_15
   1562              {
   1563                return(UB_EP_SETUP_OVERWRITE);
   \   000001FA   0920               MOVS     R0,#+9
   \   000001FC   00F00FFC           BL       ??USB_EpRead_2
   1564              }
   1565          
   1566              break;
   1567            case EP_ISO:
   1568              if(EpState.DTOGRX)
   \                     ??USB_EpRead_6:
   \   00000200   6846               MOV      R0,SP
   \   00000202   8089               LDRH     R0,[R0, #+12]
   \   00000204   4004               LSLS     R0,R0,#+17
   \   00000206   00D4               BMI      .+4
   \   00000208   84E0               B        ??USB_EpRead_16
   1569              {
   1570                EpCount = ReadEpDTB_CountTx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \   0000020A   4049               LDR      R1,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000020C   4048               LDR      R0,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   0000020E   3F4A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000210   801A               SUBS     R0,R0,R2
   \   00000212   4008               LSRS     R0,R0,#+1
   \   00000214   1838               SUBS     R0,R0,#+24
   \   00000216   0722               MOVS     R2,#+7
   \   00000218   9043               BICS     R0,R0,R2
   \   0000021A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000021C   240E               LSRS     R4,R4,#+24
   \   0000021E   1422               MOVS     R2,#+20
   \   00000220   6243               MULS     R2,R4,R2
   \   00000222   394B               LDR      R3,??USB_EpRead_0  ;; EpInfo
   \   00000224   9A18               ADDS     R2,R3,R2
   \   00000226   1279               LDRB     R2,[R2, #+4]
   \   00000228   0823               MOVS     R3,#+8
   \   0000022A   5A43               MULS     R2,R3,R2
   \   0000022C   8018               ADDS     R0,R0,R2
   \   0000022E   801C               ADDS     R0,R0,#+2
   \   00000230   4000               LSLS     R0,R0,#+1
   \   00000232   0322               MOVS     R2,#+3
   \   00000234   9043               BICS     R0,R0,R2
   \   00000236   0818               ADDS     R0,R1,R0
   \   00000238   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000023A   240E               LSRS     R4,R4,#+24
   \   0000023C   1421               MOVS     R1,#+20
   \   0000023E   6143               MULS     R1,R4,R1
   \   00000240   314A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   00000242   5118               ADDS     R1,R2,R1
   \   00000244   0979               LDRB     R1,[R1, #+4]
   \   00000246   0822               MOVS     R2,#+8
   \   00000248   5143               MULS     R1,R2,R1
   \   0000024A   0122               MOVS     R2,#+1
   \   0000024C   0A40               ANDS     R2,R2,R1
   \   0000024E   805A               LDRH     R0,[R0, R2]
   \   00000250   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000252   000C               LSRS     R0,R0,#+16
   \   00000254   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000256   800D               LSRS     R0,R0,#+22
   \   00000258   0190               STR      R0,[SP, #+4]
   1571                pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   0000025A   2C48               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   0000025C   8446               MOV      R12,R0
   \   0000025E   2B48               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000260   2B49               LDR      R1,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   00000262   2A4A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   00000264   891A               SUBS     R1,R1,R2
   \   00000266   4908               LSRS     R1,R1,#+1
   \   00000268   1839               SUBS     R1,R1,#+24
   \   0000026A   0722               MOVS     R2,#+7
   \   0000026C   9143               BICS     R1,R1,R2
   \   0000026E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000270   240E               LSRS     R4,R4,#+24
   \   00000272   1423               MOVS     R3,#+20
   \   00000274   6343               MULS     R3,R4,R3
   \   00000276   244A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   00000278   D218               ADDS     R2,R2,R3
   \   0000027A   1379               LDRB     R3,[R2, #+4]
   \   0000027C   0822               MOVS     R2,#+8
   \   0000027E   5343               MULS     R3,R2,R3
   \   00000280   C918               ADDS     R1,R1,R3
   \   00000282   4900               LSLS     R1,R1,#+1
   \   00000284   0322               MOVS     R2,#+3
   \   00000286   9143               BICS     R1,R1,R2
   \   00000288   4018               ADDS     R0,R0,R1
   \   0000028A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000028C   240E               LSRS     R4,R4,#+24
   \   0000028E   1421               MOVS     R1,#+20
   \   00000290   6143               MULS     R1,R4,R1
   \   00000292   1D4A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   00000294   5118               ADDS     R1,R2,R1
   \   00000296   0A79               LDRB     R2,[R1, #+4]
   \   00000298   0821               MOVS     R1,#+8
   \   0000029A   4A43               MULS     R2,R1,R2
   \   0000029C   0121               MOVS     R1,#+1
   \   0000029E   1140               ANDS     R1,R1,R2
   \   000002A0   405A               LDRH     R0,[R0, R1]
   \   000002A2   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000002A4   000C               LSRS     R0,R0,#+16
   \   000002A6   4100               LSLS     R1,R0,#+1
   \   000002A8   0320               MOVS     R0,#+3
   \   000002AA   8143               BICS     R1,R1,R0
   \   000002AC   6046               MOV      R0,R12
   \   000002AE   4018               ADDS     R0,R0,R1
   \   000002B0   8446               MOV      R12,R0
   \   000002B2   1648               LDR      R0,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000002B4   1649               LDR      R1,??USB_EpRead_0+0x8  ;; SFE(USB_PACKET_MEMORY)
   \   000002B6   154A               LDR      R2,??USB_EpRead_0+0x4  ;; SFB(USB_PACKET_MEMORY)
   \   000002B8   891A               SUBS     R1,R1,R2
   \   000002BA   4908               LSRS     R1,R1,#+1
   \   000002BC   1839               SUBS     R1,R1,#+24
   \   000002BE   0722               MOVS     R2,#+7
   \   000002C0   9143               BICS     R1,R1,R2
   \   000002C2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002C4   240E               LSRS     R4,R4,#+24
   \   000002C6   1423               MOVS     R3,#+20
   \   000002C8   6343               MULS     R3,R4,R3
   \   000002CA   0F4A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   000002CC   D218               ADDS     R2,R2,R3
   \   000002CE   1379               LDRB     R3,[R2, #+4]
   \   000002D0   0822               MOVS     R2,#+8
   \   000002D2   5343               MULS     R3,R2,R3
   \   000002D4   C918               ADDS     R1,R1,R3
   \   000002D6   4900               LSLS     R1,R1,#+1
   \   000002D8   0322               MOVS     R2,#+3
   \   000002DA   9143               BICS     R1,R1,R2
   \   000002DC   4018               ADDS     R0,R0,R1
   \   000002DE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002E0   240E               LSRS     R4,R4,#+24
   \   000002E2   1421               MOVS     R1,#+20
   \   000002E4   6143               MULS     R1,R4,R1
   \   000002E6   084A               LDR      R2,??USB_EpRead_0  ;; EpInfo
   \   000002E8   5118               ADDS     R1,R2,R1
   \   000002EA   0A79               LDRB     R2,[R1, #+4]
   \   000002EC   0821               MOVS     R1,#+8
   \   000002EE   4A43               MULS     R2,R1,R2
   \   000002F0   0121               MOVS     R1,#+1
   \   000002F2   1140               ANDS     R1,R1,R2
   \   000002F4   405A               LDRH     R0,[R0, R1]
   \   000002F6   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000002F8   000C               LSRS     R0,R0,#+16
   \   000002FA   0121               MOVS     R1,#+1
   \   000002FC   0140               ANDS     R1,R1,R0
   \   000002FE   6046               MOV      R0,R12
   \   00000300   4018               ADDS     R0,R0,R1
   \   00000302   0090               STR      R0,[SP, #+0]
   \   00000304   85E0               B        ??USB_EpRead_17
   \   00000306   C046               Nop      
   \                     ??USB_EpRead_0:
   \   00000308   ........           DC32     EpInfo
   \   0000030C   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   00000310   ........           DC32     SFE(USB_PACKET_MEMORY)
   1572              }
   1573              else
   1574              {
   1575                EpCount = ReadEpDTB_CountRx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \                     ??USB_EpRead_16:
   \   00000314   B949               LDR      R1,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   00000316   BA48               LDR      R0,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000318   B84A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   0000031A   801A               SUBS     R0,R0,R2
   \   0000031C   4008               LSRS     R0,R0,#+1
   \   0000031E   1838               SUBS     R0,R0,#+24
   \   00000320   0722               MOVS     R2,#+7
   \   00000322   9043               BICS     R0,R0,R2
   \   00000324   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000326   240E               LSRS     R4,R4,#+24
   \   00000328   1422               MOVS     R2,#+20
   \   0000032A   6243               MULS     R2,R4,R2
   \   0000032C   B54B               LDR      R3,??USB_EpRead_18+0x8  ;; EpInfo
   \   0000032E   9A18               ADDS     R2,R3,R2
   \   00000330   1279               LDRB     R2,[R2, #+4]
   \   00000332   0823               MOVS     R3,#+8
   \   00000334   5A43               MULS     R2,R3,R2
   \   00000336   8018               ADDS     R0,R0,R2
   \   00000338   801D               ADDS     R0,R0,#+6
   \   0000033A   4000               LSLS     R0,R0,#+1
   \   0000033C   0322               MOVS     R2,#+3
   \   0000033E   9043               BICS     R0,R0,R2
   \   00000340   0818               ADDS     R0,R1,R0
   \   00000342   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000344   240E               LSRS     R4,R4,#+24
   \   00000346   1421               MOVS     R1,#+20
   \   00000348   6143               MULS     R1,R4,R1
   \   0000034A   AE4A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   0000034C   5118               ADDS     R1,R2,R1
   \   0000034E   0979               LDRB     R1,[R1, #+4]
   \   00000350   0822               MOVS     R2,#+8
   \   00000352   5143               MULS     R1,R2,R1
   \   00000354   0122               MOVS     R2,#+1
   \   00000356   0A40               ANDS     R2,R2,R1
   \   00000358   805A               LDRH     R0,[R0, R2]
   \   0000035A   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000035C   000C               LSRS     R0,R0,#+16
   \   0000035E   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000360   800D               LSRS     R0,R0,#+22
   \   00000362   0190               STR      R0,[SP, #+4]
   1576                pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \   00000364   A548               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   00000366   8446               MOV      R12,R0
   \   00000368   A448               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   0000036A   A549               LDR      R1,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000036C   A34A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   0000036E   891A               SUBS     R1,R1,R2
   \   00000370   4908               LSRS     R1,R1,#+1
   \   00000372   1839               SUBS     R1,R1,#+24
   \   00000374   0722               MOVS     R2,#+7
   \   00000376   9143               BICS     R1,R1,R2
   \   00000378   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000037A   240E               LSRS     R4,R4,#+24
   \   0000037C   1423               MOVS     R3,#+20
   \   0000037E   6343               MULS     R3,R4,R3
   \   00000380   A04A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   00000382   D218               ADDS     R2,R2,R3
   \   00000384   1379               LDRB     R3,[R2, #+4]
   \   00000386   0822               MOVS     R2,#+8
   \   00000388   5343               MULS     R3,R2,R3
   \   0000038A   C918               ADDS     R1,R1,R3
   \   0000038C   091D               ADDS     R1,R1,#+4
   \   0000038E   4900               LSLS     R1,R1,#+1
   \   00000390   0322               MOVS     R2,#+3
   \   00000392   9143               BICS     R1,R1,R2
   \   00000394   4018               ADDS     R0,R0,R1
   \   00000396   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000398   240E               LSRS     R4,R4,#+24
   \   0000039A   1421               MOVS     R1,#+20
   \   0000039C   6143               MULS     R1,R4,R1
   \   0000039E   994A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   000003A0   5118               ADDS     R1,R2,R1
   \   000003A2   0A79               LDRB     R2,[R1, #+4]
   \   000003A4   0821               MOVS     R1,#+8
   \   000003A6   4A43               MULS     R2,R1,R2
   \   000003A8   0121               MOVS     R1,#+1
   \   000003AA   1140               ANDS     R1,R1,R2
   \   000003AC   405A               LDRH     R0,[R0, R1]
   \   000003AE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000003B0   000C               LSRS     R0,R0,#+16
   \   000003B2   4100               LSLS     R1,R0,#+1
   \   000003B4   0320               MOVS     R0,#+3
   \   000003B6   8143               BICS     R1,R1,R0
   \   000003B8   6046               MOV      R0,R12
   \   000003BA   4018               ADDS     R0,R0,R1
   \   000003BC   8446               MOV      R12,R0
   \   000003BE   8F48               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   000003C0   8F49               LDR      R1,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000003C2   8E4A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   000003C4   891A               SUBS     R1,R1,R2
   \   000003C6   4908               LSRS     R1,R1,#+1
   \   000003C8   1839               SUBS     R1,R1,#+24
   \   000003CA   0722               MOVS     R2,#+7
   \   000003CC   9143               BICS     R1,R1,R2
   \   000003CE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003D0   240E               LSRS     R4,R4,#+24
   \   000003D2   1423               MOVS     R3,#+20
   \   000003D4   6343               MULS     R3,R4,R3
   \   000003D6   8B4A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   000003D8   D218               ADDS     R2,R2,R3
   \   000003DA   1379               LDRB     R3,[R2, #+4]
   \   000003DC   0822               MOVS     R2,#+8
   \   000003DE   5343               MULS     R3,R2,R3
   \   000003E0   C918               ADDS     R1,R1,R3
   \   000003E2   091D               ADDS     R1,R1,#+4
   \   000003E4   4900               LSLS     R1,R1,#+1
   \   000003E6   0322               MOVS     R2,#+3
   \   000003E8   9143               BICS     R1,R1,R2
   \   000003EA   4018               ADDS     R0,R0,R1
   \   000003EC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003EE   240E               LSRS     R4,R4,#+24
   \   000003F0   1421               MOVS     R1,#+20
   \   000003F2   6143               MULS     R1,R4,R1
   \   000003F4   834A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   000003F6   5118               ADDS     R1,R2,R1
   \   000003F8   0A79               LDRB     R2,[R1, #+4]
   \   000003FA   0821               MOVS     R1,#+8
   \   000003FC   4A43               MULS     R2,R1,R2
   \   000003FE   0121               MOVS     R1,#+1
   \   00000400   1140               ANDS     R1,R1,R2
   \   00000402   405A               LDRH     R0,[R0, R1]
   \   00000404   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000406   000C               LSRS     R0,R0,#+16
   \   00000408   0121               MOVS     R1,#+1
   \   0000040A   0140               ANDS     R1,R1,R0
   \   0000040C   6046               MOV      R0,R12
   \   0000040E   4018               ADDS     R0,R0,R1
   \   00000410   0090               STR      R0,[SP, #+0]
   1577              }
   1578              // Get smaller of the user buffer and the received data.
   1579              SizeHold = MIN(EpCount,ActSize);
   \                     ??USB_EpRead_17:
   \   00000412   0198               LDR      R0,[SP, #+4]
   \   00000414   0499               LDR      R1,[SP, #+16]
   \   00000416   8842               CMP      R0,R1
   \   00000418   00D9               BLS      ??USB_EpRead_19
   \   0000041A   0800               MOVS     R0,R1
   \                     ??USB_EpRead_19:
   \   0000041C   0500               MOVS     R5,R0
   1580          
   1581              for(Count = 0; Count < SizeHold; ++Count)
   \   0000041E   0020               MOVS     R0,#+0
   \   00000420   0700               MOVS     R7,R0
   \                     ??USB_EpRead_20:
   \   00000422   AF42               CMP      R7,R5
   \   00000424   00D3               BCC      .+4
   \   00000426   F7E2               B        ??USB_EpRead_15
   1582              {
   1583                Temp = *pSrc++;
   \   00000428   0098               LDR      R0,[SP, #+0]
   \   0000042A   0100               MOVS     R1,R0
   \   0000042C   091D               ADDS     R1,R1,#+4
   \   0000042E   0091               STR      R1,[SP, #+0]
   \   00000430   0068               LDR      R0,[R0, #+0]
   \   00000432   0290               STR      R0,[SP, #+8]
   1584                *pData++ = Temp;
   \   00000434   0298               LDR      R0,[SP, #+8]
   \   00000436   3070               STRB     R0,[R6, #+0]
   \   00000438   761C               ADDS     R6,R6,#+1
   1585                if(++Count <= SizeHold) // fix overwrite problem with odd number of bytes
   \   0000043A   7F1C               ADDS     R7,R7,#+1
   \   0000043C   BD42               CMP      R5,R7
   \   0000043E   03D3               BCC      ??USB_EpRead_21
   1586                {
   1587                  *pData++ = Temp>>8;
   \   00000440   0298               LDR      R0,[SP, #+8]
   \   00000442   000A               LSRS     R0,R0,#+8
   \   00000444   3070               STRB     R0,[R6, #+0]
   \   00000446   761C               ADDS     R6,R6,#+1
   1588                }
   1589              }
   \                     ??USB_EpRead_21:
   \   00000448   7F1C               ADDS     R7,R7,#+1
   \   0000044A   EAE7               B        ??USB_EpRead_20
   1590              break;
   1591            case EP_INTERRUPT:
   1592              if (EpState.STATRX == EP_STALL)
   \                     ??USB_EpRead_7:
   \   0000044C   6846               MOV      R0,SP
   \   0000044E   8089               LDRH     R0,[R0, #+12]
   \   00000450   C021               MOVS     R1,#+192
   \   00000452   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   00000454   0140               ANDS     R1,R1,R0
   \   00000456   0800               MOVS     R0,R1
   \   00000458   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000045A   000C               LSRS     R0,R0,#+16
   \   0000045C   000B               LSRS     R0,R0,#+12
   \   0000045E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000460   000E               LSRS     R0,R0,#+24
   \   00000462   0128               CMP      R0,#+1
   \   00000464   01D1               BNE      ??USB_EpRead_22
   1593              {
   1594                return(USB_EP_STALLED);
   \   00000466   0820               MOVS     R0,#+8
   \   00000468   D9E2               B        ??USB_EpRead_2
   1595              }
   1596              else if (EpState.STATRX == EP_VALID)
   \                     ??USB_EpRead_22:
   \   0000046A   6846               MOV      R0,SP
   \   0000046C   8089               LDRH     R0,[R0, #+12]
   \   0000046E   C021               MOVS     R1,#+192
   \   00000470   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   00000472   0140               ANDS     R1,R1,R0
   \   00000474   0800               MOVS     R0,R1
   \   00000476   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000478   000C               LSRS     R0,R0,#+16
   \   0000047A   000B               LSRS     R0,R0,#+12
   \   0000047C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000047E   000E               LSRS     R0,R0,#+24
   \   00000480   0328               CMP      R0,#+3
   \   00000482   01D1               BNE      ??USB_EpRead_23
   1597              {
   1598                return(UB_EP_SETUP_UNDERRUN);
   \   00000484   0720               MOVS     R0,#+7
   \   00000486   CAE2               B        ??USB_EpRead_2
   1599              }
   1600              EpCount = ReadEpDTB_CountRx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \                     ??USB_EpRead_23:
   \   00000488   5C49               LDR      R1,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   0000048A   5D48               LDR      R0,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000048C   5B4A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   0000048E   801A               SUBS     R0,R0,R2
   \   00000490   4008               LSRS     R0,R0,#+1
   \   00000492   1838               SUBS     R0,R0,#+24
   \   00000494   0722               MOVS     R2,#+7
   \   00000496   9043               BICS     R0,R0,R2
   \   00000498   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000049A   240E               LSRS     R4,R4,#+24
   \   0000049C   1422               MOVS     R2,#+20
   \   0000049E   6243               MULS     R2,R4,R2
   \   000004A0   584B               LDR      R3,??USB_EpRead_18+0x8  ;; EpInfo
   \   000004A2   9A18               ADDS     R2,R3,R2
   \   000004A4   1279               LDRB     R2,[R2, #+4]
   \   000004A6   0823               MOVS     R3,#+8
   \   000004A8   5A43               MULS     R2,R3,R2
   \   000004AA   8018               ADDS     R0,R0,R2
   \   000004AC   801D               ADDS     R0,R0,#+6
   \   000004AE   4000               LSLS     R0,R0,#+1
   \   000004B0   0322               MOVS     R2,#+3
   \   000004B2   9043               BICS     R0,R0,R2
   \   000004B4   0818               ADDS     R0,R1,R0
   \   000004B6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004B8   240E               LSRS     R4,R4,#+24
   \   000004BA   1421               MOVS     R1,#+20
   \   000004BC   6143               MULS     R1,R4,R1
   \   000004BE   514A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   000004C0   5118               ADDS     R1,R2,R1
   \   000004C2   0979               LDRB     R1,[R1, #+4]
   \   000004C4   0822               MOVS     R2,#+8
   \   000004C6   5143               MULS     R1,R2,R1
   \   000004C8   0122               MOVS     R2,#+1
   \   000004CA   0A40               ANDS     R2,R2,R1
   \   000004CC   805A               LDRH     R0,[R0, R2]
   \   000004CE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000004D0   000C               LSRS     R0,R0,#+16
   \   000004D2   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   000004D4   800D               LSRS     R0,R0,#+22
   \   000004D6   0190               STR      R0,[SP, #+4]
   1601              pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \   000004D8   4848               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   000004DA   8446               MOV      R12,R0
   \   000004DC   4748               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   000004DE   4849               LDR      R1,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000004E0   464A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   000004E2   891A               SUBS     R1,R1,R2
   \   000004E4   4908               LSRS     R1,R1,#+1
   \   000004E6   1839               SUBS     R1,R1,#+24
   \   000004E8   0722               MOVS     R2,#+7
   \   000004EA   9143               BICS     R1,R1,R2
   \   000004EC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004EE   240E               LSRS     R4,R4,#+24
   \   000004F0   1423               MOVS     R3,#+20
   \   000004F2   6343               MULS     R3,R4,R3
   \   000004F4   434A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   000004F6   D218               ADDS     R2,R2,R3
   \   000004F8   1379               LDRB     R3,[R2, #+4]
   \   000004FA   0822               MOVS     R2,#+8
   \   000004FC   5343               MULS     R3,R2,R3
   \   000004FE   C918               ADDS     R1,R1,R3
   \   00000500   091D               ADDS     R1,R1,#+4
   \   00000502   4900               LSLS     R1,R1,#+1
   \   00000504   0322               MOVS     R2,#+3
   \   00000506   9143               BICS     R1,R1,R2
   \   00000508   4018               ADDS     R0,R0,R1
   \   0000050A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000050C   240E               LSRS     R4,R4,#+24
   \   0000050E   1421               MOVS     R1,#+20
   \   00000510   6143               MULS     R1,R4,R1
   \   00000512   3C4A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   00000514   5118               ADDS     R1,R2,R1
   \   00000516   0A79               LDRB     R2,[R1, #+4]
   \   00000518   0821               MOVS     R1,#+8
   \   0000051A   4A43               MULS     R2,R1,R2
   \   0000051C   0121               MOVS     R1,#+1
   \   0000051E   1140               ANDS     R1,R1,R2
   \   00000520   405A               LDRH     R0,[R0, R1]
   \   00000522   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000524   000C               LSRS     R0,R0,#+16
   \   00000526   4100               LSLS     R1,R0,#+1
   \   00000528   0320               MOVS     R0,#+3
   \   0000052A   8143               BICS     R1,R1,R0
   \   0000052C   6046               MOV      R0,R12
   \   0000052E   4018               ADDS     R0,R0,R1
   \   00000530   8446               MOV      R12,R0
   \   00000532   3248               LDR      R0,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   00000534   3249               LDR      R1,??USB_EpRead_18+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000536   314A               LDR      R2,??USB_EpRead_18  ;; SFB(USB_PACKET_MEMORY)
   \   00000538   891A               SUBS     R1,R1,R2
   \   0000053A   4908               LSRS     R1,R1,#+1
   \   0000053C   1839               SUBS     R1,R1,#+24
   \   0000053E   0722               MOVS     R2,#+7
   \   00000540   9143               BICS     R1,R1,R2
   \   00000542   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000544   240E               LSRS     R4,R4,#+24
   \   00000546   1423               MOVS     R3,#+20
   \   00000548   6343               MULS     R3,R4,R3
   \   0000054A   2E4A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   0000054C   D218               ADDS     R2,R2,R3
   \   0000054E   1379               LDRB     R3,[R2, #+4]
   \   00000550   0822               MOVS     R2,#+8
   \   00000552   5343               MULS     R3,R2,R3
   \   00000554   C918               ADDS     R1,R1,R3
   \   00000556   091D               ADDS     R1,R1,#+4
   \   00000558   4900               LSLS     R1,R1,#+1
   \   0000055A   0322               MOVS     R2,#+3
   \   0000055C   9143               BICS     R1,R1,R2
   \   0000055E   4018               ADDS     R0,R0,R1
   \   00000560   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000562   240E               LSRS     R4,R4,#+24
   \   00000564   1421               MOVS     R1,#+20
   \   00000566   6143               MULS     R1,R4,R1
   \   00000568   264A               LDR      R2,??USB_EpRead_18+0x8  ;; EpInfo
   \   0000056A   5118               ADDS     R1,R2,R1
   \   0000056C   0A79               LDRB     R2,[R1, #+4]
   \   0000056E   0821               MOVS     R1,#+8
   \   00000570   4A43               MULS     R2,R1,R2
   \   00000572   0121               MOVS     R1,#+1
   \   00000574   1140               ANDS     R1,R1,R2
   \   00000576   405A               LDRH     R0,[R0, R1]
   \   00000578   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000057A   000C               LSRS     R0,R0,#+16
   \   0000057C   0121               MOVS     R1,#+1
   \   0000057E   0140               ANDS     R1,R1,R0
   \   00000580   6046               MOV      R0,R12
   \   00000582   4018               ADDS     R0,R0,R1
   \   00000584   0090               STR      R0,[SP, #+0]
   1602              // Get smaller of the user buffer and the received data.
   1603              SizeHold = MIN(EpCount,ActSize);
   \   00000586   0198               LDR      R0,[SP, #+4]
   \   00000588   0499               LDR      R1,[SP, #+16]
   \   0000058A   8842               CMP      R0,R1
   \   0000058C   00D9               BLS      ??USB_EpRead_24
   \   0000058E   0800               MOVS     R0,R1
   \                     ??USB_EpRead_24:
   \   00000590   0500               MOVS     R5,R0
   1604          
   1605              for(Count = 0; Count < SizeHold; ++Count)
   \   00000592   0020               MOVS     R0,#+0
   \   00000594   0700               MOVS     R7,R0
   \                     ??USB_EpRead_25:
   \   00000596   AF42               CMP      R7,R5
   \   00000598   00D3               BCC      .+4
   \   0000059A   3DE2               B        ??USB_EpRead_15
   1606              {
   1607                Temp = *pSrc++;
   \   0000059C   0098               LDR      R0,[SP, #+0]
   \   0000059E   0100               MOVS     R1,R0
   \   000005A0   091D               ADDS     R1,R1,#+4
   \   000005A2   0091               STR      R1,[SP, #+0]
   \   000005A4   0068               LDR      R0,[R0, #+0]
   \   000005A6   0290               STR      R0,[SP, #+8]
   1608                *pData++ = Temp;
   \   000005A8   0298               LDR      R0,[SP, #+8]
   \   000005AA   3070               STRB     R0,[R6, #+0]
   \   000005AC   761C               ADDS     R6,R6,#+1
   1609                if(++Count <= SizeHold) // fix overwrite problem with odd number of bytes
   \   000005AE   7F1C               ADDS     R7,R7,#+1
   \   000005B0   BD42               CMP      R5,R7
   \   000005B2   03D3               BCC      ??USB_EpRead_26
   1610                {
   1611                  *pData++ = Temp>>8;
   \   000005B4   0298               LDR      R0,[SP, #+8]
   \   000005B6   000A               LSRS     R0,R0,#+8
   \   000005B8   3070               STRB     R0,[R6, #+0]
   \   000005BA   761C               ADDS     R6,R6,#+1
   1612                }
   1613              }
   \                     ??USB_EpRead_26:
   \   000005BC   7F1C               ADDS     R7,R7,#+1
   \   000005BE   EAE7               B        ??USB_EpRead_25
   1614              break;
   1615            case EP_BULK_SING_BUFF:
   1616              // Single buffer
   1617              if (EpState.STATRX == EP_STALL)
   \                     ??USB_EpRead_4:
   \   000005C0   6846               MOV      R0,SP
   \   000005C2   8089               LDRH     R0,[R0, #+12]
   \   000005C4   C021               MOVS     R1,#+192
   \   000005C6   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   000005C8   0140               ANDS     R1,R1,R0
   \   000005CA   0800               MOVS     R0,R1
   \   000005CC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000005CE   000C               LSRS     R0,R0,#+16
   \   000005D0   000B               LSRS     R0,R0,#+12
   \   000005D2   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000005D4   000E               LSRS     R0,R0,#+24
   \   000005D6   0128               CMP      R0,#+1
   \   000005D8   01D1               BNE      ??USB_EpRead_27
   1618              {
   1619                return(USB_EP_STALLED);
   \   000005DA   0820               MOVS     R0,#+8
   \   000005DC   1FE2               B        ??USB_EpRead_2
   1620              }
   1621              else if (EpState.STATRX == EP_VALID)
   \                     ??USB_EpRead_27:
   \   000005DE   6846               MOV      R0,SP
   \   000005E0   8089               LDRH     R0,[R0, #+12]
   \   000005E2   C021               MOVS     R1,#+192
   \   000005E4   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   000005E6   0140               ANDS     R1,R1,R0
   \   000005E8   0800               MOVS     R0,R1
   \   000005EA   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000005EC   000C               LSRS     R0,R0,#+16
   \   000005EE   000B               LSRS     R0,R0,#+12
   \   000005F0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000005F2   000E               LSRS     R0,R0,#+24
   \   000005F4   0328               CMP      R0,#+3
   \   000005F6   07D1               BNE      ??USB_EpRead_28
   1622              {
   1623                return(UB_EP_SETUP_UNDERRUN);
   \   000005F8   0720               MOVS     R0,#+7
   \   000005FA   10E2               B        ??USB_EpRead_2
   \                     ??USB_EpRead_18:
   \   000005FC   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   00000600   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   00000604   ........           DC32     EpInfo
   1624              }
   1625              EpCount = ReadEpDTB_CountRx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \                     ??USB_EpRead_28:
   \   00000608   E049               LDR      R1,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000060A   E148               LDR      R0,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000060C   DF4A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000060E   801A               SUBS     R0,R0,R2
   \   00000610   4008               LSRS     R0,R0,#+1
   \   00000612   1838               SUBS     R0,R0,#+24
   \   00000614   0722               MOVS     R2,#+7
   \   00000616   9043               BICS     R0,R0,R2
   \   00000618   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000061A   240E               LSRS     R4,R4,#+24
   \   0000061C   1422               MOVS     R2,#+20
   \   0000061E   6243               MULS     R2,R4,R2
   \   00000620   DC4B               LDR      R3,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000622   9A18               ADDS     R2,R3,R2
   \   00000624   1279               LDRB     R2,[R2, #+4]
   \   00000626   0823               MOVS     R3,#+8
   \   00000628   5A43               MULS     R2,R3,R2
   \   0000062A   8018               ADDS     R0,R0,R2
   \   0000062C   801D               ADDS     R0,R0,#+6
   \   0000062E   4000               LSLS     R0,R0,#+1
   \   00000630   0322               MOVS     R2,#+3
   \   00000632   9043               BICS     R0,R0,R2
   \   00000634   0818               ADDS     R0,R1,R0
   \   00000636   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000638   240E               LSRS     R4,R4,#+24
   \   0000063A   1421               MOVS     R1,#+20
   \   0000063C   6143               MULS     R1,R4,R1
   \   0000063E   D54A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000640   5118               ADDS     R1,R2,R1
   \   00000642   0979               LDRB     R1,[R1, #+4]
   \   00000644   0822               MOVS     R2,#+8
   \   00000646   5143               MULS     R1,R2,R1
   \   00000648   0122               MOVS     R2,#+1
   \   0000064A   0A40               ANDS     R2,R2,R1
   \   0000064C   805A               LDRH     R0,[R0, R2]
   \   0000064E   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000650   000C               LSRS     R0,R0,#+16
   \   00000652   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000654   800D               LSRS     R0,R0,#+22
   \   00000656   0190               STR      R0,[SP, #+4]
   1626              pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \   00000658   CC48               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000065A   8446               MOV      R12,R0
   \   0000065C   CB48               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000065E   CC49               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000660   CA4A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000662   891A               SUBS     R1,R1,R2
   \   00000664   4908               LSRS     R1,R1,#+1
   \   00000666   1839               SUBS     R1,R1,#+24
   \   00000668   0722               MOVS     R2,#+7
   \   0000066A   9143               BICS     R1,R1,R2
   \   0000066C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000066E   240E               LSRS     R4,R4,#+24
   \   00000670   1423               MOVS     R3,#+20
   \   00000672   6343               MULS     R3,R4,R3
   \   00000674   C74A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000676   D218               ADDS     R2,R2,R3
   \   00000678   1379               LDRB     R3,[R2, #+4]
   \   0000067A   0822               MOVS     R2,#+8
   \   0000067C   5343               MULS     R3,R2,R3
   \   0000067E   C918               ADDS     R1,R1,R3
   \   00000680   091D               ADDS     R1,R1,#+4
   \   00000682   4900               LSLS     R1,R1,#+1
   \   00000684   0322               MOVS     R2,#+3
   \   00000686   9143               BICS     R1,R1,R2
   \   00000688   4018               ADDS     R0,R0,R1
   \   0000068A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000068C   240E               LSRS     R4,R4,#+24
   \   0000068E   1421               MOVS     R1,#+20
   \   00000690   6143               MULS     R1,R4,R1
   \   00000692   C04A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000694   5118               ADDS     R1,R2,R1
   \   00000696   0A79               LDRB     R2,[R1, #+4]
   \   00000698   0821               MOVS     R1,#+8
   \   0000069A   4A43               MULS     R2,R1,R2
   \   0000069C   0121               MOVS     R1,#+1
   \   0000069E   1140               ANDS     R1,R1,R2
   \   000006A0   405A               LDRH     R0,[R0, R1]
   \   000006A2   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000006A4   000C               LSRS     R0,R0,#+16
   \   000006A6   4100               LSLS     R1,R0,#+1
   \   000006A8   0320               MOVS     R0,#+3
   \   000006AA   8143               BICS     R1,R1,R0
   \   000006AC   6046               MOV      R0,R12
   \   000006AE   4018               ADDS     R0,R0,R1
   \   000006B0   8446               MOV      R12,R0
   \   000006B2   B648               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000006B4   B649               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000006B6   B54A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000006B8   891A               SUBS     R1,R1,R2
   \   000006BA   4908               LSRS     R1,R1,#+1
   \   000006BC   1839               SUBS     R1,R1,#+24
   \   000006BE   0722               MOVS     R2,#+7
   \   000006C0   9143               BICS     R1,R1,R2
   \   000006C2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006C4   240E               LSRS     R4,R4,#+24
   \   000006C6   1423               MOVS     R3,#+20
   \   000006C8   6343               MULS     R3,R4,R3
   \   000006CA   B24A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000006CC   D218               ADDS     R2,R2,R3
   \   000006CE   1379               LDRB     R3,[R2, #+4]
   \   000006D0   0822               MOVS     R2,#+8
   \   000006D2   5343               MULS     R3,R2,R3
   \   000006D4   C918               ADDS     R1,R1,R3
   \   000006D6   091D               ADDS     R1,R1,#+4
   \   000006D8   4900               LSLS     R1,R1,#+1
   \   000006DA   0322               MOVS     R2,#+3
   \   000006DC   9143               BICS     R1,R1,R2
   \   000006DE   4018               ADDS     R0,R0,R1
   \   000006E0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006E2   240E               LSRS     R4,R4,#+24
   \   000006E4   1421               MOVS     R1,#+20
   \   000006E6   6143               MULS     R1,R4,R1
   \   000006E8   AA4A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000006EA   5118               ADDS     R1,R2,R1
   \   000006EC   0A79               LDRB     R2,[R1, #+4]
   \   000006EE   0821               MOVS     R1,#+8
   \   000006F0   4A43               MULS     R2,R1,R2
   \   000006F2   0121               MOVS     R1,#+1
   \   000006F4   1140               ANDS     R1,R1,R2
   \   000006F6   405A               LDRH     R0,[R0, R1]
   \   000006F8   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000006FA   000C               LSRS     R0,R0,#+16
   \   000006FC   0121               MOVS     R1,#+1
   \   000006FE   0140               ANDS     R1,R1,R0
   \   00000700   6046               MOV      R0,R12
   \   00000702   4018               ADDS     R0,R0,R1
   \   00000704   0090               STR      R0,[SP, #+0]
   1627              // Get smaller of the user buffer and the received data.
   1628              SizeHold = MIN(EpCount,ActSize);
   \   00000706   0198               LDR      R0,[SP, #+4]
   \   00000708   0499               LDR      R1,[SP, #+16]
   \   0000070A   8842               CMP      R0,R1
   \   0000070C   00D9               BLS      ??USB_EpRead_30
   \   0000070E   0800               MOVS     R0,R1
   \                     ??USB_EpRead_30:
   \   00000710   0500               MOVS     R5,R0
   1629          
   1630              for(Count = 0; Count < SizeHold; ++Count)
   \   00000712   0020               MOVS     R0,#+0
   \   00000714   0700               MOVS     R7,R0
   \                     ??USB_EpRead_31:
   \   00000716   AF42               CMP      R7,R5
   \   00000718   00D3               BCC      .+4
   \   0000071A   7DE1               B        ??USB_EpRead_15
   1631              {
   1632                Temp = *pSrc++;
   \   0000071C   0098               LDR      R0,[SP, #+0]
   \   0000071E   0100               MOVS     R1,R0
   \   00000720   091D               ADDS     R1,R1,#+4
   \   00000722   0091               STR      R1,[SP, #+0]
   \   00000724   0068               LDR      R0,[R0, #+0]
   \   00000726   0290               STR      R0,[SP, #+8]
   1633                *pData++ = Temp;
   \   00000728   0298               LDR      R0,[SP, #+8]
   \   0000072A   3070               STRB     R0,[R6, #+0]
   \   0000072C   761C               ADDS     R6,R6,#+1
   1634                if(++Count <= SizeHold) // fix overwrite problem with odd number of bytes
   \   0000072E   7F1C               ADDS     R7,R7,#+1
   \   00000730   BD42               CMP      R5,R7
   \   00000732   03D3               BCC      ??USB_EpRead_32
   1635                {
   1636                  *pData++ = Temp>>8;
   \   00000734   0298               LDR      R0,[SP, #+8]
   \   00000736   000A               LSRS     R0,R0,#+8
   \   00000738   3070               STRB     R0,[R6, #+0]
   \   0000073A   761C               ADDS     R6,R6,#+1
   1637                }
   1638              }
   \                     ??USB_EpRead_32:
   \   0000073C   7F1C               ADDS     R7,R7,#+1
   \   0000073E   EAE7               B        ??USB_EpRead_31
   1639              break;
   1640            case EP_BULK_DOUB_BUF:
   1641              if (EpState.STATRX == EP_STALL)
   \                     ??USB_EpRead_8:
   \   00000740   6846               MOV      R0,SP
   \   00000742   8089               LDRH     R0,[R0, #+12]
   \   00000744   C021               MOVS     R1,#+192
   \   00000746   8901               LSLS     R1,R1,#+6        ;; #+12288
   \   00000748   0140               ANDS     R1,R1,R0
   \   0000074A   0800               MOVS     R0,R1
   \   0000074C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000074E   000C               LSRS     R0,R0,#+16
   \   00000750   000B               LSRS     R0,R0,#+12
   \   00000752   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000754   000E               LSRS     R0,R0,#+24
   \   00000756   0128               CMP      R0,#+1
   \   00000758   01D1               BNE      ??USB_EpRead_33
   1642              {
   1643                return(USB_EP_STALLED);
   \   0000075A   0820               MOVS     R0,#+8
   \   0000075C   5FE1               B        ??USB_EpRead_2
   1644              }
   1645              SizeHold = 0;
   \                     ??USB_EpRead_33:
   \   0000075E   0020               MOVS     R0,#+0
   \   00000760   0500               MOVS     R5,R0
   1646              do
   1647              {
   1648                if(!EpInfo[EndPoint].EpIntrFl)
   \                     ??USB_EpRead_34:
   \   00000762   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000764   240E               LSRS     R4,R4,#+24
   \   00000766   1420               MOVS     R0,#+20
   \   00000768   6043               MULS     R0,R4,R0
   \   0000076A   8A49               LDR      R1,??USB_EpRead_29+0x8  ;; EpInfo
   \   0000076C   0818               ADDS     R0,R1,R0
   \   0000076E   0069               LDR      R0,[R0, #+16]
   \   00000770   0028               CMP      R0,#+0
   \   00000772   00D1               BNE      .+4
   \   00000774   50E1               B        ??USB_EpRead_15
   1649                {
   1650                  // Buffers are empties
   1651                  break;
   1652                }
   1653                if(!EpState.DTOGTX)
   \   00000776   6846               MOV      R0,SP
   \   00000778   8089               LDRH     R0,[R0, #+12]
   \   0000077A   4006               LSLS     R0,R0,#+25
   \   0000077C   7DD4               BMI      ??USB_EpRead_35
   1654                {
   1655                  EpCount = ReadEpDTB_CountTx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \   0000077E   8349               LDR      R1,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000780   8348               LDR      R0,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000782   824A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000784   801A               SUBS     R0,R0,R2
   \   00000786   4008               LSRS     R0,R0,#+1
   \   00000788   1838               SUBS     R0,R0,#+24
   \   0000078A   0722               MOVS     R2,#+7
   \   0000078C   9043               BICS     R0,R0,R2
   \   0000078E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000790   240E               LSRS     R4,R4,#+24
   \   00000792   1422               MOVS     R2,#+20
   \   00000794   6243               MULS     R2,R4,R2
   \   00000796   7F4B               LDR      R3,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000798   9A18               ADDS     R2,R3,R2
   \   0000079A   1279               LDRB     R2,[R2, #+4]
   \   0000079C   0823               MOVS     R3,#+8
   \   0000079E   5A43               MULS     R2,R3,R2
   \   000007A0   8018               ADDS     R0,R0,R2
   \   000007A2   801C               ADDS     R0,R0,#+2
   \   000007A4   4000               LSLS     R0,R0,#+1
   \   000007A6   0322               MOVS     R2,#+3
   \   000007A8   9043               BICS     R0,R0,R2
   \   000007AA   0818               ADDS     R0,R1,R0
   \   000007AC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000007AE   240E               LSRS     R4,R4,#+24
   \   000007B0   1421               MOVS     R1,#+20
   \   000007B2   6143               MULS     R1,R4,R1
   \   000007B4   774A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000007B6   5118               ADDS     R1,R2,R1
   \   000007B8   0979               LDRB     R1,[R1, #+4]
   \   000007BA   0822               MOVS     R2,#+8
   \   000007BC   5143               MULS     R1,R2,R1
   \   000007BE   0122               MOVS     R2,#+1
   \   000007C0   0A40               ANDS     R2,R2,R1
   \   000007C2   805A               LDRH     R0,[R0, R2]
   \   000007C4   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000007C6   000C               LSRS     R0,R0,#+16
   \   000007C8   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   000007CA   800D               LSRS     R0,R0,#+22
   \   000007CC   0190               STR      R0,[SP, #+4]
   1656                  pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrTx(EpInfo[EndPoint].EpSlot));
   \   000007CE   6F48               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000007D0   8446               MOV      R12,R0
   \   000007D2   6E48               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000007D4   6E49               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000007D6   6D4A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000007D8   891A               SUBS     R1,R1,R2
   \   000007DA   4908               LSRS     R1,R1,#+1
   \   000007DC   1839               SUBS     R1,R1,#+24
   \   000007DE   0722               MOVS     R2,#+7
   \   000007E0   9143               BICS     R1,R1,R2
   \   000007E2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000007E4   240E               LSRS     R4,R4,#+24
   \   000007E6   1423               MOVS     R3,#+20
   \   000007E8   6343               MULS     R3,R4,R3
   \   000007EA   6A4A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000007EC   D218               ADDS     R2,R2,R3
   \   000007EE   1379               LDRB     R3,[R2, #+4]
   \   000007F0   0822               MOVS     R2,#+8
   \   000007F2   5343               MULS     R3,R2,R3
   \   000007F4   C918               ADDS     R1,R1,R3
   \   000007F6   4900               LSLS     R1,R1,#+1
   \   000007F8   0322               MOVS     R2,#+3
   \   000007FA   9143               BICS     R1,R1,R2
   \   000007FC   4018               ADDS     R0,R0,R1
   \   000007FE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000800   240E               LSRS     R4,R4,#+24
   \   00000802   1421               MOVS     R1,#+20
   \   00000804   6143               MULS     R1,R4,R1
   \   00000806   634A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000808   5118               ADDS     R1,R2,R1
   \   0000080A   0A79               LDRB     R2,[R1, #+4]
   \   0000080C   0821               MOVS     R1,#+8
   \   0000080E   4A43               MULS     R2,R1,R2
   \   00000810   0121               MOVS     R1,#+1
   \   00000812   1140               ANDS     R1,R1,R2
   \   00000814   405A               LDRH     R0,[R0, R1]
   \   00000816   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000818   000C               LSRS     R0,R0,#+16
   \   0000081A   4100               LSLS     R1,R0,#+1
   \   0000081C   0320               MOVS     R0,#+3
   \   0000081E   8143               BICS     R1,R1,R0
   \   00000820   6046               MOV      R0,R12
   \   00000822   4018               ADDS     R0,R0,R1
   \   00000824   8446               MOV      R12,R0
   \   00000826   5948               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000828   5949               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000082A   584A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000082C   891A               SUBS     R1,R1,R2
   \   0000082E   4908               LSRS     R1,R1,#+1
   \   00000830   1839               SUBS     R1,R1,#+24
   \   00000832   0722               MOVS     R2,#+7
   \   00000834   9143               BICS     R1,R1,R2
   \   00000836   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000838   240E               LSRS     R4,R4,#+24
   \   0000083A   1423               MOVS     R3,#+20
   \   0000083C   6343               MULS     R3,R4,R3
   \   0000083E   554A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000840   D218               ADDS     R2,R2,R3
   \   00000842   1379               LDRB     R3,[R2, #+4]
   \   00000844   0822               MOVS     R2,#+8
   \   00000846   5343               MULS     R3,R2,R3
   \   00000848   C918               ADDS     R1,R1,R3
   \   0000084A   4900               LSLS     R1,R1,#+1
   \   0000084C   0322               MOVS     R2,#+3
   \   0000084E   9143               BICS     R1,R1,R2
   \   00000850   4018               ADDS     R0,R0,R1
   \   00000852   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000854   240E               LSRS     R4,R4,#+24
   \   00000856   1421               MOVS     R1,#+20
   \   00000858   6143               MULS     R1,R4,R1
   \   0000085A   4E4A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   0000085C   5118               ADDS     R1,R2,R1
   \   0000085E   0A79               LDRB     R2,[R1, #+4]
   \   00000860   0821               MOVS     R1,#+8
   \   00000862   4A43               MULS     R2,R1,R2
   \   00000864   0121               MOVS     R1,#+1
   \   00000866   1140               ANDS     R1,R1,R2
   \   00000868   405A               LDRH     R0,[R0, R1]
   \   0000086A   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000086C   000C               LSRS     R0,R0,#+16
   \   0000086E   0121               MOVS     R1,#+1
   \   00000870   0140               ANDS     R1,R1,R0
   \   00000872   6046               MOV      R0,R12
   \   00000874   4018               ADDS     R0,R0,R1
   \   00000876   0090               STR      R0,[SP, #+0]
   \   00000878   7EE0               B        ??USB_EpRead_36
   1657                }
   1658                else
   1659                {
   1660                  EpCount = ReadEpDTB_CountRx(EpInfo[EndPoint].EpSlot) & 0x3FF;
   \                     ??USB_EpRead_35:
   \   0000087A   4449               LDR      R1,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000087C   4448               LDR      R0,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   0000087E   434A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000880   801A               SUBS     R0,R0,R2
   \   00000882   4008               LSRS     R0,R0,#+1
   \   00000884   1838               SUBS     R0,R0,#+24
   \   00000886   0722               MOVS     R2,#+7
   \   00000888   9043               BICS     R0,R0,R2
   \   0000088A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000088C   240E               LSRS     R4,R4,#+24
   \   0000088E   1422               MOVS     R2,#+20
   \   00000890   6243               MULS     R2,R4,R2
   \   00000892   404B               LDR      R3,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000894   9A18               ADDS     R2,R3,R2
   \   00000896   1279               LDRB     R2,[R2, #+4]
   \   00000898   0823               MOVS     R3,#+8
   \   0000089A   5A43               MULS     R2,R3,R2
   \   0000089C   8018               ADDS     R0,R0,R2
   \   0000089E   801D               ADDS     R0,R0,#+6
   \   000008A0   4000               LSLS     R0,R0,#+1
   \   000008A2   0322               MOVS     R2,#+3
   \   000008A4   9043               BICS     R0,R0,R2
   \   000008A6   0818               ADDS     R0,R1,R0
   \   000008A8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000008AA   240E               LSRS     R4,R4,#+24
   \   000008AC   1421               MOVS     R1,#+20
   \   000008AE   6143               MULS     R1,R4,R1
   \   000008B0   384A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000008B2   5118               ADDS     R1,R2,R1
   \   000008B4   0979               LDRB     R1,[R1, #+4]
   \   000008B6   0822               MOVS     R2,#+8
   \   000008B8   5143               MULS     R1,R2,R1
   \   000008BA   0122               MOVS     R2,#+1
   \   000008BC   0A40               ANDS     R2,R2,R1
   \   000008BE   805A               LDRH     R0,[R0, R2]
   \   000008C0   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000008C2   000C               LSRS     R0,R0,#+16
   \   000008C4   8005               LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   000008C6   800D               LSRS     R0,R0,#+22
   \   000008C8   0190               STR      R0,[SP, #+4]
   1661                  pSrc = (pInt32U)__Offset2Addr_PackMem(ReadEpDTB_AddrRx(EpInfo[EndPoint].EpSlot));
   \   000008CA   3048               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000008CC   8446               MOV      R12,R0
   \   000008CE   2F48               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000008D0   2F49               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   000008D2   2E4A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   000008D4   891A               SUBS     R1,R1,R2
   \   000008D6   4908               LSRS     R1,R1,#+1
   \   000008D8   1839               SUBS     R1,R1,#+24
   \   000008DA   0722               MOVS     R2,#+7
   \   000008DC   9143               BICS     R1,R1,R2
   \   000008DE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000008E0   240E               LSRS     R4,R4,#+24
   \   000008E2   1423               MOVS     R3,#+20
   \   000008E4   6343               MULS     R3,R4,R3
   \   000008E6   2B4A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   000008E8   D218               ADDS     R2,R2,R3
   \   000008EA   1379               LDRB     R3,[R2, #+4]
   \   000008EC   0822               MOVS     R2,#+8
   \   000008EE   5343               MULS     R3,R2,R3
   \   000008F0   C918               ADDS     R1,R1,R3
   \   000008F2   091D               ADDS     R1,R1,#+4
   \   000008F4   4900               LSLS     R1,R1,#+1
   \   000008F6   0322               MOVS     R2,#+3
   \   000008F8   9143               BICS     R1,R1,R2
   \   000008FA   4018               ADDS     R0,R0,R1
   \   000008FC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000008FE   240E               LSRS     R4,R4,#+24
   \   00000900   1421               MOVS     R1,#+20
   \   00000902   6143               MULS     R1,R4,R1
   \   00000904   234A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   00000906   5118               ADDS     R1,R2,R1
   \   00000908   0A79               LDRB     R2,[R1, #+4]
   \   0000090A   0821               MOVS     R1,#+8
   \   0000090C   4A43               MULS     R2,R1,R2
   \   0000090E   0121               MOVS     R1,#+1
   \   00000910   1140               ANDS     R1,R1,R2
   \   00000912   405A               LDRH     R0,[R0, R1]
   \   00000914   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000916   000C               LSRS     R0,R0,#+16
   \   00000918   4100               LSLS     R1,R0,#+1
   \   0000091A   0320               MOVS     R0,#+3
   \   0000091C   8143               BICS     R1,R1,R0
   \   0000091E   6046               MOV      R0,R12
   \   00000920   4018               ADDS     R0,R0,R1
   \   00000922   8446               MOV      R12,R0
   \   00000924   1948               LDR      R0,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   00000926   1A49               LDR      R1,??USB_EpRead_29+0x4  ;; SFE(USB_PACKET_MEMORY)
   \   00000928   184A               LDR      R2,??USB_EpRead_29  ;; SFB(USB_PACKET_MEMORY)
   \   0000092A   891A               SUBS     R1,R1,R2
   \   0000092C   4908               LSRS     R1,R1,#+1
   \   0000092E   1839               SUBS     R1,R1,#+24
   \   00000930   0722               MOVS     R2,#+7
   \   00000932   9143               BICS     R1,R1,R2
   \   00000934   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000936   240E               LSRS     R4,R4,#+24
   \   00000938   1423               MOVS     R3,#+20
   \   0000093A   6343               MULS     R3,R4,R3
   \   0000093C   154A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   0000093E   D218               ADDS     R2,R2,R3
   \   00000940   1379               LDRB     R3,[R2, #+4]
   \   00000942   0822               MOVS     R2,#+8
   \   00000944   5343               MULS     R3,R2,R3
   \   00000946   C918               ADDS     R1,R1,R3
   \   00000948   091D               ADDS     R1,R1,#+4
   \   0000094A   4900               LSLS     R1,R1,#+1
   \   0000094C   0322               MOVS     R2,#+3
   \   0000094E   9143               BICS     R1,R1,R2
   \   00000950   4018               ADDS     R0,R0,R1
   \   00000952   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000954   240E               LSRS     R4,R4,#+24
   \   00000956   1421               MOVS     R1,#+20
   \   00000958   6143               MULS     R1,R4,R1
   \   0000095A   0E4A               LDR      R2,??USB_EpRead_29+0x8  ;; EpInfo
   \   0000095C   5118               ADDS     R1,R2,R1
   \   0000095E   0A79               LDRB     R2,[R1, #+4]
   \   00000960   0821               MOVS     R1,#+8
   \   00000962   4A43               MULS     R2,R1,R2
   \   00000964   0121               MOVS     R1,#+1
   \   00000966   1140               ANDS     R1,R1,R2
   \   00000968   405A               LDRH     R0,[R0, R1]
   \   0000096A   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000096C   000C               LSRS     R0,R0,#+16
   \   0000096E   0121               MOVS     R1,#+1
   \   00000970   0140               ANDS     R1,R1,R0
   \   00000972   6046               MOV      R0,R12
   \   00000974   4018               ADDS     R0,R0,R1
   \   00000976   0090               STR      R0,[SP, #+0]
   1662                }
   1663          
   1664                // the buffer size must be enough bigger to get all available data from
   1665                // the EP in other case remaining data will be lost
   1666                if(EpCount > (ActSize-SizeHold))
   \                     ??USB_EpRead_36:
   \   00000978   0498               LDR      R0,[SP, #+16]
   \   0000097A   401B               SUBS     R0,R0,R5
   \   0000097C   0199               LDR      R1,[SP, #+4]
   \   0000097E   8842               CMP      R0,R1
   \   00000980   0AD2               BCS      ??USB_EpRead_37
   1667                {
   1668                  *pCount = SizeHold;
   \   00000982   0698               LDR      R0,[SP, #+24]
   \   00000984   0560               STR      R5,[R0, #+0]
   1669                  return (USB_BUF_OVERFLOW);
   \   00000986   0520               MOVS     R0,#+5
   \   00000988   49E0               B        ??USB_EpRead_2
   \   0000098A   C046               Nop      
   \                     ??USB_EpRead_29:
   \   0000098C   ........           DC32     SFB(USB_PACKET_MEMORY)
   \   00000990   ........           DC32     SFE(USB_PACKET_MEMORY)
   \   00000994   ........           DC32     EpInfo
   1670                }
   1671                CurrSize = EpCount;
   \                     ??USB_EpRead_37:
   \   00000998   0198               LDR      R0,[SP, #+4]
   \   0000099A   0590               STR      R0,[SP, #+20]
   1672                for(Count = 0; Count < CurrSize; ++Count)
   \   0000099C   0020               MOVS     R0,#+0
   \   0000099E   0700               MOVS     R7,R0
   \                     ??USB_EpRead_38:
   \   000009A0   0598               LDR      R0,[SP, #+20]
   \   000009A2   8742               CMP      R7,R0
   \   000009A4   12D2               BCS      ??USB_EpRead_39
   1673                {
   1674                  Temp = *pSrc++;
   \   000009A6   0098               LDR      R0,[SP, #+0]
   \   000009A8   0100               MOVS     R1,R0
   \   000009AA   091D               ADDS     R1,R1,#+4
   \   000009AC   0091               STR      R1,[SP, #+0]
   \   000009AE   0068               LDR      R0,[R0, #+0]
   \   000009B0   0290               STR      R0,[SP, #+8]
   1675                  *pData++ = Temp;
   \   000009B2   0298               LDR      R0,[SP, #+8]
   \   000009B4   3070               STRB     R0,[R6, #+0]
   \   000009B6   761C               ADDS     R6,R6,#+1
   1676                  if(++Count <= CurrSize) // fix overwrite problem with odd number of bytes
   \   000009B8   7F1C               ADDS     R7,R7,#+1
   \   000009BA   0598               LDR      R0,[SP, #+20]
   \   000009BC   B842               CMP      R0,R7
   \   000009BE   03D3               BCC      ??USB_EpRead_40
   1677                  {
   1678                    *pData++ = Temp>>8;
   \   000009C0   0298               LDR      R0,[SP, #+8]
   \   000009C2   000A               LSRS     R0,R0,#+8
   \   000009C4   3070               STRB     R0,[R6, #+0]
   \   000009C6   761C               ADDS     R6,R6,#+1
   1679                  }
   1680                }
   \                     ??USB_EpRead_40:
   \   000009C8   7F1C               ADDS     R7,R7,#+1
   \   000009CA   E9E7               B        ??USB_EpRead_38
   1681                EpCtrlToggle_DTOG_TX(EpInfo[EndPoint].pEpCtrl);
   \                     ??USB_EpRead_39:
   \   000009CC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000009CE   240E               LSRS     R4,R4,#+24
   \   000009D0   1420               MOVS     R0,#+20
   \   000009D2   6043               MULS     R0,R4,R0
   \   000009D4   1449               LDR      R1,??USB_EpRead_41  ;; EpInfo
   \   000009D6   0858               LDR      R0,[R1, R0]
   \   000009D8   ........           BL       EpCtrlToggle_DTOG_TX
   1682                EpState.DTOGTX ^= 1;
   \   000009DC   6846               MOV      R0,SP
   \   000009DE   6946               MOV      R1,SP
   \   000009E0   8989               LDRH     R1,[R1, #+12]
   \   000009E2   4022               MOVS     R2,#+64
   \   000009E4   4A40               EORS     R2,R2,R1
   \   000009E6   8281               STRH     R2,[R0, #+12]
   1683                SizeHold += CurrSize;
   \   000009E8   0598               LDR      R0,[SP, #+20]
   \   000009EA   2D18               ADDS     R5,R5,R0
   1684                --EpInfo[EndPoint].EpIntrFl;
   \   000009EC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000009EE   240E               LSRS     R4,R4,#+24
   \   000009F0   1420               MOVS     R0,#+20
   \   000009F2   6043               MULS     R0,R4,R0
   \   000009F4   0C49               LDR      R1,??USB_EpRead_41  ;; EpInfo
   \   000009F6   0818               ADDS     R0,R1,R0
   \   000009F8   0069               LDR      R0,[R0, #+16]
   \   000009FA   401E               SUBS     R0,R0,#+1
   \   000009FC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000009FE   240E               LSRS     R4,R4,#+24
   \   00000A00   1421               MOVS     R1,#+20
   \   00000A02   6143               MULS     R1,R4,R1
   \   00000A04   084A               LDR      R2,??USB_EpRead_41  ;; EpInfo
   \   00000A06   5118               ADDS     R1,R2,R1
   \   00000A08   0861               STR      R0,[R1, #+16]
   1685              } while(SizeHold < ActSize);
   \   00000A0A   0498               LDR      R0,[SP, #+16]
   \   00000A0C   8542               CMP      R5,R0
   \   00000A0E   00D2               BCS      .+4
   \   00000A10   A7E6               B        ??USB_EpRead_34
   \   00000A12   01E0               B        ??USB_EpRead_15
   1686              break;
   1687            default:
   1688              return(USB_EP_FATAL_ERROR);
   \                     ??USB_EpRead_9:
   \   00000A14   0A20               MOVS     R0,#+10
   \   00000A16   02E0               B        ??USB_EpRead_2
   1689            }
   1690            *pCount = SizeHold;
   \                     ??USB_EpRead_15:
   \   00000A18   0698               LDR      R0,[SP, #+24]
   \   00000A1A   0560               STR      R5,[R0, #+0]
   1691            return (USB_OK);
   \   00000A1C   0020               MOVS     R0,#+0
   \                     ??USB_EpRead_2:
   \   00000A1E   07B0               ADD      SP,SP,#+28
   \   00000A20   F0BC               POP      {R4-R7}
   \   00000A22   02BC               POP      {R1}
   \   00000A24   0847               BX       R1               ;; return
   \   00000A26   C046               Nop      
   \                     ??USB_EpRead_41:
   \   00000A28   ........           DC32     EpInfo
   1692          }
   1693          
   1694          /*************************************************************************
   1695           * Function Name: USB_EpLogToPhysAdd
   1696           * Parameters: Int8U EpLogAdd
   1697           *
   1698           * Return: USB_Endpoint_t
   1699           *
   1700           * Description: Convert the logical to physical address
   1701           *
   1702           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1703          USB_Endpoint_t USB_EpLogToPhysAdd (Int8U EpLogAdd)
   1704          {
   \                     USB_EpLogToPhysAdd:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0100               MOVS     R1,R0
   1705          USB_Endpoint_t Address = (USB_Endpoint_t)((EpLogAdd & 0x0F)<<1);
   \   00000004   0A07               LSLS     R2,R1,#+28       ;; ZeroExtS R2,R1,#+28,#+28
   \   00000006   120F               LSRS     R2,R2,#+28
   \   00000008   5200               LSLS     R2,R2,#+1
   \   0000000A   1000               MOVS     R0,R2
   1706            if(EpLogAdd & 0x80)
   \   0000000C   0A06               LSLS     R2,R1,#+24
   \   0000000E   00D5               BPL      ??USB_EpLogToPhysAdd_0
   1707            {
   1708              ++Address;
   \   00000010   401C               ADDS     R0,R0,#+1
   1709            }
   1710            return(Address);
   \                     ??USB_EpLogToPhysAdd_0:
   \   00000012   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000014   000E               LSRS     R0,R0,#+24
   \   00000016   08BC               POP      {R3}
   \   00000018   02BC               POP      {R1}
   \   0000001A   0847               BX       R1               ;; return
   1711          }
   1712          
   1713          #if USB_SOF_EVENT > 0
   1714          /*************************************************************************
   1715           * Function Name: USB_GetFrameNumb
   1716           * Parameters: none
   1717           *
   1718           * Return: Int32U
   1719           *
   1720           * Description: Return current value of SOF number
   1721           *
   1722           *************************************************************************/
   1723          Int32U USB_GetFrameNumb (void)
   1724          {
   1725            return(USB_FNR_bit.FN);
   1726          }
   1727          #endif // USB_SOF_EVENT > 0
   1728          
   1729          #if USB_HIGH_PRIORITY_EVENT > 0
   1730          /*************************************************************************
   1731           * Function Name: USB_HIGH_ISR
   1732           * Parameters: none
   1733           *
   1734           * Return: none
   1735           *
   1736           * Description: High priority USB interrupt subroutine
   1737           *
   1738           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1739          void USB_HIGH_ISR (void)
   1740          {
   \                     USB_HIGH_ISR:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1741          IntrStatus_t IntrStatus;
   1742          Int32U EpPhAddr;
   1743          Int32U Status;
   1744            IntrStatus.Status  = USB_ISTR;
   \   00000002   5448               LDR      R0,??USB_HIGH_ISR_0  ;; 0xffffa844
   \   00000004   0088               LDRH     R0,[R0, #+0]
   \   00000006   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000008   000C               LSRS     R0,R0,#+16
   \   0000000A   0600               MOVS     R6,R0
   1745            IntrStatus.Status &= USB_CNTR | 0x1F;
   \   0000000C   3100               MOVS     R1,R6
   \   0000000E   5248               LDR      R0,??USB_HIGH_ISR_0+0x4  ;; 0xffffa840
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000014   000C               LSRS     R0,R0,#+16
   \   00000016   1F26               MOVS     R6,#+31
   \   00000018   0643               ORRS     R6,R6,R0
   \   0000001A   0E40               ANDS     R6,R6,R1
   1746            // Get masked interrupt flags
   1747            if(IntrStatus.CTR)
   \   0000001C   3004               LSLS     R0,R6,#+16
   \   0000001E   00D4               BMI      .+4
   \   00000020   94E0               B        ??USB_HIGH_ISR_1
   1748            {
   1749              // find corresponding EP
   1750              pInt32U pReg = (pInt32U)&USB_EP0R;
   \   00000022   4E48               LDR      R0,??USB_HIGH_ISR_0+0x8  ;; 0xffffa800
   \   00000024   0700               MOVS     R7,R0
   1751              pReg += IntrStatus.EP_ID;
   \   00000026   3007               LSLS     R0,R6,#+28       ;; ZeroExtS R0,R6,#+28,#+28
   \   00000028   000F               LSRS     R0,R0,#+28
   \   0000002A   0421               MOVS     R1,#+4
   \   0000002C   4843               MULS     R0,R1,R0
   \   0000002E   3F18               ADDS     R7,R7,R0
   1752              EpPhAddr = ((*pReg & 0xF) << 1) + (IntrStatus.DIR?0:1);
   \   00000030   1020               MOVS     R0,#+16
   \   00000032   3040               ANDS     R0,R0,R6
   \   00000034   401E               SUBS     R0,R0,#+1
   \   00000036   8041               SBCS     R0,R0,R0
   \   00000038   C00F               LSRS     R0,R0,#+31
   \   0000003A   3968               LDR      R1,[R7, #+0]
   \   0000003C   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   0000003E   090F               LSRS     R1,R1,#+28
   \   00000040   4900               LSLS     R1,R1,#+1
   \   00000042   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000044   000E               LSRS     R0,R0,#+24
   \   00000046   0818               ADDS     R0,R1,R0
   \   00000048   0400               MOVS     R4,R0
   1753              if(EpInfo[EpPhAddr].EpType == EP_BULK_DOUB_BUF)
   \   0000004A   1420               MOVS     R0,#+20
   \   0000004C   6043               MULS     R0,R4,R0
   \   0000004E   4449               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000050   0818               ADDS     R0,R1,R0
   \   00000052   007B               LDRB     R0,[R0, #+12]
   \   00000054   0428               CMP      R0,#+4
   \   00000056   05D1               BNE      ??USB_HIGH_ISR_2
   1754              {
   1755                EpInfo[EpPhAddr].EpIntrFl = 1;
   \   00000058   1420               MOVS     R0,#+20
   \   0000005A   6043               MULS     R0,R4,R0
   \   0000005C   4049               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   0000005E   0818               ADDS     R0,R1,R0
   \   00000060   0121               MOVS     R1,#+1
   \   00000062   0161               STR      R1,[R0, #+16]
   1756              }
   1757              if(IntrStatus.DIR == 1)
   \                     ??USB_HIGH_ISR_2:
   \   00000064   1020               MOVS     R0,#+16
   \   00000066   3040               ANDS     R0,R0,R6
   \   00000068   0009               LSRS     R0,R0,#+4
   \   0000006A   0128               CMP      R0,#+1
   \   0000006C   41D1               BNE      ??USB_HIGH_ISR_3
   1758              {
   1759                // OUT EP
   1760                EpCtrlClr_CTR_RX(EpInfo[EpPhAddr].pEpCtrl);
   \   0000006E   1420               MOVS     R0,#+20
   \   00000070   6043               MULS     R0,R4,R0
   \   00000072   3B49               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000074   0858               LDR      R0,[R1, R0]
   \   00000076   ........           BL       EpCtrlClr_CTR_RX
   1761                Status = EpCtrlGet_DTOG_TX(EpInfo[EpPhAddr].pEpCtrl);
   \   0000007A   1420               MOVS     R0,#+20
   \   0000007C   6043               MULS     R0,R4,R0
   \   0000007E   3849               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000080   0858               LDR      R0,[R1, R0]
   \   00000082   ........           BL       EpCtrlGet_DTOG_TX
   \   00000086   0500               MOVS     R5,R0
   1762                if(Status == EpCtrlGet_DTOG_RX(EpInfo[EpPhAddr].pEpCtrl))
   \   00000088   1420               MOVS     R0,#+20
   \   0000008A   6043               MULS     R0,R4,R0
   \   0000008C   3449               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   0000008E   0858               LDR      R0,[R1, R0]
   \   00000090   ........           BL       EpCtrlGet_DTOG_RX
   \   00000094   8542               CMP      R5,R0
   \   00000096   0AD1               BNE      ??USB_HIGH_ISR_4
   1763                {
   1764                  // The both buffers are filled
   1765                  ++EpInfo[EpPhAddr].EpIntrFl;
   \   00000098   1420               MOVS     R0,#+20
   \   0000009A   6043               MULS     R0,R4,R0
   \   0000009C   3049               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   0000009E   0818               ADDS     R0,R1,R0
   \   000000A0   0069               LDR      R0,[R0, #+16]
   \   000000A2   401C               ADDS     R0,R0,#+1
   \   000000A4   1421               MOVS     R1,#+20
   \   000000A6   6143               MULS     R1,R4,R1
   \   000000A8   2D4A               LDR      R2,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   000000AA   5118               ADDS     R1,R2,R1
   \   000000AC   0861               STR      R0,[R1, #+16]
   1766                }
   1767                // Some times USB engine receive second packet
   1768                // after resetting of interrupt flag and before testing of
   1769                // toggle bits
   1770                if(EpCtrlGet_CTR_RX(EpInfo[EpPhAddr].pEpCtrl))
   \                     ??USB_HIGH_ISR_4:
   \   000000AE   1420               MOVS     R0,#+20
   \   000000B0   6043               MULS     R0,R4,R0
   \   000000B2   2B49               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   000000B4   0858               LDR      R0,[R1, R0]
   \   000000B6   ........           BL       EpCtrlGet_CTR_RX
   \   000000BA   0028               CMP      R0,#+0
   \   000000BC   0BD0               BEQ      ??USB_HIGH_ISR_5
   1771                {
   1772                  // Now both buffers are filled.
   1773                  EpCtrlClr_CTR_RX(EpInfo[EpPhAddr].pEpCtrl);
   \   000000BE   1420               MOVS     R0,#+20
   \   000000C0   6043               MULS     R0,R4,R0
   \   000000C2   2749               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   000000C4   0858               LDR      R0,[R1, R0]
   \   000000C6   ........           BL       EpCtrlClr_CTR_RX
   1774                  EpInfo[EpPhAddr].EpIntrFl = 2;
   \   000000CA   1420               MOVS     R0,#+20
   \   000000CC   6043               MULS     R0,R4,R0
   \   000000CE   2449               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   000000D0   0818               ADDS     R0,R1,R0
   \   000000D2   0221               MOVS     R1,#+2
   \   000000D4   0161               STR      R1,[R0, #+16]
   1775                }
   1776                if(UsbUserFun[EpPhAddr] != NULL)
   \                     ??USB_HIGH_ISR_5:
   \   000000D6   0420               MOVS     R0,#+4
   \   000000D8   6043               MULS     R0,R4,R0
   \   000000DA   2249               LDR      R1,??USB_HIGH_ISR_0+0x10  ;; UsbUserFun
   \   000000DC   0858               LDR      R0,[R1, R0]
   \   000000DE   0028               CMP      R0,#+0
   \   000000E0   34D0               BEQ      ??USB_HIGH_ISR_1
   1777                {
   1778                  UsbUserFun[EpPhAddr]((void *)UsbDataOutPacket);
   \   000000E2   0120               MOVS     R0,#+1
   \   000000E4   0421               MOVS     R1,#+4
   \   000000E6   6143               MULS     R1,R4,R1
   \   000000E8   1E4A               LDR      R2,??USB_HIGH_ISR_0+0x10  ;; UsbUserFun
   \   000000EA   5158               LDR      R1,[R2, R1]
   \   000000EC   ........           BL       __iar_via_R1
   \   000000F0   2CE0               B        ??USB_HIGH_ISR_1
   1779                }
   1780              }
   1781              else
   1782              {
   1783                // IN EP
   1784                EpCtrlClr_CTR_TX(EpInfo[EpPhAddr].pEpCtrl);
   \                     ??USB_HIGH_ISR_3:
   \   000000F2   1420               MOVS     R0,#+20
   \   000000F4   6043               MULS     R0,R4,R0
   \   000000F6   1A49               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   000000F8   0858               LDR      R0,[R1, R0]
   \   000000FA   ........           BL       EpCtrlClr_CTR_TX
   1785                Status = EpCtrlGet_DTOG_RX(EpInfo[EpPhAddr].pEpCtrl);
   \   000000FE   1420               MOVS     R0,#+20
   \   00000100   6043               MULS     R0,R4,R0
   \   00000102   1749               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000104   0858               LDR      R0,[R1, R0]
   \   00000106   ........           BL       EpCtrlGet_DTOG_RX
   \   0000010A   0500               MOVS     R5,R0
   1786                if(Status == EpCtrlGet_DTOG_TX(EpInfo[EpPhAddr].pEpCtrl))
   \   0000010C   1420               MOVS     R0,#+20
   \   0000010E   6043               MULS     R0,R4,R0
   \   00000110   1349               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000112   0858               LDR      R0,[R1, R0]
   \   00000114   ........           BL       EpCtrlGet_DTOG_TX
   \   00000118   8542               CMP      R5,R0
   \   0000011A   0AD1               BNE      ??USB_HIGH_ISR_6
   1787                {
   1788                  // The both buffers are drained
   1789                  ++EpInfo[EpPhAddr].EpIntrFl;
   \   0000011C   1420               MOVS     R0,#+20
   \   0000011E   6043               MULS     R0,R4,R0
   \   00000120   0F49               LDR      R1,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   00000122   0818               ADDS     R0,R1,R0
   \   00000124   0069               LDR      R0,[R0, #+16]
   \   00000126   401C               ADDS     R0,R0,#+1
   \   00000128   1421               MOVS     R1,#+20
   \   0000012A   6143               MULS     R1,R4,R1
   \   0000012C   0C4A               LDR      R2,??USB_HIGH_ISR_0+0xC  ;; EpInfo
   \   0000012E   5118               ADDS     R1,R2,R1
   \   00000130   0861               STR      R0,[R1, #+16]
   1790                }
   1791                if(UsbUserFun[EpPhAddr] != NULL)
   \                     ??USB_HIGH_ISR_6:
   \   00000132   0420               MOVS     R0,#+4
   \   00000134   6043               MULS     R0,R4,R0
   \   00000136   0B49               LDR      R1,??USB_HIGH_ISR_0+0x10  ;; UsbUserFun
   \   00000138   0858               LDR      R0,[R1, R0]
   \   0000013A   0028               CMP      R0,#+0
   \   0000013C   06D0               BEQ      ??USB_HIGH_ISR_1
   1792                {
   1793                  UsbUserFun[EpPhAddr]((void *)UsbDataInPacket);
   \   0000013E   0220               MOVS     R0,#+2
   \   00000140   0421               MOVS     R1,#+4
   \   00000142   6143               MULS     R1,R4,R1
   \   00000144   074A               LDR      R2,??USB_HIGH_ISR_0+0x10  ;; UsbUserFun
   \   00000146   5158               LDR      R1,[R2, R1]
   \   00000148   ........           BL       __iar_via_R1
   1794                }
   1795              }
   1796            }
   1797          }
   \                     ??USB_HIGH_ISR_1:
   \   0000014C   F8BC               POP      {R3-R7}
   \   0000014E   01BC               POP      {R0}
   \   00000150   0047               BX       R0               ;; return
   \   00000152   C046               Nop      
   \                     ??USB_HIGH_ISR_0:
   \   00000154   44A8FFFF           DC32     0xffffa844
   \   00000158   40A8FFFF           DC32     0xffffa840
   \   0000015C   00A8FFFF           DC32     0xffffa800
   \   00000160   ........           DC32     EpInfo
   \   00000164   ........           DC32     UsbUserFun
   \   00000168                      REQUIRE _A_USB_EP0R
   \   00000168                      REQUIRE _A_USB_CNTR
   \   00000168                      REQUIRE _A_USB_ISTR
   1798          #endif // USB_HIGH_PRIORITY_EVENT > 0
   1799          
   1800          /*************************************************************************
   1801           * Function Name: USB_ISR
   1802           * Parameters: none
   1803           *
   1804           * Return: none
   1805           *
   1806           * Description: USB interrupt subroutine
   1807           *
   1808           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1809          void USB_ISR (void)
   1810          {
   \                     USB_ISR:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1811          IntrStatus_t IntrStatus;
   1812          Int32U EpPhAddr;
   1813          Boolean SetupPacket;
   1814          
   1815            // Get masked interrupt flags
   1816            IntrStatus.Status  = USB_ISTR;
   \   00000002   5648               LDR      R0,??USB_ISR_0   ;; 0xffffa844
   \   00000004   0088               LDRH     R0,[R0, #+0]
   \   00000006   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000008   000C               LSRS     R0,R0,#+16
   \   0000000A   0600               MOVS     R6,R0
   1817            IntrStatus.Status &= USB_CNTR | 0x1F;
   \   0000000C   3100               MOVS     R1,R6
   \   0000000E   5448               LDR      R0,??USB_ISR_0+0x4  ;; 0xffffa840
   \   00000010   0088               LDRH     R0,[R0, #+0]
   \   00000012   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000014   000C               LSRS     R0,R0,#+16
   \   00000016   1F26               MOVS     R6,#+31
   \   00000018   0643               ORRS     R6,R6,R0
   \   0000001A   0E40               ANDS     R6,R6,R1
   1818          
   1819          #if USB_DOVR_EVENT > 0
   1820            // DMA over / underrun (for speed up retry process)
   1821            if(IntrStatus.DOVR)
   1822            {
   1823              USB_ISTR = ~bmDOVR;
   1824              if(UsbUserFun[UsbDovrEvent] != NULL)
   1825              {
   1826                UsbUserFun[UsbDovrEvent]((void *)Val);
   1827              }
   1828            }
   1829          #endif
   1830          
   1831          #if USB_ERROR_EVENT > 0
   1832            // USB engine error interrupt
   1833            if(IntrStatus.ERR)
   1834            {
   1835              USB_ISTR = ~bmERRM;
   1836              if(UsbUserFun[UsbErrorEvent] != NULL)
   1837              {
   1838                UsbUserFun[UsbErrorEvent](NULL);
   1839              }
   1840            }
   1841          #endif
   1842          
   1843            // Device reset
   1844            if(IntrStatus.RESET)
   \   0000001C   7005               LSLS     R0,R6,#+21
   \   0000001E   0CD5               BPL      ??USB_ISR_1
   1845            {
   1846              USB_ISTR = ~bmRESETM;
   \   00000020   4E48               LDR      R0,??USB_ISR_0   ;; 0xffffa844
   \   00000022   5049               LDR      R1,??USB_ISR_0+0x8  ;; 0xfbff
   \   00000024   0180               STRH     R1,[R0, #+0]
   1847              USB_HwReset();
   \   00000026   ........           BL       USB_HwReset
   1848              UsbDevConnectCallback(TRUE);
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   ........           BL       UsbDevConnectCallback
   1849              UsbDevResetCallback();
   \   00000030   ........           BL       UsbDevResetCallback
   1850              UsbDevSuspendCallback(FALSE);
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   ........           BL       UsbDevSuspendCallback
   1851            }
   1852          
   1853          #if USB_SOF_EVENT > 0
   1854            // Frame interrupt
   1855            if(IntrStatus.SOF)
   1856            {
   1857              USB_ISTR = ~bmSOFM;
   1858              if(UsbUserFun[UsbUserSofEvent] != NULL)
   1859              {
   1860                UsbUserFun[UsbUserSofEvent]((void *)NULL);
   1861              }
   1862            }
   1863          #endif
   1864          
   1865            // Wake-up interrupt
   1866            if(IntrStatus.WKUP)
   \                     ??USB_ISR_1:
   \   0000003A   F004               LSLS     R0,R6,#+19
   \   0000003C   08D5               BPL      ??USB_ISR_2
   1867            {
   1868              USB_ISTR = ~bmWKUPM;
   \   0000003E   4748               LDR      R0,??USB_ISR_0   ;; 0xffffa844
   \   00000040   4949               LDR      R1,??USB_ISR_0+0xC  ;; 0xefff
   \   00000042   0180               STRH     R1,[R0, #+0]
   1869              USB_Resume(USB_RESUME_WAKE_UP_EVENT);
   \   00000044   0220               MOVS     R0,#+2
   \   00000046   ........           BL       USB_Resume
   1870              UsbDevSuspendCallback(FALSE);
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   ........           BL       UsbDevSuspendCallback
   1871            }
   1872          
   1873            // Device suspend
   1874            if(IntrStatus.SUSP)
   \                     ??USB_ISR_2:
   \   00000050   3005               LSLS     R0,R6,#+20
   \   00000052   07D5               BPL      ??USB_ISR_3
   1875            {
   1876              USB_Suspend();
   \   00000054   ........           BL       USB_Suspend
   1877              USB_ISTR = ~bmSUSPM;
   \   00000058   4048               LDR      R0,??USB_ISR_0   ;; 0xffffa844
   \   0000005A   4449               LDR      R1,??USB_ISR_0+0x10  ;; 0xf7ff
   \   0000005C   0180               STRH     R1,[R0, #+0]
   1878              UsbDevSuspendCallback(TRUE);
   \   0000005E   0120               MOVS     R0,#+1
   \   00000060   ........           BL       UsbDevSuspendCallback
   1879            }
   1880          
   1881            // Expected Frame interrupt
   1882            if(IntrStatus.ESOF)
   \                     ??USB_ISR_3:
   \   00000064   F005               LSLS     R0,R6,#+23
   \   00000066   05D5               BPL      ??USB_ISR_4
   1883            {
   1884              USB_ISTR = ~bmESOFM;
   \   00000068   3C48               LDR      R0,??USB_ISR_0   ;; 0xffffa844
   \   0000006A   4149               LDR      R1,??USB_ISR_0+0x14  ;; 0xfeff
   \   0000006C   0180               STRH     R1,[R0, #+0]
   1885              USB_Resume(USB_RESUME_SOF_EVENT);
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   ........           BL       USB_Resume
   1886            }
   1887          
   1888            // Low priority EP interrupt
   1889            if(IntrStatus.CTR)
   \                     ??USB_ISR_4:
   \   00000074   3004               LSLS     R0,R6,#+16
   \   00000076   6ED5               BPL      ??USB_ISR_5
   1890            {
   1891              // find corresponding EP
   1892              pInt32U pReg = (pInt32U)&USB_EP0R;
   \   00000078   3E48               LDR      R0,??USB_ISR_0+0x18  ;; 0xffffa800
   \   0000007A   0700               MOVS     R7,R0
   1893              pReg += IntrStatus.EP_ID;
   \   0000007C   3007               LSLS     R0,R6,#+28       ;; ZeroExtS R0,R6,#+28,#+28
   \   0000007E   000F               LSRS     R0,R0,#+28
   \   00000080   0421               MOVS     R1,#+4
   \   00000082   4843               MULS     R0,R1,R0
   \   00000084   3F18               ADDS     R7,R7,R0
   1894              EpPhAddr = ((*pReg & 0xF) << 1) + (IntrStatus.DIR?0:1);
   \   00000086   1020               MOVS     R0,#+16
   \   00000088   3040               ANDS     R0,R0,R6
   \   0000008A   401E               SUBS     R0,R0,#+1
   \   0000008C   8041               SBCS     R0,R0,R0
   \   0000008E   C00F               LSRS     R0,R0,#+31
   \   00000090   3968               LDR      R1,[R7, #+0]
   \   00000092   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   00000094   090F               LSRS     R1,R1,#+28
   \   00000096   4900               LSLS     R1,R1,#+1
   \   00000098   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000009A   000E               LSRS     R0,R0,#+24
   \   0000009C   0818               ADDS     R0,R1,R0
   \   0000009E   0400               MOVS     R4,R0
   1895              // The ISO and Double buffered endpoints have own interrupt (HIGH_INTR)
   1896              if((EpInfo[EpPhAddr].EpType != EP_ISO) &&
   1897                 (EpInfo[EpPhAddr].EpType != EP_BULK_DOUB_BUF))
   \   000000A0   1420               MOVS     R0,#+20
   \   000000A2   6043               MULS     R0,R4,R0
   \   000000A4   3449               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   000000A6   0818               ADDS     R0,R1,R0
   \   000000A8   007B               LDRB     R0,[R0, #+12]
   \   000000AA   0228               CMP      R0,#+2
   \   000000AC   53D0               BEQ      ??USB_ISR_5
   \   000000AE   1420               MOVS     R0,#+20
   \   000000B0   6043               MULS     R0,R4,R0
   \   000000B2   3149               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   000000B4   0818               ADDS     R0,R1,R0
   \   000000B6   007B               LDRB     R0,[R0, #+12]
   \   000000B8   0428               CMP      R0,#+4
   \   000000BA   4CD0               BEQ      ??USB_ISR_5
   1898              {
   1899                if(EpPhAddr == CTRL_ENP_OUT)
   \   000000BC   002C               CMP      R4,#+0
   \   000000BE   20D1               BNE      ??USB_ISR_6
   1900                {
   1901                  // determinate type of packet (only for control EP)
   1902                  SetupPacket = EpCtrlGet_SETUP(EpInfo[EpPhAddr].pEpCtrl);
   \   000000C0   1420               MOVS     R0,#+20
   \   000000C2   6043               MULS     R0,R4,R0
   \   000000C4   2C49               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   000000C6   0858               LDR      R0,[R1, R0]
   \   000000C8   ........           BL       EpCtrlGet_SETUP
   \   000000CC   0500               MOVS     R5,R0
   1903                  EpCtrlClr_CTR_RX(EpInfo[EpPhAddr].pEpCtrl);
   \   000000CE   1420               MOVS     R0,#+20
   \   000000D0   6043               MULS     R0,R4,R0
   \   000000D2   2949               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   000000D4   0858               LDR      R0,[R1, R0]
   \   000000D6   ........           BL       EpCtrlClr_CTR_RX
   1904                  if(UsbUserFun[UsbEp0Out] != NULL)
   \   000000DA   2848               LDR      R0,??USB_ISR_0+0x20  ;; UsbUserFun
   \   000000DC   0068               LDR      R0,[R0, #+0]
   \   000000DE   0028               CMP      R0,#+0
   \   000000E0   39D0               BEQ      ??USB_ISR_5
   1905                  {
   1906                    // call appropriate callback function
   1907                    if(SetupPacket)
   \   000000E2   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000E4   2D0E               LSRS     R5,R5,#+24
   \   000000E6   002D               CMP      R5,#+0
   \   000000E8   05D0               BEQ      ??USB_ISR_7
   1908                    {
   1909                      UsbUserFun[UsbEp0Out]((void *)UsbSetupPacket);
   \   000000EA   0020               MOVS     R0,#+0
   \   000000EC   2349               LDR      R1,??USB_ISR_0+0x20  ;; UsbUserFun
   \   000000EE   0968               LDR      R1,[R1, #+0]
   \   000000F0   ........           BL       __iar_via_R1
   \   000000F4   2FE0               B        ??USB_ISR_5
   1910                    }
   1911                    else
   1912                    {
   1913                      UsbUserFun[UsbEp0Out]((void *)UsbDataOutPacket);
   \                     ??USB_ISR_7:
   \   000000F6   0120               MOVS     R0,#+1
   \   000000F8   2049               LDR      R1,??USB_ISR_0+0x20  ;; UsbUserFun
   \   000000FA   0968               LDR      R1,[R1, #+0]
   \   000000FC   ........           BL       __iar_via_R1
   \   00000100   29E0               B        ??USB_ISR_5
   1914                    }
   1915                  }
   1916                }
   1917                else if (EpPhAddr & 1)
   \                     ??USB_ISR_6:
   \   00000102   2000               MOVS     R0,R4
   \   00000104   C007               LSLS     R0,R0,#+31
   \   00000106   13D5               BPL      ??USB_ISR_8
   1918                {
   1919                  // OUT EP
   1920                  EpCtrlClr_CTR_TX(EpInfo[EpPhAddr].pEpCtrl);
   \   00000108   1420               MOVS     R0,#+20
   \   0000010A   6043               MULS     R0,R4,R0
   \   0000010C   1A49               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   0000010E   0858               LDR      R0,[R1, R0]
   \   00000110   ........           BL       EpCtrlClr_CTR_TX
   1921                  if(UsbUserFun[EpPhAddr] != NULL)
   \   00000114   0420               MOVS     R0,#+4
   \   00000116   6043               MULS     R0,R4,R0
   \   00000118   1849               LDR      R1,??USB_ISR_0+0x20  ;; UsbUserFun
   \   0000011A   0858               LDR      R0,[R1, R0]
   \   0000011C   0028               CMP      R0,#+0
   \   0000011E   1AD0               BEQ      ??USB_ISR_5
   1922                  {
   1923                    UsbUserFun[EpPhAddr]((void *)UsbDataInPacket);
   \   00000120   0220               MOVS     R0,#+2
   \   00000122   0421               MOVS     R1,#+4
   \   00000124   6143               MULS     R1,R4,R1
   \   00000126   154A               LDR      R2,??USB_ISR_0+0x20  ;; UsbUserFun
   \   00000128   5158               LDR      R1,[R2, R1]
   \   0000012A   ........           BL       __iar_via_R1
   \   0000012E   12E0               B        ??USB_ISR_5
   1924                  }
   1925                }
   1926                else
   1927                {
   1928                  // IN EP
   1929                  EpCtrlClr_CTR_RX(EpInfo[EpPhAddr].pEpCtrl);
   \                     ??USB_ISR_8:
   \   00000130   1420               MOVS     R0,#+20
   \   00000132   6043               MULS     R0,R4,R0
   \   00000134   1049               LDR      R1,??USB_ISR_0+0x1C  ;; EpInfo
   \   00000136   0858               LDR      R0,[R1, R0]
   \   00000138   ........           BL       EpCtrlClr_CTR_RX
   1930                  if(UsbUserFun[EpPhAddr] != NULL)
   \   0000013C   0420               MOVS     R0,#+4
   \   0000013E   6043               MULS     R0,R4,R0
   \   00000140   0E49               LDR      R1,??USB_ISR_0+0x20  ;; UsbUserFun
   \   00000142   0858               LDR      R0,[R1, R0]
   \   00000144   0028               CMP      R0,#+0
   \   00000146   06D0               BEQ      ??USB_ISR_5
   1931                  {
   1932                    UsbUserFun[EpPhAddr]((void *)UsbDataOutPacket);
   \   00000148   0120               MOVS     R0,#+1
   \   0000014A   0421               MOVS     R1,#+4
   \   0000014C   6143               MULS     R1,R4,R1
   \   0000014E   0B4A               LDR      R2,??USB_ISR_0+0x20  ;; UsbUserFun
   \   00000150   5158               LDR      R1,[R2, R1]
   \   00000152   ........           BL       __iar_via_R1
   1933                  }
   1934                }
   1935              }
   1936            }
   1937          }
   \                     ??USB_ISR_5:
   \   00000156   F8BC               POP      {R3-R7}
   \   00000158   01BC               POP      {R0}
   \   0000015A   0047               BX       R0               ;; return
   \                     ??USB_ISR_0:
   \   0000015C   44A8FFFF           DC32     0xffffa844
   \   00000160   40A8FFFF           DC32     0xffffa840
   \   00000164   FFFB0000           DC32     0xfbff
   \   00000168   FFEF0000           DC32     0xefff
   \   0000016C   FFF70000           DC32     0xf7ff
   \   00000170   FFFE0000           DC32     0xfeff
   \   00000174   00A8FFFF           DC32     0xffffa800
   \   00000178   ........           DC32     EpInfo
   \   0000017C   ........           DC32     UsbUserFun
   \   00000180                      REQUIRE _A_USB_EP0R
   \   00000180                      REQUIRE _A_USB_CNTR
   \   00000180                      REQUIRE _A_USB_ISTR
   1938          
   1939          /*************************************************************************
   1940           * Function Name: UsbCtrlEp
   1941           * Parameters:  void * pArg
   1942           *
   1943           * Return: none
   1944           *
   1945           * Description: USB Ctrl EP Callback
   1946           *
   1947           *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1948          static inline
   1949          void UsbCtrlEp (USB_PacketType_t Packet)
   1950          {
   \                     UsbCtrlEp:
   \   00000000   13B5               PUSH     {R0,R1,R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1951          Int32U CurrCount;
   1952          
   1953            if(Packet == UsbSetupPacket)
   \   00000004   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000006   240E               LSRS     R4,R4,#+24
   \   00000008   002C               CMP      R4,#+0
   \   0000000A   00D0               BEQ      .+4
   \   0000000C   ECE0               B        ??UsbCtrlEp_0
   1954            {
   1955              // Setup packet
   1956              UsbEp0Ctrl.EpStatus.Status = UsbSetupPhase;
   \   0000000E   BD48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   00000010   0221               MOVS     R1,#+2
   \   00000012   0170               STRB     R1,[R0, #+0]
   1957          
   1958              UsbEp0Ctrl.pData   = EpCtrlDataBuf;
   \   00000014   BC48               LDR      R0,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   00000016   BD49               LDR      R1,??UsbCtrlEp_1+0x8  ;; EpCtrlDataBuf
   \   00000018   0160               STR      R1,[R0, #+0]
   1959              UsbEp0Ctrl.Counter = Ep0MaxSize;
   \   0000001A   BD48               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   0000001C   0821               MOVS     R1,#+8
   \   0000001E   0160               STR      R1,[R0, #+0]
   1960              USB_EpRead(CTRL_ENP_OUT,EpCtrlDataBuf,&UsbEp0Ctrl.Counter);
   \   00000020   BB4A               LDR      R2,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000022   BA49               LDR      R1,??UsbCtrlEp_1+0x8  ;; EpCtrlDataBuf
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   ........           BL       USB_EpRead
   1961          
   1962              // Copy new setup packet int setup buffer
   1963              memcpy((Int8U *)&UsbEp0SetupPacket,EpCtrlDataBuf,sizeof(UsbEp0SetupPacket));
   \   0000002A   0822               MOVS     R2,#+8
   \   0000002C   B749               LDR      R1,??UsbCtrlEp_1+0x8  ;; EpCtrlDataBuf
   \   0000002E   B948               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   00000030   ........           BL       memcpy
   1964              if(UsbEp0Ctrl.Counter != sizeof(UsbSetupPacket_t))
   \   00000034   B648               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   0828               CMP      R0,#+8
   \   0000003A   06D0               BEQ      ??UsbCtrlEp_2
   1965              {
   1966                UsbEp0SetupPacket.mRequestType.Type = UsbTypeReserved;
   \   0000003C   B548               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   6021               MOVS     R1,#+96
   \   00000042   0143               ORRS     R1,R1,R0
   \   00000044   B348               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   00000046   0170               STRB     R1,[R0, #+0]
   \   00000048   07E0               B        ??UsbCtrlEp_3
   1967              }
   1968              else
   1969              {
   1970                // validate OUT/IN EP
   1971                USB_EpValidate(CTRL_ENP_OUT,TRUE);
   \                     ??UsbCtrlEp_2:
   \   0000004A   0121               MOVS     R1,#+1
   \   0000004C   0020               MOVS     R0,#+0
   \   0000004E   ........           BL       USB_EpValidate
   1972                USB_SetStallEP(CTRL_ENP_IN,FALSE);
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0120               MOVS     R0,#+1
   \   00000056   ........           BL       USB_SetStallEP
   1973              }
   1974          
   1975              switch(UsbEp0SetupPacket.mRequestType.Type)
   \                     ??UsbCtrlEp_3:
   \   0000005A   AE48               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   0000005C   0078               LDRB     R0,[R0, #+0]
   \   0000005E   6021               MOVS     R1,#+96
   \   00000060   0140               ANDS     R1,R1,R0
   \   00000062   0800               MOVS     R0,R1
   \   00000064   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000066   000E               LSRS     R0,R0,#+24
   \   00000068   4009               LSRS     R0,R0,#+5
   \   0000006A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000006C   000E               LSRS     R0,R0,#+24
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   05D0               BEQ      ??UsbCtrlEp_4
   \   00000072   401E               SUBS     R0,R0,#+1
   \   00000074   6DD0               BEQ      ??UsbCtrlEp_5
   \   00000076   401E               SUBS     R0,R0,#+1
   \   00000078   00D1               BNE      .+4
   \   0000007A   8EE0               B        ??UsbCtrlEp_6
   \   0000007C   B1E0               B        ??UsbCtrlEp_7
   1976              {
   1977              // Standard
   1978              case UsbTypeStandart:
   1979                // Decoding standard request
   1980                switch (UsbEp0SetupPacket.bRequest)
   \                     ??UsbCtrlEp_4:
   \   0000007E   A648               LDR      R0,??UsbCtrlEp_1+0x14  ;; UsbEp0SetupPacket + 1
   \   00000080   0078               LDRB     R0,[R0, #+0]
   \   00000082   0028               CMP      R0,#+0
   \   00000084   14D0               BEQ      ??UsbCtrlEp_8
   \   00000086   401E               SUBS     R0,R0,#+1
   \   00000088   15D0               BEQ      ??UsbCtrlEp_9
   \   0000008A   801E               SUBS     R0,R0,#+2
   \   0000008C   16D0               BEQ      ??UsbCtrlEp_10
   \   0000008E   801E               SUBS     R0,R0,#+2
   \   00000090   17D0               BEQ      ??UsbCtrlEp_11
   \   00000092   401E               SUBS     R0,R0,#+1
   \   00000094   18D0               BEQ      ??UsbCtrlEp_12
   \   00000096   401E               SUBS     R0,R0,#+1
   \   00000098   45D0               BEQ      ??UsbCtrlEp_13
   \   0000009A   401E               SUBS     R0,R0,#+1
   \   0000009C   46D0               BEQ      ??UsbCtrlEp_14
   \   0000009E   401E               SUBS     R0,R0,#+1
   \   000000A0   47D0               BEQ      ??UsbCtrlEp_15
   \   000000A2   401E               SUBS     R0,R0,#+1
   \   000000A4   48D0               BEQ      ??UsbCtrlEp_16
   \   000000A6   401E               SUBS     R0,R0,#+1
   \   000000A8   49D0               BEQ      ??UsbCtrlEp_17
   \   000000AA   401E               SUBS     R0,R0,#+1
   \   000000AC   4AD0               BEQ      ??UsbCtrlEp_18
   \   000000AE   4CE0               B        ??UsbCtrlEp_19
   1981                {
   1982                case GET_STATUS:
   1983                  UsbGetStatus();
   \                     ??UsbCtrlEp_8:
   \   000000B0   ........           BL       UsbGetStatus
   \   000000B4   98E0               B        ??UsbCtrlEp_0
   1984                  break;
   1985                case CLEAR_FEATURE:
   1986                  UsbClearFeature();
   \                     ??UsbCtrlEp_9:
   \   000000B6   ........           BL       UsbClearFeature
   \   000000BA   95E0               B        ??UsbCtrlEp_0
   1987                  break;
   1988                case SET_FEATURE:
   1989                  UsbSetFeature();
   \                     ??UsbCtrlEp_10:
   \   000000BC   ........           BL       UsbSetFeature
   \   000000C0   92E0               B        ??UsbCtrlEp_0
   1990                  break;
   1991                case SET_ADDRESS:
   1992                  UsbSetAddress();
   \                     ??UsbCtrlEp_11:
   \   000000C2   ........           BL       UsbSetAddress
   \   000000C6   8FE0               B        ??UsbCtrlEp_0
   1993                  break;
   1994                case GET_DESCRIPTOR:
   1995                  if(UsbEp0SetupPacket.mRequestType.Recipient == UsbRecipientDevice)
   \                     ??UsbCtrlEp_12:
   \   000000C8   9248               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   000000CA   0078               LDRB     R0,[R0, #+0]
   \   000000CC   C006               LSLS     R0,R0,#+27
   \   000000CE   02D1               BNE      ??UsbCtrlEp_20
   1996                  {
   1997                    UsbGetDescriptor();
   \   000000D0   ........           BL       UsbGetDescriptor
   \   000000D4   88E0               B        ??UsbCtrlEp_0
   1998                  }
   1999                  // Only get descriptor for device is standard request
   2000                  else if ((UsbEp0SetupPacket.mRequestType.Dir == UsbDevice2Host) &&
   2001                           (UsbUserFun[UsbUserGetDescriptor] != NULL) &&
   2002                           ((Int32U)UsbUserFun[UsbUserGetDescriptor](&UsbEp0Ctrl) == UsbPass))
   \                     ??UsbCtrlEp_20:
   \   000000D6   8F48               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   000000D8   0078               LDRB     R0,[R0, #+0]
   \   000000DA   0006               LSLS     R0,R0,#+24
   \   000000DC   1FD5               BPL      ??UsbCtrlEp_21
   \   000000DE   8F48               LDR      R0,??UsbCtrlEp_1+0x18  ;; UsbUserFun + 148
   \   000000E0   0068               LDR      R0,[R0, #+0]
   \   000000E2   0028               CMP      R0,#+0
   \   000000E4   1BD0               BEQ      ??UsbCtrlEp_21
   \   000000E6   8848               LDR      R0,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   000000E8   8C49               LDR      R1,??UsbCtrlEp_1+0x18  ;; UsbUserFun + 148
   \   000000EA   0968               LDR      R1,[R1, #+0]
   \   000000EC   ........           BL       __iar_via_R1
   \   000000F0   0028               CMP      R0,#+0
   \   000000F2   14D1               BNE      ??UsbCtrlEp_21
   2003                  {
   2004                    if(UsbEp0Ctrl.Counter >= UsbEp0SetupPacket.wLength.Word)
   \   000000F4   8648               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   000000F6   0068               LDR      R0,[R0, #+0]
   \   000000F8   C549               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   000000FA   0988               LDRH     R1,[R1, #+0]
   \   000000FC   8842               CMP      R0,R1
   \   000000FE   07D3               BCC      ??UsbCtrlEp_23
   2005                    {
   2006                      UsbEp0Ctrl.Counter = UsbEp0SetupPacket.wLength.Word;
   \   00000100   8348               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000102   C349               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   00000104   0988               LDRH     R1,[R1, #+0]
   \   00000106   0160               STR      R1,[R0, #+0]
   2007                      UsbEp0Ctrl.EpStatus.NoZeroLength = TRUE;
   \   00000108   C248               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   0000010A   0121               MOVS     R1,#+1
   \   0000010C   0170               STRB     R1,[R0, #+0]
   \   0000010E   02E0               B        ??UsbCtrlEp_24
   2008                    }
   2009                    else
   2010                    {
   2011                      UsbEp0Ctrl.EpStatus.NoZeroLength = FALSE;
   \                     ??UsbCtrlEp_23:
   \   00000110   C048               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   00000112   0021               MOVS     R1,#+0
   \   00000114   0170               STRB     R1,[R0, #+0]
   2012                    }
   2013                    UsbEp0Ctrl.EpStatus.Status = UsbDataPhase;
   \                     ??UsbCtrlEp_24:
   \   00000116   7B48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   00000118   0321               MOVS     R1,#+3
   \   0000011A   0170               STRB     R1,[R0, #+0]
   \   0000011C   64E0               B        ??UsbCtrlEp_0
   2014                  }
   2015                  else
   2016                  {
   2017                    UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_21:
   \   0000011E   7948               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   00000120   0021               MOVS     R1,#+0
   \   00000122   0170               STRB     R1,[R0, #+0]
   \   00000124   60E0               B        ??UsbCtrlEp_0
   2018                  }
   2019                  break;
   2020                case SET_DESCRIPTOR:
   2021                  // Optional (only for configuration and string descriptors)
   2022                  UsbSetDescriptor();
   \                     ??UsbCtrlEp_13:
   \   00000126   ........           BL       UsbSetDescriptor
   \   0000012A   5DE0               B        ??UsbCtrlEp_0
   2023                  break;
   2024                case GET_CONFIGURATION:
   2025                  UsbGetConfiguration();
   \                     ??UsbCtrlEp_14:
   \   0000012C   ........           BL       UsbGetConfiguration
   \   00000130   5AE0               B        ??UsbCtrlEp_0
   2026                  break;
   2027                case SET_CONFIGURATION:
   2028                  UsbSetConfiguration();
   \                     ??UsbCtrlEp_15:
   \   00000132   ........           BL       UsbSetConfiguration
   \   00000136   57E0               B        ??UsbCtrlEp_0
   2029                  break;
   2030                case GET_INTERFACE:
   2031                  UsbGetInterface();
   \                     ??UsbCtrlEp_16:
   \   00000138   ........           BL       UsbGetInterface
   \   0000013C   54E0               B        ??UsbCtrlEp_0
   2032                  break;
   2033                case SET_INTERFACE:
   2034                  UsbSetInterface();
   \                     ??UsbCtrlEp_17:
   \   0000013E   ........           BL       UsbSetInterface
   \   00000142   51E0               B        ??UsbCtrlEp_0
   2035                  break;
   2036                case SYNCH_FRAME:
   2037                  UsbSynchFrame();
   \                     ??UsbCtrlEp_18:
   \   00000144   ........           BL       UsbSynchFrame
   \   00000148   4EE0               B        ??UsbCtrlEp_0
   2038                  break;
   2039                default:
   2040                  UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_19:
   \   0000014A   6E48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   0000014C   0021               MOVS     R1,#+0
   \   0000014E   0170               STRB     R1,[R0, #+0]
   \   00000150   4AE0               B        ??UsbCtrlEp_0
   2041                }
   2042                break;
   2043              // Class
   2044              case UsbTypeClass:
   2045                if(UsbUserFun[UsbUserClass] != NULL &&
   2046                   ((Int32U)UsbUserFun[UsbUserClass](&UsbEp0Ctrl) == UsbPass))
   \                     ??UsbCtrlEp_5:
   \   00000152   B148               LDR      R0,??UsbCtrlEp_22+0x8  ;; UsbUserFun + 140
   \   00000154   0068               LDR      R0,[R0, #+0]
   \   00000156   0028               CMP      R0,#+0
   \   00000158   1BD0               BEQ      ??UsbCtrlEp_25
   \   0000015A   6B48               LDR      R0,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   0000015C   AE49               LDR      R1,??UsbCtrlEp_22+0x8  ;; UsbUserFun + 140
   \   0000015E   0968               LDR      R1,[R1, #+0]
   \   00000160   ........           BL       __iar_via_R1
   \   00000164   0028               CMP      R0,#+0
   \   00000166   14D1               BNE      ??UsbCtrlEp_25
   2047                {
   2048                  if(UsbEp0Ctrl.Counter >= UsbEp0SetupPacket.wLength.Word)
   \   00000168   6948               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   0000016A   0068               LDR      R0,[R0, #+0]
   \   0000016C   A849               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   0000016E   0988               LDRH     R1,[R1, #+0]
   \   00000170   8842               CMP      R0,R1
   \   00000172   07D3               BCC      ??UsbCtrlEp_26
   2049                  {
   2050                    UsbEp0Ctrl.Counter = UsbEp0SetupPacket.wLength.Word;
   \   00000174   6648               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000176   A649               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   00000178   0988               LDRH     R1,[R1, #+0]
   \   0000017A   0160               STR      R1,[R0, #+0]
   2051                    UsbEp0Ctrl.EpStatus.NoZeroLength = TRUE;
   \   0000017C   A548               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   0000017E   0121               MOVS     R1,#+1
   \   00000180   0170               STRB     R1,[R0, #+0]
   \   00000182   02E0               B        ??UsbCtrlEp_27
   2052                  }
   2053                  else
   2054                  {
   2055                    UsbEp0Ctrl.EpStatus.NoZeroLength = FALSE;
   \                     ??UsbCtrlEp_26:
   \   00000184   A348               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   00000186   0021               MOVS     R1,#+0
   \   00000188   0170               STRB     R1,[R0, #+0]
   2056                  }
   2057                  UsbEp0Ctrl.EpStatus.Status = UsbDataPhase;
   \                     ??UsbCtrlEp_27:
   \   0000018A   5E48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   0000018C   0321               MOVS     R1,#+3
   \   0000018E   0170               STRB     R1,[R0, #+0]
   \   00000190   2AE0               B        ??UsbCtrlEp_0
   2058                }
   2059                else
   2060                {
   2061                  UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_25:
   \   00000192   5C48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   00000194   0021               MOVS     R1,#+0
   \   00000196   0170               STRB     R1,[R0, #+0]
   \   00000198   26E0               B        ??UsbCtrlEp_0
   2062                }
   2063                break;
   2064              // Vendor
   2065              case UsbTypeVendor:
   2066                if(UsbUserFun[UsbUserVendor] != NULL &&
   2067                  ((Int32U)UsbUserFun[UsbUserVendor](&UsbEp0Ctrl) == UsbPass))
   \                     ??UsbCtrlEp_6:
   \   0000019A   A048               LDR      R0,??UsbCtrlEp_22+0xC  ;; UsbUserFun + 144
   \   0000019C   0068               LDR      R0,[R0, #+0]
   \   0000019E   0028               CMP      R0,#+0
   \   000001A0   1BD0               BEQ      ??UsbCtrlEp_28
   \   000001A2   5948               LDR      R0,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   000001A4   9D49               LDR      R1,??UsbCtrlEp_22+0xC  ;; UsbUserFun + 144
   \   000001A6   0968               LDR      R1,[R1, #+0]
   \   000001A8   ........           BL       __iar_via_R1
   \   000001AC   0028               CMP      R0,#+0
   \   000001AE   14D1               BNE      ??UsbCtrlEp_28
   2068                {
   2069                  if(UsbEp0Ctrl.Counter >= UsbEp0SetupPacket.wLength.Word)
   \   000001B0   5748               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   000001B2   0068               LDR      R0,[R0, #+0]
   \   000001B4   9649               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   000001B6   0988               LDRH     R1,[R1, #+0]
   \   000001B8   8842               CMP      R0,R1
   \   000001BA   07D3               BCC      ??UsbCtrlEp_29
   2070                  {
   2071                    UsbEp0Ctrl.Counter = UsbEp0SetupPacket.wLength.Word;
   \   000001BC   5448               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   000001BE   9449               LDR      R1,??UsbCtrlEp_22  ;; UsbEp0SetupPacket + 6
   \   000001C0   0988               LDRH     R1,[R1, #+0]
   \   000001C2   0160               STR      R1,[R0, #+0]
   2072                    UsbEp0Ctrl.EpStatus.NoZeroLength = TRUE;
   \   000001C4   9348               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   000001C6   0121               MOVS     R1,#+1
   \   000001C8   0170               STRB     R1,[R0, #+0]
   \   000001CA   02E0               B        ??UsbCtrlEp_30
   2073                  }
   2074                  else
   2075                  {
   2076                    UsbEp0Ctrl.EpStatus.NoZeroLength = FALSE;
   \                     ??UsbCtrlEp_29:
   \   000001CC   9148               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   000001CE   0021               MOVS     R1,#+0
   \   000001D0   0170               STRB     R1,[R0, #+0]
   2077                  }
   2078                  UsbEp0Ctrl.EpStatus.Status = UsbDataPhase;
   \                     ??UsbCtrlEp_30:
   \   000001D2   4C48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000001D4   0321               MOVS     R1,#+3
   \   000001D6   0170               STRB     R1,[R0, #+0]
   \   000001D8   06E0               B        ??UsbCtrlEp_0
   2079                }
   2080                else
   2081                {
   2082                  UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_28:
   \   000001DA   4A48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000001DC   0021               MOVS     R1,#+0
   \   000001DE   0170               STRB     R1,[R0, #+0]
   \   000001E0   02E0               B        ??UsbCtrlEp_0
   2083                }
   2084                break;
   2085              // Other
   2086              default:
   2087                UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_7:
   \   000001E2   4848               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000001E4   0021               MOVS     R1,#+0
   \   000001E6   0170               STRB     R1,[R0, #+0]
   2088              }
   2089            }
   2090          
   2091            switch (UsbEp0Ctrl.EpStatus.Status)
   \                     ??UsbCtrlEp_0:
   \   000001E8   4648               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000001EA   0078               LDRB     R0,[R0, #+0]
   \   000001EC   C01E               SUBS     R0,R0,#+3
   \   000001EE   03D0               BEQ      ??UsbCtrlEp_31
   \   000001F0   401E               SUBS     R0,R0,#+1
   \   000001F2   00D1               BNE      .+4
   \   000001F4   DAE0               B        ??UsbCtrlEp_32
   \   000001F6   FCE0               B        ??UsbCtrlEp_33
   2092            {
   2093            case UsbDataPhase:
   2094              if (UsbEp0SetupPacket.mRequestType.Dir == UsbHost2Device)
   \                     ??UsbCtrlEp_31:
   \   000001F8   4648               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   000001FA   0078               LDRB     R0,[R0, #+0]
   \   000001FC   0006               LSLS     R0,R0,#+24
   \   000001FE   00D5               BPL      .+4
   \   00000200   9DE0               B        ??UsbCtrlEp_34
   2095              {
   2096                if (Packet == UsbDataOutPacket)
   \   00000202   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000204   240E               LSRS     R4,R4,#+24
   \   00000206   012C               CMP      R4,#+1
   \   00000208   00D0               BEQ      .+4
   \   0000020A   89E0               B        ??UsbCtrlEp_35
   2097                {
   2098                  // Data receiving
   2099                  CurrCount = Ep0MaxSize;
   \   0000020C   0820               MOVS     R0,#+8
   \   0000020E   0090               STR      R0,[SP, #+0]
   2100                  USB_EpRead(CTRL_ENP_OUT,UsbEp0Ctrl.pData,&CurrCount);
   \   00000210   6A46               MOV      R2,SP
   \   00000212   3D48               LDR      R0,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   00000214   0168               LDR      R1,[R0, #+0]
   \   00000216   0020               MOVS     R0,#+0
   \   00000218   ........           BL       USB_EpRead
   2101                  UsbEp0Ctrl.pData += CurrCount;
   \   0000021C   0098               LDR      R0,[SP, #+0]
   \   0000021E   3A49               LDR      R1,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   00000220   0968               LDR      R1,[R1, #+0]
   \   00000222   0818               ADDS     R0,R1,R0
   \   00000224   3849               LDR      R1,??UsbCtrlEp_1+0x4  ;; UsbEp0Ctrl
   \   00000226   0860               STR      R0,[R1, #+0]
   2102                  UsbEp0Ctrl.Counter -= CurrCount;
   \   00000228   3948               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   0000022A   0068               LDR      R0,[R0, #+0]
   \   0000022C   0099               LDR      R1,[SP, #+0]
   \   0000022E   401A               SUBS     R0,R0,R1
   \   00000230   3749               LDR      R1,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000232   0860               STR      R0,[R1, #+0]
   2103                  // Receiving of data complete when all data was received or
   2104                  // when host send short packet
   2105                  if ((UsbEp0Ctrl.Counter == 0) ||
   2106                      (CurrCount < Ep0MaxSize))
   \   00000234   3648               LDR      R0,??UsbCtrlEp_1+0xC  ;; UsbEp0Ctrl + 4
   \   00000236   0068               LDR      R0,[R0, #+0]
   \   00000238   0028               CMP      R0,#+0
   \   0000023A   03D0               BEQ      ??UsbCtrlEp_36
   \   0000023C   0098               LDR      R0,[SP, #+0]
   \   0000023E   0828               CMP      R0,#+8
   \   00000240   00D3               BCC      .+4
   \   00000242   E1E0               B        ??UsbCtrlEp_37
   2107                  {
   2108                    // Find appropriate callback function depending of current request
   2109                    // after data was received
   2110                    switch (UsbEp0SetupPacket.mRequestType.Type)
   \                     ??UsbCtrlEp_36:
   \   00000244   3348               LDR      R0,??UsbCtrlEp_1+0x10  ;; UsbEp0SetupPacket
   \   00000246   0078               LDRB     R0,[R0, #+0]
   \   00000248   6021               MOVS     R1,#+96
   \   0000024A   0140               ANDS     R1,R1,R0
   \   0000024C   0800               MOVS     R0,R1
   \   0000024E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000250   000E               LSRS     R0,R0,#+24
   \   00000252   4009               LSRS     R0,R0,#+5
   \   00000254   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000256   000E               LSRS     R0,R0,#+24
   \   00000258   0028               CMP      R0,#+0
   \   0000025A   04D0               BEQ      ??UsbCtrlEp_38
   \   0000025C   401E               SUBS     R0,R0,#+1
   \   0000025E   18D0               BEQ      ??UsbCtrlEp_39
   \   00000260   401E               SUBS     R0,R0,#+1
   \   00000262   29D0               BEQ      ??UsbCtrlEp_40
   \   00000264   3BE0               B        ??UsbCtrlEp_41
   2111                    {
   2112                    case UsbTypeStandart:
   2113                      if ((UsbCoreT9Fun != NULL) &&
   2114                          ((Int32U)UsbCoreT9Fun(NULL) == UsbPass))
   \                     ??UsbCtrlEp_38:
   \   00000266   6E48               LDR      R0,??UsbCtrlEp_22+0x10  ;; UsbCoreT9Fun
   \   00000268   0068               LDR      R0,[R0, #+0]
   \   0000026A   0028               CMP      R0,#+0
   \   0000026C   0AD0               BEQ      ??UsbCtrlEp_42
   \   0000026E   0020               MOVS     R0,#+0
   \   00000270   6B49               LDR      R1,??UsbCtrlEp_22+0x10  ;; UsbCoreT9Fun
   \   00000272   0968               LDR      R1,[R1, #+0]
   \   00000274   ........           BL       __iar_via_R1
   \   00000278   0028               CMP      R0,#+0
   \   0000027A   03D1               BNE      ??UsbCtrlEp_42
   2115                      {
   2116                        UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   0000027C   2148               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   0000027E   0421               MOVS     R1,#+4
   \   00000280   0170               STRB     R1,[R0, #+0]
   \   00000282   02E0               B        ??UsbCtrlEp_43
   2117                      }
   2118                      else
   2119                      {
   2120                      // Stall EP if callback function isn't set, but host
   2121                      // send this type request or when callback function
   2122                      // return an error.
   2123                        UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_42:
   \   00000284   1F48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   00000286   0021               MOVS     R1,#+0
   \   00000288   0170               STRB     R1,[R0, #+0]
   2124                      }
   2125                      UsbCoreT9Fun = NULL;
   \                     ??UsbCtrlEp_43:
   \   0000028A   6548               LDR      R0,??UsbCtrlEp_22+0x10  ;; UsbCoreT9Fun
   \   0000028C   0021               MOVS     R1,#+0
   \   0000028E   0160               STR      R1,[R0, #+0]
   \   00000290   28E0               B        ??UsbCtrlEp_44
   2126                      break;
   2127                    case UsbTypeClass:
   2128                      if ((UsbUserFun[UsbClassEp0OutPacket] != NULL) &&
   2129                          ((Int32U)UsbUserFun[UsbClassEp0OutPacket](NULL) == UsbPass))
   \                     ??UsbCtrlEp_39:
   \   00000292   6448               LDR      R0,??UsbCtrlEp_22+0x14  ;; UsbUserFun + 128
   \   00000294   0068               LDR      R0,[R0, #+0]
   \   00000296   0028               CMP      R0,#+0
   \   00000298   0AD0               BEQ      ??UsbCtrlEp_45
   \   0000029A   0020               MOVS     R0,#+0
   \   0000029C   6149               LDR      R1,??UsbCtrlEp_22+0x14  ;; UsbUserFun + 128
   \   0000029E   0968               LDR      R1,[R1, #+0]
   \   000002A0   ........           BL       __iar_via_R1
   \   000002A4   0028               CMP      R0,#+0
   \   000002A6   03D1               BNE      ??UsbCtrlEp_45
   2130                      {
   2131                        UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   000002A8   1648               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002AA   0421               MOVS     R1,#+4
   \   000002AC   0170               STRB     R1,[R0, #+0]
   \   000002AE   19E0               B        ??UsbCtrlEp_44
   2132                      }
   2133                      else
   2134                      {
   2135                        UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_45:
   \   000002B0   1448               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002B2   0021               MOVS     R1,#+0
   \   000002B4   0170               STRB     R1,[R0, #+0]
   \   000002B6   15E0               B        ??UsbCtrlEp_44
   2136                      }
   2137                      break;
   2138                    case UsbTypeVendor:
   2139                      if ((UsbUserFun[UsbVendorEp0OutPacket] != NULL) &&
   2140                          ((Int32U)UsbUserFun[UsbVendorEp0OutPacket](NULL) == UsbPass))
   \                     ??UsbCtrlEp_40:
   \   000002B8   5B48               LDR      R0,??UsbCtrlEp_22+0x18  ;; UsbUserFun + 132
   \   000002BA   0068               LDR      R0,[R0, #+0]
   \   000002BC   0028               CMP      R0,#+0
   \   000002BE   0AD0               BEQ      ??UsbCtrlEp_46
   \   000002C0   0020               MOVS     R0,#+0
   \   000002C2   5949               LDR      R1,??UsbCtrlEp_22+0x18  ;; UsbUserFun + 132
   \   000002C4   0968               LDR      R1,[R1, #+0]
   \   000002C6   ........           BL       __iar_via_R1
   \   000002CA   0028               CMP      R0,#+0
   \   000002CC   03D1               BNE      ??UsbCtrlEp_46
   2141                      {
   2142                        UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   000002CE   0D48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002D0   0421               MOVS     R1,#+4
   \   000002D2   0170               STRB     R1,[R0, #+0]
   \   000002D4   06E0               B        ??UsbCtrlEp_44
   2143                      }
   2144                      else
   2145                      {
   2146                        UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_46:
   \   000002D6   0B48               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002D8   0021               MOVS     R1,#+0
   \   000002DA   0170               STRB     R1,[R0, #+0]
   \   000002DC   02E0               B        ??UsbCtrlEp_44
   2147                      }
   2148                      break;
   2149                    default:
   2150                      UsbEp0Ctrl.EpStatus.Status = UsbEpStall;
   \                     ??UsbCtrlEp_41:
   \   000002DE   0948               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002E0   0021               MOVS     R1,#+0
   \   000002E2   0170               STRB     R1,[R0, #+0]
   2151                    }
   2152                    if(UsbEp0Ctrl.EpStatus.Status == UsbStatusPhase)
   \                     ??UsbCtrlEp_44:
   \   000002E4   0748               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002E6   0078               LDRB     R0,[R0, #+0]
   \   000002E8   0428               CMP      R0,#+4
   \   000002EA   00D0               BEQ      .+4
   \   000002EC   8CE0               B        ??UsbCtrlEp_37
   2153                    {
   2154                      CurrCount = 0;
   \   000002EE   0020               MOVS     R0,#+0
   \   000002F0   0090               STR      R0,[SP, #+0]
   2155                      USB_EpWrite(CTRL_ENP_IN,NULL,&CurrCount);
   \   000002F2   6A46               MOV      R2,SP
   \   000002F4   0021               MOVS     R1,#+0
   \   000002F6   0120               MOVS     R0,#+1
   \   000002F8   ........           BL       USB_EpWrite
   2156                      UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   000002FC   0148               LDR      R0,??UsbCtrlEp_1  ;; UsbEp0Ctrl + 8
   \   000002FE   0421               MOVS     R1,#+4
   \   00000300   0170               STRB     R1,[R0, #+0]
   \   00000302   81E0               B        ??UsbCtrlEp_37
   \                     ??UsbCtrlEp_1:
   \   00000304   ........           DC32     UsbEp0Ctrl + 8
   \   00000308   ........           DC32     UsbEp0Ctrl
   \   0000030C   ........           DC32     EpCtrlDataBuf
   \   00000310   ........           DC32     UsbEp0Ctrl + 4
   \   00000314   ........           DC32     UsbEp0SetupPacket
   \   00000318   ........           DC32     UsbEp0SetupPacket + 1
   \   0000031C   ........           DC32     UsbUserFun + 148
   2157                    }
   2158                  }
   2159                }
   2160                else if (UsbEp0Ctrl.Counter == 0)
   \                     ??UsbCtrlEp_35:
   \   00000320   4248               LDR      R0,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   00000322   0068               LDR      R0,[R0, #+0]
   \   00000324   0028               CMP      R0,#+0
   \   00000326   6FD1               BNE      ??UsbCtrlEp_37
   2161                {
   2162                  CurrCount = 0;
   \   00000328   0020               MOVS     R0,#+0
   \   0000032A   0090               STR      R0,[SP, #+0]
   2163                  USB_EpWrite(CTRL_ENP_IN,NULL,&CurrCount);
   \   0000032C   6A46               MOV      R2,SP
   \   0000032E   0021               MOVS     R1,#+0
   \   00000330   0120               MOVS     R0,#+1
   \   00000332   ........           BL       USB_EpWrite
   2164                  UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   00000336   3E48               LDR      R0,??UsbCtrlEp_22+0x20  ;; UsbEp0Ctrl + 8
   \   00000338   0421               MOVS     R1,#+4
   \   0000033A   0170               STRB     R1,[R0, #+0]
   \   0000033C   64E0               B        ??UsbCtrlEp_37
   2165                }
   2166              }
   2167              else
   2168              {
   2169                 // Data transmit
   2170                if (Packet == UsbDataOutPacket)
   \                     ??UsbCtrlEp_34:
   \   0000033E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000340   240E               LSRS     R4,R4,#+24
   \   00000342   012C               CMP      R4,#+1
   \   00000344   07D1               BNE      ??UsbCtrlEp_47
   2171                {
   2172                  USB_EpValidate(CTRL_ENP_OUT,TRUE);
   \   00000346   0121               MOVS     R1,#+1
   \   00000348   0020               MOVS     R0,#+0
   \   0000034A   ........           BL       USB_EpValidate
   2173                  UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   0000034E   3848               LDR      R0,??UsbCtrlEp_22+0x20  ;; UsbEp0Ctrl + 8
   \   00000350   0421               MOVS     R1,#+4
   \   00000352   0170               STRB     R1,[R0, #+0]
   2174                  break;
   \   00000354   58E0               B        ??UsbCtrlEp_37
   2175                }
   2176                CurrCount = Ep0MaxSize;
   \                     ??UsbCtrlEp_47:
   \   00000356   0820               MOVS     R0,#+8
   \   00000358   0090               STR      R0,[SP, #+0]
   2177                if ((UsbEp0Ctrl.Counter == 0) && UsbEp0Ctrl.EpStatus.NoZeroLength)
   \   0000035A   3448               LDR      R0,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   0000035C   0068               LDR      R0,[R0, #+0]
   \   0000035E   0028               CMP      R0,#+0
   \   00000360   07D1               BNE      ??UsbCtrlEp_48
   \   00000362   2C48               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   00000364   0078               LDRB     R0,[R0, #+0]
   \   00000366   0028               CMP      R0,#+0
   \   00000368   03D0               BEQ      ??UsbCtrlEp_48
   2178                {
   2179                  UsbEp0Ctrl.EpStatus.Status = UsbStatusPhase;
   \   0000036A   3148               LDR      R0,??UsbCtrlEp_22+0x20  ;; UsbEp0Ctrl + 8
   \   0000036C   0421               MOVS     R1,#+4
   \   0000036E   0170               STRB     R1,[R0, #+0]
   2180                  break;
   \   00000370   4AE0               B        ??UsbCtrlEp_37
   2181                }
   2182                else if(UsbEp0Ctrl.Counter < Ep0MaxSize)
   \                     ??UsbCtrlEp_48:
   \   00000372   2E48               LDR      R0,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   00000374   0068               LDR      R0,[R0, #+0]
   \   00000376   0828               CMP      R0,#+8
   \   00000378   05D2               BCS      ??UsbCtrlEp_49
   2183                {
   2184                  UsbEp0Ctrl.EpStatus.NoZeroLength = TRUE;
   \   0000037A   2648               LDR      R0,??UsbCtrlEp_22+0x4  ;; UsbEp0Ctrl + 9
   \   0000037C   0121               MOVS     R1,#+1
   \   0000037E   0170               STRB     R1,[R0, #+0]
   2185                  CurrCount = UsbEp0Ctrl.Counter;
   \   00000380   2A48               LDR      R0,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   00000382   0068               LDR      R0,[R0, #+0]
   \   00000384   0090               STR      R0,[SP, #+0]
   2186                }
   2187                USB_EpWrite(CTRL_ENP_IN,UsbEp0Ctrl.pData,&CurrCount);
   \                     ??UsbCtrlEp_49:
   \   00000386   6A46               MOV      R2,SP
   \   00000388   2A48               LDR      R0,??UsbCtrlEp_22+0x24  ;; UsbEp0Ctrl
   \   0000038A   0168               LDR      R1,[R0, #+0]
   \   0000038C   0120               MOVS     R0,#+1
   \   0000038E   ........           BL       USB_EpWrite
   2188                UsbEp0Ctrl.Counter -= CurrCount;
   \   00000392   2648               LDR      R0,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   00000394   0068               LDR      R0,[R0, #+0]
   \   00000396   0099               LDR      R1,[SP, #+0]
   \   00000398   401A               SUBS     R0,R0,R1
   \   0000039A   2449               LDR      R1,??UsbCtrlEp_22+0x1C  ;; UsbEp0Ctrl + 4
   \   0000039C   0860               STR      R0,[R1, #+0]
   2189                UsbEp0Ctrl.pData += CurrCount;
   \   0000039E   0098               LDR      R0,[SP, #+0]
   \   000003A0   2449               LDR      R1,??UsbCtrlEp_22+0x24  ;; UsbEp0Ctrl
   \   000003A2   0968               LDR      R1,[R1, #+0]
   \   000003A4   0818               ADDS     R0,R1,R0
   \   000003A6   2349               LDR      R1,??UsbCtrlEp_22+0x24  ;; UsbEp0Ctrl
   \   000003A8   0860               STR      R0,[R1, #+0]
   \   000003AA   2DE0               B        ??UsbCtrlEp_37
   2190              }
   2191              break;
   2192            case UsbStatusPhase:
   2193              if (UsbEp0SetupPacket.bRequest == SET_ADDRESS)
   \                     ??UsbCtrlEp_32:
   \   000003AC   2248               LDR      R0,??UsbCtrlEp_22+0x28  ;; UsbEp0SetupPacket + 1
   \   000003AE   0078               LDRB     R0,[R0, #+0]
   \   000003B0   0528               CMP      R0,#+5
   \   000003B2   12D1               BNE      ??UsbCtrlEp_50
   2194              {
   2195                // Device address is set after status phase of set address request
   2196                UsbDevCtrl.DevAdd = UsbEp0SetupPacket.wValue.Lo;
   \   000003B4   2148               LDR      R0,??UsbCtrlEp_22+0x2C  ;; UsbDevCtrl + 16
   \   000003B6   2249               LDR      R1,??UsbCtrlEp_22+0x30  ;; UsbEp0SetupPacket + 2
   \   000003B8   0978               LDRB     R1,[R1, #+0]
   \   000003BA   0160               STR      R1,[R0, #+0]
   2197                USB_SetAdd(UsbDevCtrl.DevAdd);
   \   000003BC   1F48               LDR      R0,??UsbCtrlEp_22+0x2C  ;; UsbDevCtrl + 16
   \   000003BE   0068               LDR      R0,[R0, #+0]
   \   000003C0   ........           BL       USB_SetAdd
   2198                if(UsbDevCtrl.DevAdd)
   \   000003C4   1D48               LDR      R0,??UsbCtrlEp_22+0x2C  ;; UsbDevCtrl + 16
   \   000003C6   0068               LDR      R0,[R0, #+0]
   \   000003C8   0028               CMP      R0,#+0
   \   000003CA   03D0               BEQ      ??UsbCtrlEp_51
   2199                {
   2200                  UsbSetDevState(UsbDevStatusAddress);
   \   000003CC   0420               MOVS     R0,#+4
   \   000003CE   ........           BL       UsbSetDevState
   \   000003D2   02E0               B        ??UsbCtrlEp_50
   2201                }
   2202                else
   2203                {
   2204                  // when address is 0 put device int configuration state
   2205                  UsbSetDevState(UsbDevStatusDefault);
   \                     ??UsbCtrlEp_51:
   \   000003D4   0320               MOVS     R0,#+3
   \   000003D6   ........           BL       UsbSetDevState
   2206                }
   2207              }
   2208              if (Packet == UsbDataOutPacket)
   \                     ??UsbCtrlEp_50:
   \   000003DA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003DC   240E               LSRS     R4,R4,#+24
   \   000003DE   012C               CMP      R4,#+1
   \   000003E0   03D1               BNE      ??UsbCtrlEp_52
   2209              {
   2210                USB_EpValidate(CTRL_ENP_OUT,TRUE);
   \   000003E2   0121               MOVS     R1,#+1
   \   000003E4   0020               MOVS     R0,#+0
   \   000003E6   ........           BL       USB_EpValidate
   2211              }
   2212              UsbEp0Ctrl.EpStatus.Status = UsbSetupPhase;
   \                     ??UsbCtrlEp_52:
   \   000003EA   1148               LDR      R0,??UsbCtrlEp_22+0x20  ;; UsbEp0Ctrl + 8
   \   000003EC   0221               MOVS     R1,#+2
   \   000003EE   0170               STRB     R1,[R0, #+0]
   \   000003F0   0AE0               B        ??UsbCtrlEp_37
   2213              break;
   2214            default:
   2215              // Error
   2216              USB_SetStallEP(CTRL_ENP_IN,TRUE);
   \                     ??UsbCtrlEp_33:
   \   000003F2   0121               MOVS     R1,#+1
   \   000003F4   0120               MOVS     R0,#+1
   \   000003F6   ........           BL       USB_SetStallEP
   2217              USB_SetStallEP(CTRL_ENP_OUT,TRUE);
   \   000003FA   0121               MOVS     R1,#+1
   \   000003FC   0020               MOVS     R0,#+0
   \   000003FE   ........           BL       USB_SetStallEP
   2218              UsbEp0Ctrl.EpStatus.Status = UsbSetupPhase;
   \   00000402   0B48               LDR      R0,??UsbCtrlEp_22+0x20  ;; UsbEp0Ctrl + 8
   \   00000404   0221               MOVS     R1,#+2
   \   00000406   0170               STRB     R1,[R0, #+0]
   2219            }
   2220          }
   \                     ??UsbCtrlEp_37:
   \   00000408   1CBC               POP      {R2-R4}
   \   0000040A   01BC               POP      {R0}
   \   0000040C   0047               BX       R0               ;; return
   \   0000040E   C046               Nop      
   \                     ??UsbCtrlEp_22:
   \   00000410   ........           DC32     UsbEp0SetupPacket + 6
   \   00000414   ........           DC32     UsbEp0Ctrl + 9
   \   00000418   ........           DC32     UsbUserFun + 140
   \   0000041C   ........           DC32     UsbUserFun + 144
   \   00000420   ........           DC32     UsbCoreT9Fun
   \   00000424   ........           DC32     UsbUserFun + 128
   \   00000428   ........           DC32     UsbUserFun + 132
   \   0000042C   ........           DC32     UsbEp0Ctrl + 4
   \   00000430   ........           DC32     UsbEp0Ctrl + 8
   \   00000434   ........           DC32     UsbEp0Ctrl
   \   00000438   ........           DC32     UsbEp0SetupPacket + 1
   \   0000043C   ........           DC32     UsbDevCtrl + 16
   \   00000440   ........           DC32     UsbEp0SetupPacket + 2

   \                                 In section USB_PACKET_MEMORY, align 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     UsbUserFun

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     UsbDevCtrl + 8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     UsbDevCtrl + 12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     UsbDevCtrl + 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     UsbDevCtrl + 16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     UsbStandardConfigurationDescriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     UsbDevCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     UsbUserFun + 152

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     UsbDevCtrl + 20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     UsbEp0Ctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     UsbEp0Ctrl + 4

   \                                 In section .rodata, align 4
   \                     `?<Constant {0}>`:
   \   00000000   0000               DC16 0
   \   00000002   0000               DC8 0, 0
   2221          

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     EpCtrlClr_CTR_RX                   8
     EpCtrlClr_CTR_TX                   8
     EpCtrlGet_CTR_RX                   8
     EpCtrlGet_CTR_TX                   8
     EpCtrlGet_DTOG_RX                  8
     EpCtrlGet_DTOG_TX                  8
     EpCtrlGet_SETUP                    8
     EpCtrlGet_STAT_RX                  8
     EpCtrlGet_STAT_TX                  8
     EpCtrlSet_DTOG_RX                  8
     EpCtrlSet_DTOG_TX                  8
     EpCtrlSet_EA                       8
     EpCtrlSet_EP_KIND                  8
     EpCtrlSet_EP_TYPE                  8
     EpCtrlSet_STAT_RX                 16
     EpCtrlSet_STAT_TX                 16
     EpCtrlToggle_DTOG_RX               8
     EpCtrlToggle_DTOG_TX               8
     USB_AllocateBuffer                32
     USB_Configure                      0
     USB_ConnectRes                     0
     USB_EpLogToPhysAdd                 8
     USB_EpRead                        48
     USB_EpValidate                    16
     USB_EpWrite                       56
     USB_GetDevStatus                   8
     USB_GetStallEP                    16
     USB_HIGH_ISR                      24
     USB_HwReset                        8
     USB_ISR                           24
     USB_Init                          24
     USB_RealizeEp                     40
     USB_ReleaseBuffer                 16
     USB_Resume                        16
     USB_SetAdd                         0
     USB_SetStallEP                    16
     USB_Suspend                        8
     USB_UserFuncRegistering            8
     UsbClearDevFeature                 8
     UsbClearEpFeature                 16
     UsbClearFeature                    8
     UsbClearInterfaceFeature           0
     UsbCoreReq                         8
     UsbCtrlEp                         16
     UsbDevConnectCallback              8
     UsbDevResetCallback                8
     UsbDevStatus                       8
     UsbDevSuspendCallback              8
     UsbEpStatus                       16
     UsbFindConfiguration               8
     UsbFindInterface                   8
     UsbFree                            0
     UsbGetConfiguration                8
     UsbGetDescriptor                   8
     UsbGetDescriptorConfiguration      8
     UsbGetDescriptorDevice             8
     UsbGetDescriptorString            16
     UsbGetInterface                    8
     UsbGetStatus                       8
     UsbInterfaceStatus                 0
     UsbMalloc                          8
     UsbSetAddress                      8
     UsbSetConfiguration                8
     UsbSetConfigurtonState            40
     UsbSetDescriptor                   8
     UsbSetDevFeature                   8
     UsbSetDevState                     8
     UsbSetDevSuspend                   0
     UsbSetEpFeature                   16
     UsbSetFeature                      8
     UsbSetInterface                   32
     UsbSetInterfaceFeature             0
     UsbSynchFrame                      0
     memcpy                            16


   Section sizes:

     Function/Label                Bytes
     --------------                -----
     memcpy                          26
     USB_PacketMemory              1024
     pPacketMemUse                    4
     PacketMemBuff                  192
     EpInfo                         640
     DlyCnt                           4
     UsbUserFun                     176
     UsbEp0Ctrl                      12
     UsbEp0SetupPacket                8
     EpCtrlDataBuf                    8
     UsbDevCtrl                      24
     UsbCoreT9Fun                     4
     USB_UserFuncRegistering         34
     UsbCoreReq                     136
     UsbSetDevState                 156
     UsbSetDevSuspend                32
     UsbFindInterface                62
     UsbFindConfiguration            44
     UsbSetConfigurtonState         158
     UsbDevStatus                    46
     UsbInterfaceStatus              26
     UsbEpStatus                     76
     UsbGetStatus                   204
     UsbClearDevFeature              48
     UsbClearInterfaceFeature         6
     UsbClearEpFeature               88
     UsbClearFeature                244
     UsbSetDevFeature                48
     UsbSetInterfaceFeature           6
     UsbSetEpFeature                 88
     UsbSetFeature                  244
     UsbSetAddress                  100
     UsbGetDescriptorDevice         100
     UsbGetDescriptorConfiguration  148
     UsbGetDescriptorString         264
     UsbGetDescriptor               160
     UsbSetDescriptor                44
     UsbGetConfiguration            112
     UsbSetConfiguration             92
     UsbGetInterface                128
     UsbSetInterface                168
     UsbSynchFrame                   12
     UsbDevConnectCallback           60
     UsbDevSuspendCallback           60
     UsbDevResetCallback             36
     EpCtrlSet_EA                    40
     EpCtrlSet_STAT_TX              112
     EpCtrlGet_STAT_TX               22
     EpCtrlSet_DTOG_TX               52
     EpCtrlToggle_DTOG_TX            44
     EpCtrlGet_DTOG_TX               28
     EpCtrlClr_CTR_TX                36
     EpCtrlGet_CTR_TX                28
     EpCtrlSet_EP_KIND               52
     EpCtrlSet_EP_TYPE               48
     EpCtrlGet_SETUP                 28
     EpCtrlSet_STAT_RX              112
     EpCtrlGet_STAT_RX               22
     EpCtrlSet_DTOG_RX               52
     EpCtrlToggle_DTOG_RX            44
     EpCtrlGet_DTOG_RX               30
     EpCtrlClr_CTR_RX                36
     EpCtrlGet_CTR_RX                30
     USB_Init                       180
     USB_HwReset                    256
     UsbMalloc                       52
     UsbFree                          6
     USB_AllocateBuffer             200
     USB_ReleaseBuffer               60
     USB_RealizeEp                 1504
     USB_SetAdd                      16
     USB_ConnectRes                   2
     USB_Configure                    2
     USB_Suspend                     44
     USB_Resume                     264
     USB_GetDevStatus                72
     USB_SetStallEP                 292
     USB_GetStallEP                 100
     USB_EpValidate                 168
     USB_EpWrite                   2896
     USB_EpRead                    2604
     USB_EpLogToPhysAdd              28
     USB_HIGH_ISR                   360
     USB_ISR                        384
     UsbCtrlEp                     1092
     ??DataTable1                     4
     ??DataTable21                    4
     ??DataTable22                    4
     ??DataTable23                    4
     ??DataTable24                    4
     ??DataTable27                    4
     ??DataTable30                    4
     ??DataTable31                    4
     ??DataTable34                    4
     ??DataTable35                    4
     ??DataTable36                    4
     ?<Constant {0}>                  4
      Others                          4

 
  1 072 bytes in section .bss
      4 bytes in section .rodata
 14 702 bytes in section .text
  1 024 bytes in section USB_PACKET_MEMORY
 
 14 484 bytes of CODE  memory (+ 218 bytes shared)
      4 bytes of CONST memory
  2 096 bytes of DATA  memory

Errors: none
Warnings: none
