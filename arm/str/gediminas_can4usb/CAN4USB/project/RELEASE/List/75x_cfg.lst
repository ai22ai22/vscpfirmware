###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.12.0.50667/W32         18/Apr/2008  14:00:18 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Program\IAR Systems\Embedded Workbench                #
#                    5.0\ARM\examples\ST\STR75x\STR75xLibrary\library\src\75x #
#                    _cfg.c                                                   #
#    Command line =  "D:\Program\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\examples\ST\STR75x\STR75xLibrary\library\src\75x #
#                    _cfg.c" -lC D:\development\gediminas\CAN4USB\project\REL #
#                    EASE\List\ -lA D:\development\gediminas\CAN4USB\project\ #
#                    RELEASE\List\ -o D:\development\gediminas\CAN4USB\projec #
#                    t\RELEASE\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian little --cpu            #
#                    ARM7TDMI-S -e --fpu None --dlib_config "D:\Program\IAR   #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I D:\development\gediminas\CAN4USB\project\ -I     #
#                    D:\development\gediminas\CAN4USB\project\app\ -I         #
#                    D:\development\gediminas\CAN4USB\project\board\ -I       #
#                    D:\development\gediminas\CAN4USB\project\module\ -I      #
#                    D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\inc\ -I j:\common\ -I "D:\Program\IAR             #
#                    Systems\Embedded Workbench 5.0\ARM\INC\" --interwork     #
#                    --cpu_mode thumb -On                                     #
#    List file    =  D:\development\gediminas\CAN4USB\project\RELEASE\List\75 #
#                    x_cfg.lst                                                #
#    Object file  =  D:\development\gediminas\CAN4USB\project\RELEASE\Obj\75x #
#                    _cfg.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Program\IAR Systems\Embedded Workbench 5.0\ARM\examples\ST\STR75x\STR75xLibrary\library\src\75x_cfg.c
      1          /******************** (C) COPYRIGHT 2006 STMicroelectronics ********************
      2          * File Name          : 75x_cfg.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 03/10/2006
      5          * Description        : This file provides all the CFG software functions.
      6          ********************************************************************************
      7          * History:
      8          * 07/17/2006 : V1.0
      9          * 03/10/2006 : V0.1
     10          ********************************************************************************
     11          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     13          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     14          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     15          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     16          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *******************************************************************************/
     18          
     19          /* Includes ------------------------------------------------------------------*/
     20          #include "75x_cfg.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          #define CFG_SWBOOT_Mask	      0xFFFFFFFC
     25          #define CFG_FLASHBusy_Mask    0x00000080
     26          
     27          /* Private macro -------------------------------------------------------------*/
     28          /* Private variables ---------------------------------------------------------*/
     29          /* Private function prototypes -----------------------------------------------*/
     30          /* Private functions ---------------------------------------------------------*/
     31          
     32          /*******************************************************************************
     33          * Function Name  : CFG_BootSpaceConfig
     34          * Description    : Selects which memory space will be remapped at address 0x00.
     35          * Input          : - CFG_BootSpace: specifies the memory space to be remapped
     36          *                    at address 0x00.
     37          *                    This parameter can be one of the following values:
     38          *                          - CFG_BootSpace_FLASH
     39          *                          - CFG_BootSpace_SRAM
     40          *                          - CFG_BootSpace_ExtSMI
     41          * Output         : None
     42          * Return         : None
     43          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     44          void CFG_BootSpaceConfig(u32 CFG_BootSpace)
     45          {
     46            u32 Temp = 0;
   \                     CFG_BootSpaceConfig:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   1100               MOVS     R1,R2
     47            
     48            /* Clear SW_BOOT[1:0] bits */ 
     49            Temp = CFG->GLCONF & CFG_SWBOOT_Mask;
   \   00000004   ....               LDR      R2,??DataTable10  ;; 0x60000010
   \   00000006   1268               LDR      R2,[R2, #+0]
   \   00000008   0323               MOVS     R3,#+3
   \   0000000A   9A43               BICS     R2,R2,R3
   \   0000000C   1100               MOVS     R1,R2
     50            
     51            /* Set SW_BOOT[1:0] bits according to CFG_BootSpace parameter value */ 
     52            Temp |= CFG_BootSpace;
   \   0000000E   0143               ORRS     R1,R1,R0
     53            
     54            /* Store the new value */ 
     55            CFG->GLCONF = Temp;   
   \   00000010   ....               LDR      R2,??DataTable10  ;; 0x60000010
   \   00000012   1160               STR      R1,[R2, #+0]
     56          }
   \   00000014   7047               BX       LR               ;; return
     57          
     58          /*******************************************************************************
     59          * Function Name  : CFG_FLASHBurstConfig
     60          * Description    : Enables or disables the FLASH Burst mode.
     61          * Input          : - CCFG_FLASHBurst: specifies the new state of the FLASH Burst
     62          *                    mode.
     63          *                    This parameter can be one of the following values:
     64          *                          - CFG_FLASHBurst_Disable
     65          *                          - CFG_FLASHBurst_Enable
     66          * Output         : None
     67          * Return         : None
     68          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     69          void CFG_FLASHBurstConfig(u32 CFG_FLASHBurst)
     70          {
   \                     CFG_FLASHBurstConfig:
   \   00000000   01B5               PUSH     {R0,LR}
     71            if(CFG_FLASHBurst == CFG_FLASHBurst_Enable)
   \   00000002   8021               MOVS     R1,#+128
   \   00000004   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000006   8842               CMP      R0,R1
   \   00000008   07D1               BNE      ??CFG_FLASHBurstConfig_0
     72            {
     73              CFG->GLCONF |= CFG_FLASHBurst_Enable;
   \   0000000A   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   0000000C   0968               LDR      R1,[R1, #+0]
   \   0000000E   8022               MOVS     R2,#+128
   \   00000010   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000012   0A43               ORRS     R2,R2,R1
   \   00000014   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   00000016   0A60               STR      R2,[R1, #+0]
   \   00000018   05E0               B        ??CFG_FLASHBurstConfig_1
     74            }
     75            else
     76            {
     77              CFG->GLCONF &= CFG_FLASHBurst_Disable;
   \                     ??CFG_FLASHBurstConfig_0:
   \   0000001A   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   0000001C   0968               LDR      R1,[R1, #+0]
   \   0000001E   034A               LDR      R2,??CFG_FLASHBurstConfig_2  ;; 0xfffffeff
   \   00000020   0A40               ANDS     R2,R2,R1
   \   00000022   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   00000024   0A60               STR      R2,[R1, #+0]
     78            }
     79          }
   \                     ??CFG_FLASHBurstConfig_1:
   \   00000026   08BC               POP      {R3}
   \   00000028   01BC               POP      {R0}
   \   0000002A   0047               BX       R0               ;; return
   \                     ??CFG_FLASHBurstConfig_2:
   \   0000002C   FFFEFFFF           DC32     0xfffffeff
     80          
     81          /*******************************************************************************
     82          * Function Name  : CFG_USBFilterConfig
     83          * Description    : Enables or disables the USB Filter.
     84          * Input          : - CFG_USBFilter: specifies the new state of the USB Filter.
     85          *                    This parameter can be one of the following values:
     86          *                          - CFG_USBFilter_Disable
     87          *                          - CFG_USBFilter_Enable
     88          * Output         : None
     89          * Return         : None
     90          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     91          void CFG_USBFilterConfig(u32 CFG_USBFilter)
     92          {
   \                     CFG_USBFilterConfig:
   \   00000000   01B5               PUSH     {R0,LR}
     93            if(CFG_USBFilter == CFG_USBFilter_Enable)
   \   00000002   8021               MOVS     R1,#+128
   \   00000004   8900               LSLS     R1,R1,#+2        ;; #+512
   \   00000006   8842               CMP      R0,R1
   \   00000008   07D1               BNE      ??CFG_USBFilterConfig_0
     94            {
     95              CFG->GLCONF |= CFG_USBFilter_Enable;
   \   0000000A   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   0000000C   0968               LDR      R1,[R1, #+0]
   \   0000000E   8022               MOVS     R2,#+128
   \   00000010   9200               LSLS     R2,R2,#+2        ;; #+512
   \   00000012   0A43               ORRS     R2,R2,R1
   \   00000014   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   00000016   0A60               STR      R2,[R1, #+0]
   \   00000018   05E0               B        ??CFG_USBFilterConfig_1
     96            }
     97            else
     98            {
     99              CFG->GLCONF &= CFG_USBFilter_Disable;
   \                     ??CFG_USBFilterConfig_0:
   \   0000001A   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   0000001C   0968               LDR      R1,[R1, #+0]
   \   0000001E   034A               LDR      R2,??CFG_USBFilterConfig_2  ;; 0xfffffdff
   \   00000020   0A40               ANDS     R2,R2,R1
   \   00000022   ....               LDR      R1,??DataTable10  ;; 0x60000010
   \   00000024   0A60               STR      R2,[R1, #+0]
    100            }
    101          }
   \                     ??CFG_USBFilterConfig_1:
   \   00000026   08BC               POP      {R3}
   \   00000028   01BC               POP      {R0}
   \   0000002A   0047               BX       R0               ;; return
   \                     ??CFG_USBFilterConfig_2:
   \   0000002C   FFFDFFFF           DC32     0xfffffdff
    102          
    103          /*******************************************************************************
    104          * Function Name  : CFG_GetFlagStatus
    105          * Description    : Checks whether the FLASH Busy flag is set or not.
    106          * Input          : None
    107          * Output         : None
    108          * Return         : The new state of FLASH Busy flag (SET or RESET).
    109          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    110          FlagStatus CFG_GetFlagStatus(void)
    111          {
    112            if((CFG->GLCONF & CFG_FLASHBusy_Mask) != RESET)
   \                     CFG_GetFlagStatus:
   \   00000000   ....               LDR      R0,??DataTable10  ;; 0x60000010
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   8021               MOVS     R1,#+128
   \   00000006   0140               ANDS     R1,R1,R0
   \   00000008   481E               SUBS     R0,R1,#+1
   \   0000000A   8041               SBCS     R0,R0,R0
   \   0000000C   C043               MVNS     R0,R0
   \   0000000E   C00F               LSRS     R0,R0,#+31
   \   00000010   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000012   000E               LSRS     R0,R0,#+24
    113            {
    114              return SET;
    115            }
    116            else
    117            {
    118              return RESET;
   \   00000014   7047               BX       LR               ;; return
    119            }
    120          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   10000060           DC32     0x60000010
    121          
    122          /******************* (C) COPYRIGHT 2006 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     CFG_BootSpaceConfig       0
     CFG_FLASHBurstConfig      8
     CFG_GetFlagStatus         0
     CFG_USBFilterConfig       8


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     CFG_BootSpaceConfig    22
     CFG_FLASHBurstConfig   48
     CFG_USBFilterConfig    48
     CFG_GetFlagStatus      22
     ??DataTable10           4

 
 144 bytes in section .text
 
 144 bytes of CODE memory

Errors: none
Warnings: none
