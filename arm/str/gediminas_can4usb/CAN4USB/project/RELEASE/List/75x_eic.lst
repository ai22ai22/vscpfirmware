###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.12.0.50667/W32         18/Apr/2008  14:00:18 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\src\75x_eic.c                                     #
#    Command line =  D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\src\75x_eic.c -lC D:\development\gediminas\CAN4US #
#                    B\project\RELEASE\List\ -lA                              #
#                    D:\development\gediminas\CAN4USB\project\RELEASE\List\   #
#                    -o D:\development\gediminas\CAN4USB\project\RELEASE\Obj\ #
#                     --no_cse --no_unroll --no_inline --no_code_motion       #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian little --cpu ARM7TDMI-S -e --fpu None           #
#                    --dlib_config "D:\Program\IAR Systems\Embedded           #
#                    Workbench 5.0\ARM\INC\DLib_Config_Normal.h" -I           #
#                    D:\development\gediminas\CAN4USB\project\ -I             #
#                    D:\development\gediminas\CAN4USB\project\app\ -I         #
#                    D:\development\gediminas\CAN4USB\project\board\ -I       #
#                    D:\development\gediminas\CAN4USB\project\module\ -I      #
#                    D:\development\gediminas\CAN4USB\project\STR75xLibrary\l #
#                    ibrary\inc\ -I j:\common\ -I "D:\Program\IAR             #
#                    Systems\Embedded Workbench 5.0\ARM\INC\" --interwork     #
#                    --cpu_mode thumb -On                                     #
#    List file    =  D:\development\gediminas\CAN4USB\project\RELEASE\List\75 #
#                    x_eic.lst                                                #
#    Object file  =  D:\development\gediminas\CAN4USB\project\RELEASE\Obj\75x #
#                    _eic.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\development\gediminas\CAN4USB\project\STR75xLibrary\library\src\75x_eic.c
      1          /******************** (C) COPYRIGHT 2006 STMicroelectronics ********************
      2          * File Name          : 75x_eic.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 03/10/2006
      5          * Description        : This file provides all the EIC software functions.
      6          ********************************************************************************
      7          * History:
      8          * 07/17/2006 : V1.0
      9          * 03/10/2006 : V0.1
     10          ********************************************************************************
     11          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     13          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     14          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     15          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     16          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *******************************************************************************/
     18          
     19          /* Includes ------------------------------------------------------------------*/
     20          #include "75x_eic.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          #define EIC_IRQEnable_Mask     0x00000001
     25          #define EIC_IRQDisable_Mask    0xFFFFFFFE
     26          
     27          #define EIC_FIQEnable_Mask     0x00000002
     28          #define EIC_FIQDisable_Mask    0xFFFFFFFD
     29          
     30          #define EIC_SIPL_Mask          0x0000000F
     31          #define EIC_SIPL_Reset_Mask    0xFFFFFFF0
     32          
     33          /* Private macro -------------------------------------------------------------*/
     34          /* Private variables ---------------------------------------------------------*/
     35          /* Private function prototypes -----------------------------------------------*/
     36          /* Private functions ---------------------------------------------------------*/
     37          
     38          /*******************************************************************************
     39          * Function Name  : EIC_DeInit
     40          * Description    : Deinitializes the EIC peripheral registers to their default
     41          *                  reset values.
     42          * Input          : None
     43          * Output         : None
     44          * Return         : None
     45          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     46          void EIC_DeInit(void)
     47          {
     48            EIC->ICR = 0x00;
   \                     EIC_DeInit:
   \   00000000   ....               LDR      R0,??DataTable20  ;; 0xfffff800
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0160               STR      R1,[R0, #+0]
     49            EIC->CIPR = 0x00;
   \   00000006   ....               LDR      R0,??DataTable18  ;; 0xfffff808
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   0160               STR      R1,[R0, #+0]
     50            EIC->FIR = 0x0C;
   \   0000000C   0548               LDR      R0,??EIC_DeInit_0  ;; 0xfffff81c
   \   0000000E   0C21               MOVS     R1,#+12
   \   00000010   0160               STR      R1,[R0, #+0]
     51            EIC->IER = 0x00;
   \   00000012   ....               LDR      R0,??DataTable6  ;; 0xfffff820
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   0160               STR      R1,[R0, #+0]
     52            EIC->IPR = 0xFFFFFFFF;
   \   00000018   0348               LDR      R0,??EIC_DeInit_0+0x4  ;; 0xfffff840
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   C943               MVNS     R1,R1            ;; #-1
   \   0000001E   0160               STR      R1,[R0, #+0]
     53          }
   \   00000020   7047               BX       LR               ;; return
   \   00000022   C046               Nop      
   \                     ??EIC_DeInit_0:
   \   00000024   1CF8FFFF           DC32     0xfffff81c
   \   00000028   40F8FFFF           DC32     0xfffff840
     54          
     55          /*******************************************************************************
     56          * Function Name  : EIC_IRQInit
     57          * Description    : Configures the IRQ channels according to the specified
     58          *                  parameters in the EIC_IRQInitStruct.
     59          * Input          : EIC_IRQInitStruct: pointer to a EIC_IRQInitTypeDef structure.
     60          * Output         : None
     61          * Return         : None
     62          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     63          void EIC_IRQInit(EIC_IRQInitTypeDef* EIC_IRQInitStruct)
     64          {
   \                     EIC_IRQInit:
   \   00000000   10B5               PUSH     {R4,LR}
     65            u32 Tmp = 0;
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   1100               MOVS     R1,R2
     66          
     67            if(EIC_IRQInitStruct->EIC_IRQChannelCmd == ENABLE)
   \   00000006   8278               LDRB     R2,[R0, #+2]
   \   00000008   012A               CMP      R2,#+1
   \   0000000A   23D1               BNE      ??EIC_IRQInit_0
     68            {
     69              /* Enable the selected IRQ channel */
     70              EIC->IER |= 1 << EIC_IRQInitStruct->EIC_IRQChannel;
   \   0000000C   ....               LDR      R2,??DataTable6  ;; 0xfffff820
   \   0000000E   1268               LDR      R2,[R2, #+0]
   \   00000010   0123               MOVS     R3,#+1
   \   00000012   0478               LDRB     R4,[R0, #+0]
   \   00000014   A340               LSLS     R3,R3,R4
   \   00000016   1343               ORRS     R3,R3,R2
   \   00000018   ....               LDR      R2,??DataTable6  ;; 0xfffff820
   \   0000001A   1360               STR      R3,[R2, #+0]
     71          
     72              /* Configure the selected IRQ channel priority ***************************/
     73              /* Clear SIPL[3:0] bits */
     74              EIC->SIRn[EIC_IRQInitStruct->EIC_IRQChannel] &= EIC_SIPL_Reset_Mask;
   \   0000001C   0278               LDRB     R2,[R0, #+0]
   \   0000001E   0423               MOVS     R3,#+4
   \   00000020   5A43               MULS     R2,R3,R2
   \   00000022   124B               LDR      R3,??EIC_IRQInit_1  ;; 0xfffff860
   \   00000024   9A58               LDR      R2,[R3, R2]
   \   00000026   0F23               MOVS     R3,#+15
   \   00000028   9A43               BICS     R2,R2,R3
   \   0000002A   0378               LDRB     R3,[R0, #+0]
   \   0000002C   0424               MOVS     R4,#+4
   \   0000002E   6343               MULS     R3,R4,R3
   \   00000030   0E4C               LDR      R4,??EIC_IRQInit_1  ;; 0xfffff860
   \   00000032   E250               STR      R2,[R4, R3]
     75          
     76              /* Configure SIPL[3:0] bits according to EIC_IRQChannelPriority parameter */
     77              Tmp = EIC_IRQInitStruct->EIC_IRQChannelPriority & EIC_SIPL_Mask;
   \   00000034   4278               LDRB     R2,[R0, #+1]
   \   00000036   1207               LSLS     R2,R2,#+28       ;; ZeroExtS R2,R2,#+28,#+28
   \   00000038   120F               LSRS     R2,R2,#+28
   \   0000003A   1100               MOVS     R1,R2
     78              EIC->SIRn[EIC_IRQInitStruct->EIC_IRQChannel] |= Tmp;
   \   0000003C   0278               LDRB     R2,[R0, #+0]
   \   0000003E   0423               MOVS     R3,#+4
   \   00000040   5A43               MULS     R2,R3,R2
   \   00000042   0A4B               LDR      R3,??EIC_IRQInit_1  ;; 0xfffff860
   \   00000044   9A58               LDR      R2,[R3, R2]
   \   00000046   0A43               ORRS     R2,R2,R1
   \   00000048   0378               LDRB     R3,[R0, #+0]
   \   0000004A   0424               MOVS     R4,#+4
   \   0000004C   6343               MULS     R3,R4,R3
   \   0000004E   074C               LDR      R4,??EIC_IRQInit_1  ;; 0xfffff860
   \   00000050   E250               STR      R2,[R4, R3]
   \   00000052   07E0               B        ??EIC_IRQInit_2
     79            }
     80            else
     81            {
     82              /* Disable the select IRQ channel */
     83              EIC->IER &=~ (1 << EIC_IRQInitStruct->EIC_IRQChannel);
   \                     ??EIC_IRQInit_0:
   \   00000054   ....               LDR      R2,??DataTable6  ;; 0xfffff820
   \   00000056   1268               LDR      R2,[R2, #+0]
   \   00000058   0123               MOVS     R3,#+1
   \   0000005A   0478               LDRB     R4,[R0, #+0]
   \   0000005C   A340               LSLS     R3,R3,R4
   \   0000005E   9A43               BICS     R2,R2,R3
   \   00000060   ....               LDR      R3,??DataTable6  ;; 0xfffff820
   \   00000062   1A60               STR      R2,[R3, #+0]
     84            }
     85          }
   \                     ??EIC_IRQInit_2:
   \   00000064   10BC               POP      {R4}
   \   00000066   01BC               POP      {R0}
   \   00000068   0047               BX       R0               ;; return
   \   0000006A   C046               Nop      
   \                     ??EIC_IRQInit_1:
   \   0000006C   60F8FFFF           DC32     0xfffff860
     86          
     87          /*******************************************************************************
     88          * Function Name  : EIC_FIQInit
     89          * Description    : Configures the FIQ channels according to the specified
     90          *                  parameters in the EIC_FIQInitStruct.
     91          * Input          : EIC_FIQInitStruct: pointer to a EIC_FIQInitTypeDef structure.
     92          * Output         : None
     93          * Return         : None
     94          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     95          void EIC_FIQInit(EIC_FIQInitTypeDef* EIC_FIQInitStruct)
     96          {
   \                     EIC_FIQInit:
   \   00000000   01B5               PUSH     {R0,LR}
     97            if(EIC_FIQInitStruct->EIC_FIQChannelCmd == ENABLE)
   \   00000002   4178               LDRB     R1,[R0, #+1]
   \   00000004   0129               CMP      R1,#+1
   \   00000006   06D1               BNE      ??EIC_FIQInit_0
     98            {
     99              /* Enable the selected FIQ channel */
    100              EIC->FIER |= EIC_FIQInitStruct->EIC_FIQChannel ;
   \   00000008   0749               LDR      R1,??EIC_FIQInit_1  ;; 0xfffff810
   \   0000000A   0968               LDR      R1,[R1, #+0]
   \   0000000C   0278               LDRB     R2,[R0, #+0]
   \   0000000E   0A43               ORRS     R2,R2,R1
   \   00000010   0549               LDR      R1,??EIC_FIQInit_1  ;; 0xfffff810
   \   00000012   0A60               STR      R2,[R1, #+0]
   \   00000014   05E0               B        ??EIC_FIQInit_2
    101            }
    102            else
    103            {
    104              /* Disable the selected FIQ channel */
    105              EIC->FIER &= ~EIC_FIQInitStruct->EIC_FIQChannel;
   \                     ??EIC_FIQInit_0:
   \   00000016   0449               LDR      R1,??EIC_FIQInit_1  ;; 0xfffff810
   \   00000018   0968               LDR      R1,[R1, #+0]
   \   0000001A   0278               LDRB     R2,[R0, #+0]
   \   0000001C   9143               BICS     R1,R1,R2
   \   0000001E   024A               LDR      R2,??EIC_FIQInit_1  ;; 0xfffff810
   \   00000020   1160               STR      R1,[R2, #+0]
    106            }
    107          }
   \                     ??EIC_FIQInit_2:
   \   00000022   08BC               POP      {R3}
   \   00000024   01BC               POP      {R0}
   \   00000026   0047               BX       R0               ;; return
   \                     ??EIC_FIQInit_1:
   \   00000028   10F8FFFF           DC32     0xfffff810
    108          
    109          /*******************************************************************************
    110          * Function Name  : EIC_IRQStructInit
    111          * Description    : Fills each EIC_IRQInitStruct member with its default value.
    112          * Input          : EIC_IRQInitStruct: pointer to a EIC_IRQInitTypeDef structure
    113          *                  which will be initialized.
    114          * Output         : None
    115          * Return         : None
    116          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    117          void EIC_IRQStructInit(EIC_IRQInitTypeDef* EIC_IRQInitStruct)
    118          {
    119            EIC_IRQInitStruct->EIC_IRQChannel = 0x1F;
   \                     EIC_IRQStructInit:
   \   00000000   1F21               MOVS     R1,#+31
   \   00000002   0170               STRB     R1,[R0, #+0]
    120            EIC_IRQInitStruct->EIC_IRQChannelPriority = 0;
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   4170               STRB     R1,[R0, #+1]
    121            EIC_IRQInitStruct->EIC_IRQChannelCmd = DISABLE;
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   8170               STRB     R1,[R0, #+2]
    122          }
   \   0000000C   7047               BX       LR               ;; return
    123          
    124          /*******************************************************************************
    125          * Function Name  : EIC_FIQStructInit
    126          * Description    : Fills each EIC_FIQInitStruct member with its default value.
    127          * Input          : EIC_FIQInitStruct: pointer to a EIC_FIQInitTypeDef structure
    128          *                  which will be initialized.
    129          * Output         : None
    130          * Return         : None
    131          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    132          void EIC_FIQStructInit(EIC_FIQInitTypeDef* EIC_FIQInitStruct)
    133          {
    134            EIC_FIQInitStruct->EIC_FIQChannel = 0x03;
   \                     EIC_FIQStructInit:
   \   00000000   0321               MOVS     R1,#+3
   \   00000002   0170               STRB     R1,[R0, #+0]
    135            EIC_FIQInitStruct->EIC_FIQChannelCmd = DISABLE;
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   4170               STRB     R1,[R0, #+1]
    136          }
   \   00000008   7047               BX       LR               ;; return
    137          
    138          /*******************************************************************************
    139          * Function Name  : EIC_IRQCmd
    140          * Description    : Enables or disables EIC IRQ output request to CPU.
    141          * Input          : NewState: new state of the EIC IRQ output request to CPU.
    142          *                  This parameter can be: ENABLE or DISABLE.
    143          * Output         : None
    144          * Return         : None
    145          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    146          void EIC_IRQCmd(FunctionalState NewState)
    147          {
   \                     EIC_IRQCmd:
   \   00000000   01B5               PUSH     {R0,LR}
    148            if(NewState == ENABLE)
   \   00000002   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000004   000E               LSRS     R0,R0,#+24
   \   00000006   0128               CMP      R0,#+1
   \   00000008   06D1               BNE      ??EIC_IRQCmd_0
    149            {
    150              /* Enable EIC IRQ output request to CPU */
    151              EIC->ICR |= EIC_IRQEnable_Mask;
   \   0000000A   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   0000000C   0968               LDR      R1,[R1, #+0]
   \   0000000E   0122               MOVS     R2,#+1
   \   00000010   0A43               ORRS     R2,R2,R1
   \   00000012   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   00000014   0A60               STR      R2,[R1, #+0]
   \   00000016   05E0               B        ??EIC_IRQCmd_1
    152            }
    153            else
    154            {
    155              /* Disable EIC IRQ output request to CPU */
    156              EIC->ICR &= EIC_IRQDisable_Mask;
   \                     ??EIC_IRQCmd_0:
   \   00000018   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   0000001A   0968               LDR      R1,[R1, #+0]
   \   0000001C   0122               MOVS     R2,#+1
   \   0000001E   9143               BICS     R1,R1,R2
   \   00000020   ....               LDR      R2,??DataTable20  ;; 0xfffff800
   \   00000022   1160               STR      R1,[R2, #+0]
    157            }
    158          }
   \                     ??EIC_IRQCmd_1:
   \   00000024   08BC               POP      {R3}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
    159          
    160          /*******************************************************************************
    161          * Function Name  : EIC_FIQCmd
    162          * Description    : Enables or disables EIC FIQ output request to CPU.
    163          * Input          : NewState: new state of the EIC FIQ output request to CPU.
    164          *                  This parameter can be: ENABLE or DISABLE.
    165          * Output         : None
    166          * Return         : None
    167          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    168          void EIC_FIQCmd(FunctionalState NewState)
    169          {
   \                     EIC_FIQCmd:
   \   00000000   01B5               PUSH     {R0,LR}
    170            if(NewState == ENABLE)
   \   00000002   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000004   000E               LSRS     R0,R0,#+24
   \   00000006   0128               CMP      R0,#+1
   \   00000008   06D1               BNE      ??EIC_FIQCmd_0
    171            {
    172              /* Enable EIC FIQ output request to CPU */
    173              EIC->ICR |= EIC_FIQEnable_Mask;
   \   0000000A   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   0000000C   0968               LDR      R1,[R1, #+0]
   \   0000000E   0222               MOVS     R2,#+2
   \   00000010   0A43               ORRS     R2,R2,R1
   \   00000012   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   00000014   0A60               STR      R2,[R1, #+0]
   \   00000016   05E0               B        ??EIC_FIQCmd_1
    174            }
    175            else
    176            {
    177              /* Disable EIC FIQ output request to CPU */
    178              EIC->ICR &= EIC_FIQDisable_Mask;
   \                     ??EIC_FIQCmd_0:
   \   00000018   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   0000001A   0968               LDR      R1,[R1, #+0]
   \   0000001C   0222               MOVS     R2,#+2
   \   0000001E   9143               BICS     R1,R1,R2
   \   00000020   ....               LDR      R2,??DataTable20  ;; 0xfffff800
   \   00000022   1160               STR      R1,[R2, #+0]
    179            }
    180          }
   \                     ??EIC_FIQCmd_1:
   \   00000024   08BC               POP      {R3}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
    181          
    182          /*******************************************************************************
    183          * Function Name  : EIC_GetCurrentIRQChannel
    184          * Description    : Returns the current served IRQ channel identifier.
    185          * Input          : None
    186          * Output         : None
    187          * Return         : The current served IRQ channel.
    188          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    189          u8 EIC_GetCurrentIRQChannel(void)
    190          {
    191            /* Read and return the CIC[4:0] bits of CICR register */
    192            return ((u8) (EIC->CICR));
   \                     EIC_GetCurrentIRQChannel:
   \   00000000   0248               LDR      R0,??EIC_GetCurrentIRQChannel_0  ;; 0xfffff804
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000006   000E               LSRS     R0,R0,#+24
   \   00000008   7047               BX       LR               ;; return
   \   0000000A   C046               Nop      
   \                     ??EIC_GetCurrentIRQChannel_0:
   \   0000000C   04F8FFFF           DC32     0xfffff804
    193          }
    194          
    195          /*******************************************************************************
    196          * Function Name  : EIC_GetCurrentIRQChannelPriority
    197          * Description    : Returns the priority level of the current served IRQ channel.
    198          * Input          : None
    199          * Output         : None
    200          * Return         : The priority level of the current served IRQ channel.
    201          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    202          u8 EIC_GetCurrentIRQChannelPriority(void)
    203          {
    204            /* Read and return the CIP[3:0] bits of CIPR register */
    205            return ((u8) (EIC->CIPR));
   \                     EIC_GetCurrentIRQChannelPriority:
   \   00000000   ....               LDR      R0,??DataTable18  ;; 0xfffff808
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000006   000E               LSRS     R0,R0,#+24
   \   00000008   7047               BX       LR               ;; return
    206          }
    207          
    208          /*******************************************************************************
    209          * Function Name  : EIC_CurrentIRQPriorityConfig
    210          * Description    : Changes the priority of the current served IRQ channel.
    211          *                  The new priority value must be higher, or equal, than the
    212          *                  priority value associated to the interrupt channel currently
    213          *                  serviced.
    214          * Input          : NewPriority: new priority value of the IRQ interrupt routine
    215          *                  currently serviced.
    216          * Output         : None
    217          * Return         : None
    218          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    219          void EIC_CurrentIRQPriorityConfig(u8 NewPriority)
    220          {
    221            /* Disable EIC IRQ output request to CPU */
    222            EIC->ICR &= EIC_IRQDisable_Mask;
   \                     EIC_CurrentIRQPriorityConfig:
   \   00000000   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   ....               LDR      R2,??DataTable20  ;; 0xfffff800
   \   0000000A   1160               STR      R1,[R2, #+0]
    223          
    224            /* Change the current priority */
    225            EIC->CIPR = NewPriority;
   \   0000000C   ....               LDR      R1,??DataTable18  ;; 0xfffff808
   \   0000000E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000010   000E               LSRS     R0,R0,#+24
   \   00000012   0860               STR      R0,[R1, #+0]
    226          
    227            /* Enable EIC IRQ output request to CPU  */
    228            EIC->ICR |= EIC_IRQEnable_Mask;
   \   00000014   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   00000016   0968               LDR      R1,[R1, #+0]
   \   00000018   0122               MOVS     R2,#+1
   \   0000001A   0A43               ORRS     R2,R2,R1
   \   0000001C   ....               LDR      R1,??DataTable20  ;; 0xfffff800
   \   0000001E   0A60               STR      R2,[R1, #+0]
    229          }
   \   00000020   7047               BX       LR               ;; return
    230          
    231          /*******************************************************************************
    232          * Function Name  : EIC_GetCurrentFIQChannel
    233          * Description    : Returns the current served FIQ channel identifier.
    234          * Input          : None
    235          * Output         : None
    236          * Return         : The current served FIQ channel.
    237          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    238          u8 EIC_GetCurrentFIQChannel(void)
    239          {
    240            /* Read and return the FIP[1:0] bits of FIPR register */
    241            return ((u8) (EIC->FIPR));
   \                     EIC_GetCurrentFIQChannel:
   \   00000000   ....               LDR      R0,??DataTable22  ;; 0xfffff814
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000006   000E               LSRS     R0,R0,#+24
   \   00000008   7047               BX       LR               ;; return
    242          }
    243          
    244          /*******************************************************************************
    245          * Function Name  : EIC_ClearFIQPendingBit
    246          * Description    : Clears the pending bit of the selected FIQ Channel.
    247          * Input          : EIC_FIQChannel: specifies the FIQ channel to clear its
    248          *                  pending bit.
    249          * Output         : None
    250          * Return         : None
    251          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    252          void EIC_ClearFIQPendingBit(u8 EIC_FIQChannel)
    253          {
    254            /* Clear the correspondent FIQ pending bit */
    255            EIC->FIPR = EIC_FIQChannel ;
   \                     EIC_ClearFIQPendingBit:
   \   00000000   ....               LDR      R1,??DataTable22  ;; 0xfffff814
   \   00000002   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000004   000E               LSRS     R0,R0,#+24
   \   00000006   0860               STR      R0,[R1, #+0]
    256          }
   \   00000008   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   20F8FFFF           DC32     0xfffff820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   08F8FFFF           DC32     0xfffff808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   00F8FFFF           DC32     0xfffff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   14F8FFFF           DC32     0xfffff814
    257          
    258          /******************* (C) COPYRIGHT 2006 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     EIC_ClearFIQPendingBit              0
     EIC_CurrentIRQPriorityConfig        0
     EIC_DeInit                          0
     EIC_FIQCmd                          8
     EIC_FIQInit                         8
     EIC_FIQStructInit                   0
     EIC_GetCurrentFIQChannel            0
     EIC_GetCurrentIRQChannel            0
     EIC_GetCurrentIRQChannelPriority
                                         0
     EIC_IRQCmd                          8
     EIC_IRQInit                         8
     EIC_IRQStructInit                   0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     EIC_DeInit                       44
     EIC_IRQInit                     112
     EIC_FIQInit                      44
     EIC_IRQStructInit                14
     EIC_FIQStructInit                10
     EIC_IRQCmd                       42
     EIC_FIQCmd                       42
     EIC_GetCurrentIRQChannel         16
     EIC_GetCurrentIRQChannelPriority
                                      10
     EIC_CurrentIRQPriorityConfig     34
     EIC_GetCurrentFIQChannel         10
     EIC_ClearFIQPendingBit           10
     ??DataTable6                      4
     ??DataTable18                     4
     ??DataTable20                     4
     ??DataTable22                     4

 
 404 bytes in section .text
 
 404 bytes of CODE memory

Errors: none
Warnings: none
